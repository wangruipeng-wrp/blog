<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《写在前面》</title>
    <url>/posts/62949/</url>
    <content><![CDATA[<div class="note success flat"><p>以宁静敬重的心写下的每一行代码，都会以最优雅的方式留存它的美丽。</p>
</div>

<ul>
<li><font size=3> 我在这里分享我所学的一些技术；</font></li>
<li><font size=3> 我在这里分享一些我喜欢的电影；</font></li>
<li><font size=3> 我在这里分享一些我喜欢的书；</font></li>
<li><font size=3> 我也在这里告诉你我喜欢你。</font></li>
<li><font size=3><strong>我在这里，我在学习，我永远在路上。</strong></font></li>
</ul>
<hr>
<p>大家加油：）</p>
]]></content>
  </entry>
  <entry>
    <title>Java 线程池</title>
    <url>/posts/19352/</url>
    <content><![CDATA[<h1 id="为什么要使用线程池"><a href="#为什么要使用线程池" class="headerlink" title="为什么要使用线程池"></a>为什么要使用线程池</h1><div class="note info no-icon flat"><p><strong>多线程使用会出现的两个问题：</strong></p>
</div>

<ol>
<li>多个线程会占用过多内存</li>
<li>反复创建线程开销过大</li>
</ol>
<div class="note info no-icon flat"><p><strong>解决这两个问题的方法：</strong></p>
</div>

<ol>
<li>使用尽量少线程，不让太多线程占用内存。</li>
<li>让这部分线程都保持工作，可以反复执行任务。避免线程生命周期的损耗。</li>
</ol>
<hr>
<p>线程池最核心的部分：<strong>让线程可以反复执行任务</strong>。</p>
<blockquote>
<p>一段伪代码大概演示线程池最重要的线程复用的方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> Queue.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (task != <span class="literal">null</span>) &#123;</span><br><span class="line">    task.run();</span><br><span class="line">    task = Queue.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="如何创建线程池"><a href="#如何创建线程池" class="headerlink" title="如何创建线程池"></a>如何创建线程池</h1><h2 id="手动创建"><a href="#手动创建" class="headerlink" title="手动创建"></a>手动创建</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 核心线程数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CORE_POOL_SIZE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大线程数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_POOL_SIZE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空闲线程存活时间、单位。非核心线程空闲时间超过此参数将会被回收</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">KEEP_ALIVE_TIME</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TimeUnit</span> <span class="variable">UNIT</span> <span class="operator">=</span> TimeUnit.SECONDS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程池所使用的缓冲队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; WORK_QUEUE = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程池创建线程使用的工厂</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadFactory</span> <span class="variable">THREAD_FACTORY</span> <span class="operator">=</span> Thread::<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程池拒绝处理任务时的拒绝策略</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RejectedExecutionHandler</span> <span class="variable">HANDLER</span> <span class="operator">=</span> (Runnable r, ThreadPoolExecutor e) -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RejectedExecutionException</span>(<span class="string">&quot;Task &quot;</span> + r.toString() +</span><br><span class="line">            <span class="string">&quot; rejected from &quot;</span> +</span><br><span class="line">            e.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            CORE_POOL_SIZE,</span><br><span class="line">            MAXIMUM_POOL_SIZE,</span><br><span class="line">            KEEP_ALIVE_TIME,</span><br><span class="line">            UNIT,</span><br><span class="line">            WORK_QUEUE,</span><br><span class="line">            THREAD_FACTORY,</span><br><span class="line">            HANDLER</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里也感叹一下线程池的封装，将所有的操作参数全部暴露出来给到调用者去设置，最大程度的将线程池的内部逻辑与用户操作部分解耦。真是好设计啊，值得学习。<br>能考虑的这么全面，要是我来设计的话估计就只能是暴露个 <code>CORE_POOL_SIZE</code>出来就差不多了。</p>
</blockquote>
<div class="note primary modern"><p><strong>线程池添加线程规则：</strong></p>
</div>

<ol>
<li>如果线程数小于 <code>CORE_POOL_SIZE</code>，即使其他工作线程处于空闲状态，也会创建一个新的线程来运行新任务。</li>
<li>如果线程数等于（或大于）<code>CORE_POOL_SIZE</code> 但少于 <code>MAXIMUM_POOL_SIZE</code>，则将任务放入队列。</li>
<li>如果队列已满，并且线程数小于 <code>MAXIMUM_POOL_SIZE</code>，则创建一个新线程来运行任务。</li>
<li>如果队列已满，并且线程数大于或等于 <code>MAXIMUM_POOL_SIZE</code>，则拒绝该任务。</li>
</ol>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%B7%BB%E5%8A%A0%E7%BA%BF%E7%A8%8B%E8%A7%84%E5%88%99.png" alt="线程池添加线程规则"></p>
<h2 id="自动创建"><a href="#自动创建" class="headerlink" title="自动创建"></a>自动创建</h2><blockquote>
<p>线程池的自动创建是利用 <code>Executors</code> 工具类中的静态方法来创建线程池对象。<code>Executors</code> 为我们定义了一些比较有特性的线程池。如下是四个常用的线程池：</p>
</blockquote>
<hr>
<div class="note primary modern no-icon flat"><p><strong>FixedThreadPool</strong>：定长线程池<br>可控制线程最大并发数，超出的线程会在队列中等待。</p>
</div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<div class="note primary modern no-icon flat"><p><strong>CachedThreadPool</strong>：可缓存线程池<br>如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p>
</div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<div class="note primary modern no-icon flat"><p><strong>SingleThreaded</strong>：单线程的线程池<br>只会用唯一的工作线程来执行任务。</p>
</div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<div class="note primary modern no-icon flat"><p><strong>ScheduledThreadPool</strong>：支持定时及周期性任务执行<br>可以当做定时任务使用。</p>
</div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">newScheduledThreadPool</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ScheduledThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, TimeUnit.NANOSECONDS, <span class="keyword">new</span> <span class="title class_">DelayedWorkQueue</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟 5s 执行</span></span><br><span class="line">scheduledExecutorService.schedule(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// run 方法</span></span><br><span class="line">&#125;, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟 1s 执行，之后每隔 3s 执行一次</span></span><br><span class="line">scheduledExecutorService.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// run 方法</span></span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>以上四种线程构造函数参数对比：</strong></p>
<table>
<thead>
<tr>
<th align="left">Paramter</th>
<th align="left">FixedThreadPool</th>
<th align="left">CachedThreadPool</th>
<th align="left">SingleThreaded</th>
<th align="left">ScheduledThreadPool</th>
</tr>
</thead>
<tbody><tr>
<td align="left">corePoolSize</td>
<td align="left">constructor-arg</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">constructor-arg</td>
</tr>
<tr>
<td align="left">maxPoolSize</td>
<td align="left">same as corePoolSize</td>
<td align="left">Integer.MAX_VALUE</td>
<td align="left">1</td>
<td align="left">Integer.MAX_VALUE</td>
</tr>
<tr>
<td align="left">keepAliveTime</td>
<td align="left">0 seconds</td>
<td align="left">60 seconds</td>
<td align="left">0 seconds</td>
<td align="left">0 seconds</td>
</tr>
</tbody></table>
<h1 id="如何停止线程池"><a href="#如何停止线程池" class="headerlink" title="如何停止线程池"></a>如何停止线程池</h1><div class="note primary simple no-icon flat"><p><strong>停止线程相关的 5 个方法：</strong></p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isShutdown</span><span class="params">()</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isTerminated</span><span class="params">()</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">awaitTerminated</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">List&lt;Runnable&gt; <span class="title function_">shutdownNow</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown();"></a>shutdown();</h2><blockquote>
<p>调用 shutdown 方法之后，线程池并不是立刻就被关闭。事实上这个方法仅仅是初始化整个关闭过程，因为这个时候线程池中可能还有很多任务正在被执行，或者是任务队列中有大量正在等待被执行的任务，所以不是调用 shutdown 方法就立即关闭。在执行这个方法之后，线程池就接收到关闭信息，所以这个时候线程池为了优雅起见，会把正在执行的任务以及队列中等待的任务都执行完毕之后再关闭。</p>
</blockquote>
<h2 id="isShutdown"><a href="#isShutdown" class="headerlink" title="isShutdown();"></a>isShutdown();</h2><blockquote>
<p>isShutdown() 方法可以返回一个布尔值，true 或者 false 来判断线程池是不是已经开始关闭工作，也就是是否执行了 shutdown() 或者 shutdownNow() 方法。这个停止不是说完全停止，因为完全停止指的是所有的任务都执行完毕。</p>
</blockquote>
<h2 id="isTerminated"><a href="#isTerminated" class="headerlink" title="isTerminated();"></a>isTerminated();</h2><blockquote>
<p>返回整个线程池是不是已经完全终止了，这不仅仅线程池已经关闭，同时代表线程池中的所有任务都执行完毕了，就是线程池里面的线程包括正在执行的任务以及队列里面的任务都执行完了。</p>
</blockquote>
<h2 id="awaitTerminated-long-timeout-TimeUnit-unit"><a href="#awaitTerminated-long-timeout-TimeUnit-unit" class="headerlink" title="awaitTerminated(long timeout, TimeUnit unit);"></a>awaitTerminated(long timeout, TimeUnit unit);</h2><blockquote>
<p>这个方法作用相对比较弱，它不是用来停止线程池的，而是用来判断线程池的状态的。比如我们给 awaitTermination() 方法传入的参数是 10 秒，那么它就会等待 10 秒钟。</p>
<p>调用 awaitTermination() 方法之后，当前线程会等待一段时间，如果在等待的这段时间内，线程池已经关闭并且内部任务都执行完毕了，这个方法会返回true，否则超时会返回 false。、</p>
<p>所以这个方法只是一个用来测试在一段时间内这个线程是不是完全停止的。它起到的主要作用是检测，而不是关闭。</p>
</blockquote>
<h2 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow();"></a>shutdownNow();</h2><blockquote>
<p>这个方法比较暴力，它与前面我们介绍的方法都不一样，这个方法后面带了一个 Now，也就表示立刻关闭的意思。如果要想立刻关闭掉，我们作为线程池的设计者，我们想一下应该怎么办才比较优雅。在执行 shutdownNow() 方法之后，首先会给所有线程池中的线程发送 interrupt 中断信号，尝试中断这些任务的执行，然后会将任务队列中正在等待的所有任务转移到一个 List 中并返回，我们可以根据返回的任务List来进行一些补救的操作，例如记录在案并在后期重试。</p>
</blockquote>
<h1 id="线程池的钩子函数"><a href="#线程池的钩子函数" class="headerlink" title="线程池的钩子函数"></a>线程池的钩子函数</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPool</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处省略构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在每个线程执行之前调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeExecute</span><span class="params">(Thread t, Runnable r)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.beforeExecute(t, r);</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在每个线程执行之后调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterExecute</span><span class="params">(Runnable r, Throwable t)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.afterExecute(r, t);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在执行 shutdown 方法之后，并且线程池中所有线程执行结束时调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">terminated</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;所有线程执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此处省略创建 threadPool 对象代码</span></span><br><span class="line"></span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我被执行了。。。&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL实战】普通索引和唯一索引，应该怎么选择？</title>
    <url>/posts/24920/</url>
    <content><![CDATA[<h1 id="查询操作下两个索引的不同"><a href="#查询操作下两个索引的不同" class="headerlink" title="查询操作下两个索引的不同"></a>查询操作下两个索引的不同</h1><p><strong>普通索引的查询过程：</strong></p>
<blockquote>
<p>对于普通索引的查询而言，查询到满足条件的第一条记录之后，还需要接着往下找，直到出现第一个不满足的记录。</p>
</blockquote>
<p><strong>唯一索引的查询过程：</strong></p>
<blockquote>
<p>对于唯一索引的查询而言，查询到满足条件的第一条记录之后，直接返回，不会再继续向下查找。</p>
</blockquote>
<p>对于查询操作来说，普通索引和唯一索引的差别就是在命中第一条记录之后有没有一个往下继续比较的动作而已。显然，一个比较的动作对于性能的影响是微乎其微，可以忽略不计的，因此本文的重点也并不在此。</p>
<h1 id="change-buffer"><a href="#change-buffer" class="headerlink" title="change buffer"></a>change buffer</h1><p>在 <a href="https://www.wrp.cool/posts/42257/">【MySQL实战】深入浅出索引</a> 这篇文章中有提到过 MySQL 中的 <code>页</code> 的概念，页（Page）是 InnoDB 中管理数据的最小单元。</p>
<p>一个 <code>页</code> 中会存放很多条记录，不管是更新还是查找数据，都是要将 <code>页</code> 先读到内存当中的，然后在内存中更新数据，完了再把更新完的 <code>页</code> 写回磁盘。</p>
<p>可以看到在这个过程之中，存在着性能浪费。更新数据并不一定会更新到整个 <code>页</code> 中的数据，但是读数据到内存中却是将整个 <code>页</code> 的数据全部读取出来的，写回磁盘的过程也是将整个 <code>页</code> 的数据全部写回磁盘的。而读写磁盘都是非常昂贵的 IO 操作。于是在更新中肯定会有一些操作来避免或者是尽量的减少这样的 IO 浪费。</p>
<p>change buffer 就是这样的一种技术。</p>
<p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InnoDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p>
<p>将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 merge。除了访问这个数据页会触发 merge 外，系统有后台线程会定期 merge。在数据库正常关闭（shutdown）的过程中，也会执行 merge 操作。</p>
<p>也就是说要尽量在 merge 的过程要刷越多的数据到磁盘上越好，在一个页上一次性刷的数据越多，反过来刷的次数就会越少，性能就会越高。</p>
<p>值得注意的是，change buffer 实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。</p>
<div class="note info flat"><p><strong>change buffer 的使用：</strong></p>
</div>

<p>change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。</p>
<h1 id="更新操作下两个索引的不同"><a href="#更新操作下两个索引的不同" class="headerlink" title="更新操作下两个索引的不同"></a>更新操作下两个索引的不同</h1><p>第一种情况是，<strong>这个记录要更新的目标页在内存中。</strong>这时，InnoDB 的处理流程如下：</p>
<ul>
<li>对于唯一索引来说，找到待更新的位置，判断到没有冲突，插入这个值，语句执行结束；</li>
<li>对于普通索引来说，找到待更新的位置，插入这个值，语句执行结束。<br>这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的 CPU 时间。但，这不是我们关注的重点。</li>
</ul>
<p>第二种情况是，<strong>这个记录要更新的目标页不在内存中。</strong>这时，InnoDB 的处理流程如下：</p>
<ul>
<li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；</li>
<li>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</li>
</ul>
<p>将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p>
<blockquote>
<p>对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。因此，唯一索引的更新就不能使用 change buffer，<strong>实际上也只有普通索引可以使用</strong>。</p>
</blockquote>
<h1 id="比较-change-buffer-和-redo-log-的差别"><a href="#比较-change-buffer-和-redo-log-的差别" class="headerlink" title="比较 change buffer 和 redo log 的差别"></a>比较 change buffer 和 redo log 的差别</h1><div class="note info flat"><p><strong>以写为例，change buffer 的工作流程：</strong></p>
</div>

<ol>
<li>待更新数据页在内存中，直接更新内存中的数据页。记录 redo log。</li>
<li>待更新数据页不在内存中，在内存的 change buffer 区域记录下“我要在数据页X中更新一条数据”。记录 redo log。</li>
</ol>
<p>这样的操作执行成本其实很低，不论数据页是否在内存中，都是写一次内存，然后再写一次磁盘（顺序写）。比起直接去磁盘更新对应数据性能要好一些。</p>
<div class="note info flat"><p><strong>以读为例，change buffer 的工作流程：</strong></p>
</div>

<ol>
<li>要读取的数据页在内存中，直接返回对应结果。</li>
<li>要读取的数据页不在内存中，将对应的数据页读取到内存中，再应用 change buffer 里面的操作日志，生成对应的结果返回。</li>
</ol>
<blockquote>
<p>值得注意的是：更新操作写完 redo log 之后，如果此时需要马上读取这部分数据，并不需要立即更新 redo log 中的数据到数据页中，可以读取对应数据页之后应用 change buffer 日志返回正确结果。</p>
</blockquote>
<hr>
<p>OK，最后回到本文主题：<strong>普通索引和唯一索引，应该怎么选择？</strong></p>
<p>如果在业务上可以接受，首先建议选择普通索引，因为可以应用 change buffer 的优化。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL实战】深入浅出索引</title>
    <url>/posts/42257/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><a href="https://time.geekbang.org/column/article/69236">《极客时间-MySQL实战45讲》04 | 深入浅出索引（上）</a></li>
<li><a href="https://time.geekbang.org/column/article/69636">《极客时间-MySQL实战45讲》05 | 深入浅出索引（下）</a></li>
<li>笔记整理</li>
</ul>
</blockquote>
<hr>
<p>首先还是要先了解 <strong>页（Page）</strong> 这个概念，才能更好的理解 InnoDB 中的索引。</p>
<div class="note success flat"><p><strong>页是什么？</strong></p>
</div>

<ul>
<li><p>页（Page）是 InnoDB 中管理数据的最小单元。</p>
</li>
<li><p>聚簇索引中的叶子结点就是一个个的页。</p>
<blockquote>
<p><em>插句题外话：</em><br><em>之前初学 MySQL 的时候，由于 DML 操作的都是一行行的数据，所以那时候总是以为 MySQL 中的最小数据单位就是 row。UPDATE 的时候就去磁盘中拿到对应的数据出来，然后 UPDATE 之后再放回去。但现在看来显然不是，MySQL 是先把该行数据所在的页先加载到内存中修改完了再延迟刷回磁盘的。</em></p>
</blockquote>
</li>
</ul>
<div class="note success flat"><p><strong>页的概览</strong></p>
</div>

<p>MySQL 中的数据最终都是存在聚簇索引树的叶子结点中的，也就是页之间其实是双向链表的这么一种数据结构，并且页与页之间也是有序的。在叶子结点中存储用户数据的部分是一种单向链表的结构。</p>
<p>当我们在查找数据的时候，为了快速判断要查找的数据是否在当前页之中。在页中还会记录页本页用户数据中的最大值和最小值。</p>
<p>如果所需要的数据就在当前页中，为了避免整个页去查找，MySQL 又在页中加入了另一个区域 Page Directory 目录，里面有很多个槽位（Slots），每一个槽位都指向了一条 User Records 中的记录。每隔几条数据，就会创建一个槽位。在一个完整的页中，每隔6条数据就会有一个 Slot。有了 Page Directory 之后，页内的用户数据就不需要去维护有序性了，直接插入在链表尾部即可。</p>
<p>Slot 会在新增数据的时候创建和维护，之后就可以对一张页的数据进行<strong>粗略</strong>的二分查找。因为二分查找出来的结果只能是个大概的位置，找到了这个大概的位置之后，还需要回到 User Records 中继续的进行挨个遍历匹配。</p>
<blockquote>
<p>粗略画了下页的概览图，如下：</p>
</blockquote>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/1654781897359.png" alt="1654781897359"></p>
<blockquote>
<p><strong>小结：</strong></p>
<p>MySQL 查找数据的方式，首先是通过索引将数据所在的页先加载到内存中去，之后在内存中尽量的缩小所在数据的范围，再去遍历数据找到最终所需要的数据。</p>
</blockquote>
<hr>
<h1 id="索引的常见模型"><a href="#索引的常见模型" class="headerlink" title="索引的常见模型"></a>索引的常见模型</h1><p>三种常见、也比较简单的数据结构，它们分别是<code>哈希表</code>、<code>有序数组</code>和<code>N叉树</code></p>
<blockquote>
<p>你心里要有个概念，数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我们需要先关注它的数据模型，这样才能从理论上分析出这个数据库的适用场景。</p>
</blockquote>
<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的键即 key，就可以找到其对应的值即 Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。如果多个 key 值经过哈希函数的换算，出现了同一个值。这种情况称为哈希冲突，一般可以往后拉出来一个链表解决。</p>
<ul>
<li><strong>优点：</strong><ul>
<li>新增数据快，可以直接查询到要添加的位置，直接添加或者添加为链表的尾结点。</li>
<li>等值查询速度快。</li>
</ul>
</li>
<li><strong>缺点：</strong><ul>
<li>由于无序，所以哈希索引做区间查询的速度是很慢的。</li>
</ul>
</li>
<li><strong>适用场景：</strong><ul>
<li>只有等值查询的场景。</li>
</ul>
</li>
</ul>
<h2 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h2><p>是一种数组按照下标升序或者降序存储数据的结构。</p>
<ul>
<li><strong>优点：</strong><ul>
<li>使用二分法做查询速度很快，时间复杂度是 O(log(N))</li>
<li>支持区间查询，先用二分法查询到区间最左的元素，再向右遍历直至最又的元素。</li>
</ul>
</li>
<li><strong>缺点：</strong><ul>
<li>往中间添加一个数据需要往后挪动所有的数据，这个过程很慢，时间复杂度是 O(log(N))</li>
</ul>
</li>
<li><strong>适用场景：</strong><ul>
<li>有序数组只适用于读多写少的情况。</li>
</ul>
</li>
</ul>
<h2 id="N叉树"><a href="#N叉树" class="headerlink" title="N叉树"></a>N叉树</h2><p>为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。</p>
<p>以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。</p>
<p><strong>InnoDB 引擎中使用的是 B+树 这种N叉树的数据结构作为索引模型。</strong></p>
<h1 id="InnoDB-的索引模型"><a href="#InnoDB-的索引模型" class="headerlink" title="InnoDB 的索引模型"></a>InnoDB 的索引模型</h1><p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。准确的说应该是存在 B+ 树中的叶子节点中的。每个叶子节点就是开头说的<strong>页（Page）</strong>。</p>
<p>每一个索引在 InnoDB 里面都对应了一棵 B+ 树。根据叶子节点的内容，索引类型分为主键索引和非主键索引。主键索引的叶子节点存的是整行数据。</p>
<ul>
<li>在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</li>
<li>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</li>
</ul>
<div class="note primary flat"><p><strong>基于主键索引和普通索引的查询有什么区别？</strong></p>
</div>

<ul>
<li>如果语句是 select * from T where ID&#x3D;1，即主键查询方式，则只需要搜索 ID 这棵 B+ 树</li>
<li>如果语句是 select * from T where k&#x3D;5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为<strong>回表</strong>。</li>
</ul>
<p>也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p>
<div class="note primary flat"><p>为什么普通索引的叶子节点上要存放的是 ID，为什么不直接存对应行数据的地址呢？</p>
</div>

<ul>
<li><strong>优点：</strong><br>  减少了页分裂或者页合并时候二级索引的维护工作。</li>
<li><strong>缺点：</strong><ol>
<li>二级索引体积可能会变大，因为其中存储了主键信息。</li>
<li>二级索引的访问需要两次查找，要多一次回表的操作。</li>
</ol>
</li>
</ul>
<div class="note primary flat"><p>一个老生常谈的话题了，为啥不用 select *，而要把查询的字段全部写出来呢？</p>
</div>

<p>select * 是肯定要回表的，会导致索引覆盖用不了。</p>
<h1 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h1><p>前文说过 InnoDB 页之间是有序的，为了维护这个有序性，在插入新值和删除旧值的时候就需要做一些必要的维护。</p>
<blockquote>
<p>有个概念可能会混淆，得先说清楚，索引是肯定有序的，这里的有序无序指的是插入的顺序。</p>
</blockquote>
<p>如果都是有序插入的话，每次都直接在页内插入一条新的数据或者申请一个新的页再插入数据即可，这样子可以保证除了最后一页所有页都是满的，空间利用率最高。有序插入的方案是最优的，自增主键就是一种 InnoDB 提供的有序插入的方案。</p>
<div class="note primary flat"><p><strong>页分类与页合并</strong></p>
</div>

<ul>
<li><p><strong>页分裂：</strong></p>
<blockquote>
<p>如果无序插入到一个页内空间已经满了的话，就需要再开新的一页来存储这个数据。根据 B+ 树的算法，会挪动部分数据过去新的页，这个过程称为<strong>页分裂</strong>。在这种情况下，性能自然会受影响。除了性能外，页分裂操作还影响数据页的利用率。因为新开的数据页不一定会被填满。</p>
</blockquote>
</li>
<li><p><strong>页合并：</strong></p>
<blockquote>
<p>当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。</p>
</blockquote>
</li>
</ul>
<div class="note info flat"><p><strong>两个建议：</strong></p>
</div>

<ol>
<li>使用自增主键。这样可以保证每次插入都是有序插入的，可以防止页分裂。</li>
<li>删除先做逻辑上的删除，不要做物理删除，这样可以防止页合并。等到有时间了再去真正的删除。</li>
</ol>
<p>新增或者删除的时候多了分裂或者合并的操作，性能自然会受到影响。除了考虑性能外，从存储空间的角度来看，也应该用自增主键，因为普通索引的叶子节点上存储的是主键，显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</p>
<h1 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h1><p>由于二级索引并没有存放真实的数据，所以需要到主键索引上进行一次回表的操作，这自然会影响性能。</p>
<p>那如果我只要查 ID 呢？二级索引的叶子节点上就是记录了 ID，那么自然不需要回表，自然提高了性能。于是很自然的一个想法就出现了，那就是把一些经常会查询到的字段一起记录在二级索引上，这就是<strong>覆盖索引</strong>。</p>
<p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p>
<blockquote>
<p>比如有这样的一个需求：<strong>根据身份证号码查询姓名</strong></p>
</blockquote>
<p>身份证号码作为每个人的唯一标识，肯定会有很多根据身份证号码查询身份信息的请求，应该要在身份证号码这个字段上建一个索引。但查询姓名这个需求是一个很高频的需求，这个时候就可以把身份证号码跟姓名一起建立一个联合索引。这样它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。</p>
<p>当然，索引字段的维护总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。</p>
<h1 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h1><p>假设现在有一个（姓名，年龄）的联合索引：</p>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95.jpg" alt="最左前缀索引"></p>
<p>可以看到，索引项是按照索引定义里面出现的字段顺序排序的。</p>
<p>当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。</p>
<p>如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是”where name like ‘张 %’”。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。</p>
<p>可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个<strong>最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符</strong>。</p>
<p>很显然，这里的（姓名，年龄）索引中的（年龄）是可以复用的，于是此处相当于拥有了两个索引，分别是：（姓名，年龄）、（姓名）</p>
<p>那么，<strong>在建立联合索引的时候，如何安排索引内的字段顺序呢？</strong></p>
<ol>
<li>如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。<ul>
<li>比如上面（姓名，年龄）的例子，通过建立（姓名，年龄），相当于拥有了（姓名，年龄）和（姓名）两个索引，不需要为（姓名）单独再创建一个索引。</li>
</ul>
</li>
<li>考虑字段大小，将字段大一点的排到前面去。<ul>
<li>比如上面（姓名，年龄）的例子，如果还需要姓名跟年龄都建立索引，那么就应该建立（姓名，年龄）这样的联合索引，然后再建立一个（年龄）的索引。因为单独的（年龄）索引占用的空间比起单独的（姓名）的空间要来的小。</li>
</ul>
</li>
</ol>
<h1 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h1><blockquote>
<p>在 MySQL5.6 以后引入了索引下推优化（index condition pushdown)。</p>
</blockquote>
<p>还是拿上面（姓名，年龄）索引的例子，需求是这样的：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tuser <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">and</span> age<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> is_male<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p>
<p>， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p>
<blockquote>
<p><strong>无索引下推优化：</strong></p>
<p>查找到第一个符合 <code>name like &#39;张%&#39;</code> 的记录，也就是 ID3 的张六，之后开始一个个回表对比其他字段值，<strong>共需回表4次</strong>。</p>
</blockquote>
<blockquote>
<p><strong>有索引下推优化：</strong></p>
<p>查找到第一个符合 <code>name like &#39;张%&#39;</code> 的记录，也就是 ID3 的张六，之后在（姓名，年龄）这科索引树下直接判断是否符合 <code>age=10</code> 的条件，如果符合，则回表对比其他字段值；如果不符合，直接放弃回表，减少回表次数，<strong>共需回表2次</strong>。</p>
</blockquote>
<hr>
<blockquote>
<p>网友热心总结的一些问题，复习的时候可以试着回答一下。</p>
</blockquote>
<ol>
<li>select * from T where k betwee 3 and 5 这条语句的执行流程是什么样的?</li>
<li>回表的概念是什么?</li>
<li>索引覆盖的概念是什么, 索引覆盖的优点是什么?</li>
<li>最左前缀原则的概念是什么? 说明最左前缀原则的执行过程.</li>
<li>索引下推的概念是什么? MySQL 5.6 的下推优化是怎么做的?</li>
</ol>
<blockquote>
<p><strong>参考文章：</strong><a href="https://zhuanlan.zhihu.com/p/382375842">MySQL 页完全指南——浅入深出页的原理</a></p>
</blockquote>
<p>大家加油：）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL实战】全局锁、表锁、行锁</title>
    <url>/posts/27299/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><a href="https://time.geekbang.org/column/article/69862">《极客时间-MySQL实战45讲》06 | 全局锁和表锁 ：给表加个字段怎么有这么多阻碍？</a></li>
<li><a href="https://time.geekbang.org/column/article/70215">《极客时间-MySQL实战45讲》07 | 行锁功过：怎么减少行锁对性能的影响？</a></li>
<li>笔记整理</li>
</ul>
</blockquote>
<span id="more"></span>

<p>根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类。</p>
<p>在正式开篇之前还是得先搞清楚两个概念：共享锁和排他锁</p>
<ul>
<li><strong>共享锁：</strong>所有线程都可以拥有共享锁，故名为共享。一般是读锁。</li>
<li><strong>排他锁：</strong>仅一个线程可以拥有锁，其他线程必须等待该线程释放锁后才可以拿到锁，故名为排他。一般是写锁。</li>
</ul>
<hr>
<h1 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h1><blockquote>
<p>顾名思义，全局锁的锁定对象是整个数据库实例。</p>
</blockquote>
<ul>
<li><strong>加锁语法：</strong><code>flush tables with read lock; (FTWRL)</code></li>
<li><strong>释放锁语法：</strong><code>unlock tables;</code></li>
</ul>
<p>这是一把读锁，使用之后所有的线程只能读取数据而不能修改数据，方式是阻塞其他线程的以下一些语句：</p>
<ul>
<li>数据更新语句（数据的增删改）</li>
<li>数据定义语句（包括建表、修改表结构等）</li>
<li>更新类事务的提交语句。</li>
</ul>
<p>比较多的使用场景是全局逻辑备份，<strong>用于保证备份时的数据一致性</strong>。其底层支持是 <a href="https://www.wrp.cool/posts/574/">MVCC 多版本并发控制</a></p>
<blockquote>
<p>在备份的场景里，FTWRL 相较于 <code>set global read_only=true;</code> 的优势：</p>
</blockquote>
<ol>
<li>readonly 的值可能会被用来做其他逻辑，比如用来判断一个库是主库还是备库。影响面比较大，不建议使用。</li>
<li>异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</li>
</ol>
<blockquote>
<p><strong>MySQL 全局备份方式：</strong><br>官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数 <code>–single-transaction</code> 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。</p>
<p><strong>注意：</strong><br>MySQL 并非所有的引擎都支持 <code>–single-transaction</code> 参数，底层需要 MVCC 的支持，而目前仅 InnoDB 提供了 MVCC 支持。如果有的表使用了不支持事务的引擎，那么备份就只能通过 FTWRL 方法。这往往是 DBA 要求业务开发人员使用 InnoDB 替代 MyISAM 的原因之一。</p>
</blockquote>
<h1 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h1><p>MySQL5.5 开始引入了元数据锁，自此MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p>
<h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><blockquote>
<p>用于锁定整个表对象，分为读锁和写锁。</p>
</blockquote>
<p>读锁（ <code>lock tables … read</code>）：该锁是一种<strong>共享锁</strong>，MySQL 中的表一旦被加上了读锁，其他线程的修改语句就会被阻塞。所有线程均仅可读。<br>写锁（ <code>lock tables … write</code>）：该锁是一种<strong>排他锁</strong>，MySQL 中的表一旦被加上了写锁，除了拥有锁的线程之外，其他的线程对该表的读写操作都会被阻塞。</p>
<div class="note danger flat"><p>对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面太大了。</p>
</div>

<h2 id="元数据锁（meta-data-lock，MDL）"><a href="#元数据锁（meta-data-lock，MDL）" class="headerlink" title="元数据锁（meta data lock，MDL）"></a>元数据锁（meta data lock，MDL）</h2><blockquote>
<p>这是一种列锁，锁住的是表的表结构。也就是说上锁期间会对 DDL 的操作做限制。同样分为了 MDL 读锁和 MDL 写锁。</p>
</blockquote>
<p>MDL 是 server 层的锁，表级锁，主要用于隔离 DML 和 DDL 操作之间的干扰。每执行一条 DML、DDL 语句时都会申请 MDL锁，DML 操作需要 MDL 读锁（共享），DDL 操作需要 MDL 写锁（排他）。MDL 加锁过程是系统自动控制，无法直接干预。</p>
<div class="note danger flat"><p>MDL 可能导致线程爆满，打爆数据库系统。</p>
</div>

<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/MDL%E9%98%BB%E5%A1%9E%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA%E5%9B%BE.jpg" alt="MDL阻塞过程演示图"></p>
<p>在上面的这个图中，sessionA 正常启动，正常获取 MDL 读锁，之后 sessionB 启动，也获取到 MDL 读锁。</p>
<p>之后 sessionC 启动需要获取 MDL 写锁，此时由于 MDL 读锁还没释放，于是 sessionC 进入阻塞状态等待获取 MDL 写锁。</p>
<p>但是如果碰巧 sessionA 或者 sessionB 中有一个是长事务，那么 sessionC 被阻塞的时间就会久一些，sessionC 之后的所有线程都拿不到 MDL 锁，MDL 读写锁都拿不到。</p>
<p>如果此时恰巧有很多的请求进来，全部都被阻塞在一起，很快就会导致线程爆满，数据库被打爆。</p>
<h1 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h1><blockquote>
<p>顾名思义，行锁就是针对数据表中行记录的锁。这很好理解，比如事务 A 更新了一行，而这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。</p>
</blockquote>
<h2 id="行锁的两阶段协议"><a href="#行锁的两阶段协议" class="headerlink" title="行锁的两阶段协议"></a>行锁的两阶段协议</h2><div class="note default flat"><p>举例说明：</p>
</div>

<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E8%A1%8C%E9%94%81-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%8D%8F%E8%AE%AE.jpg" alt="行锁-两阶段协议"></p>
<p>在这个例子中，事务B会被事务A阻塞，直到事务A commit 才会执行事务B。显然事务A持有 id&#x3D;1、id&#x3D;2 这两行的锁。</p>
<blockquote>
<p>可以得出：</p>
<p>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。<br><strong>这个就是两阶段锁协议。</strong></p>
</blockquote>
<p>由两阶段协议可得：</p>
<div class="note warning flat"><p><strong>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</strong></p>
</div>

<blockquote>
<p><strong>像这样：</strong></p>
<p>假设你负责实现一个电影票在线交易业务，顾客 A 要在影院 B 购买电影票。我们简化一点，这个业务需要涉及到以下操作：</p>
<ol>
<li>从顾客 A 账户余额中扣除电影票价；</li>
<li>给影院 B 的账户余额增加这张电影票价；</li>
<li>记录一条交易日志。</li>
</ol>
<p>由于两阶段协议，所以应该尽量把最可能造成锁冲突、影响并发度的锁往后放。<br>所以以上三条语句在编码时的执行顺序应该是：<code>1 3 2</code> 或者是 <code>3 1 2</code></p>
</blockquote>
<h2 id="死锁和死锁检测"><a href="#死锁和死锁检测" class="headerlink" title="死锁和死锁检测"></a>死锁和死锁检测</h2><blockquote>
<p><strong>什么是死锁：</strong></p>
<p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。</p>
</blockquote>
<div class="note default flat"><p><strong>举例：</strong></p>
</div>

<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E6%8B%BF%E8%A1%8C%E9%94%81%E4%B8%BE%E4%B8%AA%E6%AD%BB%E9%94%81%E4%BE%8B%E5%AD%90.jpg" alt="拿行锁举个死锁例子"></p>
<p>此时，事务A在等待事务B中 id&#x3D;2 的行锁，事务B又在等待事务A id&#x3D;1 的锁，陷入了一种事务A等事务B，事务B等事务A的状态，这就是死锁现象。</p>
<div class="note primary flat"><p><strong>死锁的应对策略：</strong></p>
</div>

<ol>
<li><p>直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。<br> 在 InnoDB 中，innodb_lock_wait_timeout 的默认值是 50s，对于在线服务来说，这个等待时间往往是无法接受的。但是如果把这个超时时间设置的很短呢？那又可能误伤到很多只是锁等待的线程，这也不好。所以这个方案需要把握好一个比较精准的度。</p>
</li>
<li><p>发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</p>
</li>
</ol>
<blockquote>
<p>正常情况下我们还是要采用第二种策略，即：<strong>主动死锁检测</strong>，而且 innodb_deadlock_detect 的默认值本身就是 on。主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的。</p>
<p>你可以想象一下这个过程：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。</p>
<p>但是如果很大量的请求都要同时更新同一行的数据呢？</p>
<p>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。</p>
</blockquote>
<div class="note primary flat"><p><strong>怎么解决由这种热点性更新导致的性能问题呢？</strong></p>
</div>

<ol>
<li>在业务上保证不出现死锁的情况，将死锁检测关掉。<ul>
<li><strong>缺点：</strong>业务上的实现很困难</li>
</ul>
</li>
<li>控制并发度。<ul>
<li><strong>怎么做？</strong>借助中间件，或者是直接修改 MySQL 源码。</li>
</ul>
</li>
<li>从数据库设计上优化。<ul>
<li><strong>怎么做？</strong>将一条数据扩展成多条数据，每次随机选择其中一条记录来做修改，人为的将并发度降低。</li>
</ul>
</li>
</ol>
<hr>
<blockquote>
<p>网友热心总结的一些问题，复习的时候可以试着回答一下。</p>
</blockquote>
<ol>
<li>MySQL从加锁范围上分为哪三类?</li>
<li>全局锁加锁方法的执行命令是什么?主要的应用场景是什么?</li>
<li>做整库备份时为什么要加全局锁?</li>
<li>MySQL的自带备份工具, 使用什么参数可以确保一致性视图, 在什么场景下不适用?</li>
<li>不建议使用set global readonly &#x3D; true的方法加全局锁有哪两点原因?</li>
<li>表级锁有哪两种类型?  各自的使用场景是什么?</li>
<li>MDL中读写锁之间的互斥关系怎样的?</li>
<li>如何安全的给小表增加字段?</li>
<li>两阶段锁的概念是什么? 对事务使用有什么帮助?</li>
<li>死锁的概念是什么? 举例说明出现死锁的情况.</li>
<li>死锁的处理策略有哪两种? </li>
<li>等待超时处理死锁的机制什么?有什么局限?</li>
<li>死锁检测处理死锁的机制是什么? 有什么局限?</li>
<li>有哪些思路可以解决热点更新导致的并发问题?</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>锁</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL实战】事务隔离</title>
    <url>/posts/574/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><a href="https://time.geekbang.org/column/article/68963">《极客时间-MySQL实战45讲》03 | 事务隔离：为什么你改了我还看不见？</a></li>
<li><a href="https://time.geekbang.org/column/article/70562">《极客时间-MySQL实战45讲》08 | 事务到底是隔离还是不隔离的？</a></li>
<li>笔记整理</li>
</ul>
</blockquote>
<span id="more"></span>

<h1 id="事务的基本特性（ACID）"><a href="#事务的基本特性（ACID）" class="headerlink" title="事务的基本特性（ACID）"></a>事务的基本特性（ACID）</h1><ul>
<li><strong>原子性（Atomicity）：</strong>事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。</li>
<li><strong>一致性（Consistency）：</strong>事务开始前和结束后，数据库的完整性约束没有被破坏。</li>
<li><strong>隔离性（Isolation）：</strong>同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。</li>
<li><strong>持久性（Durability）：</strong>事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</li>
</ul>
<h1 id="不考虑隔离性可能产生的问题"><a href="#不考虑隔离性可能产生的问题" class="headerlink" title="不考虑隔离性可能产生的问题"></a>不考虑隔离性可能产生的问题</h1><ul>
<li><strong>脏读：</strong>指在一个事务处理过程中读取了另一个未提交的事务中的数据。<ul>
<li>比如事务A将 x 的值从0修改为1，但未回滚或提交，此时事务B读取了 x 的值为1，随后事务A回滚，将 x 的值重新设置为0。那么事务B读取的 x 的值为1的哪个过程就称为脏读。</li>
</ul>
</li>
<li><strong>不可重复读：</strong>一个事务内多次查询<strong>同一个数据</strong>却返回了不同的数据值。<ul>
<li>比如事务A查询 x 值为0，此时事务B将 x 的值修改为0并提交，事务A再次查询 x 的值为1。事务A并未对 x 的值做操作，但是两次查询 x 的值发生了变化，这个现象就被称为不可重复读。</li>
</ul>
</li>
<li><strong>幻读：</strong>一个事务内多次查询<strong>同一批数据</strong>却返回了不同批的数据。<ul>
<li>比如事务A查询用户表有100个用户，此时事务B新增或者删除了一些用户，之后事务A再次查询用户表返回的不是100个用户。这个现象就被称为幻读。</li>
</ul>
</li>
</ul>
<blockquote>
<p>幻读和不可重复读看起来好像很相似，都是读取了另外一个事务所提交的修改，但区别是<strong>不可重复读针对的是数据项，而幻读针对的是数据量</strong>。</p>
</blockquote>
<h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><ul>
<li><strong>读未提交（READ UNCOMMITTED）：</strong>一个事务还没提交时，它做的变更就能被别的事务看到。</li>
<li><strong>读已提交（READ COMMITTED）：</strong>一个事务提交之后，它做的变更才会被其他事务看到。</li>
<li><strong>可重复读（REPEATABLE READ）：</strong>一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。</li>
<li><strong>串行化（SERIALIZABLE ）：</strong>顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li>
</ul>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%BE%E4%BE%8B.jpg" alt="事务隔离级别举例"></p>
<ul>
<li><strong>读未提交：</strong> V1 的值是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2。</li>
<li><strong>读已提交：</strong> V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以，V3 的值也是 2。</li>
<li><strong>可重复读：</strong> V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。</li>
<li><strong>串行化：</strong>在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。</li>
</ul>
<h1 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h1><p>事务隔离级别中的 READ UNCOMMITIED 总是读取最新的数据行，而不是符合当前事务版本的数据行。而 SERIALIZABLE 则会对所有读取的行都加锁。这两种隔离级别都能够独立实现，而 READ COMMITTED 和 REPEATABLE READ 这两种隔离级别则需要依赖于 MVVC 多版本并发控制来实现。</p>
<div class="note primary flat"><p><strong>MVCC 多版本并发控制</strong></p>
</div>

<p><strong>什么是 MVCC？</strong></p>
<blockquote>
<p>MVCC，全称 Multi-Version Concurrency Control，即多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p>
</blockquote>
<p><strong>MVCC 能做什么？</strong></p>
<blockquote>
<p>借助 MVCC 实现了 READ COMMITTED，REPEATABLE READ 等隔离级别。</p>
</blockquote>
<h1 id="InnoDB-中的-MVCC"><a href="#InnoDB-中的-MVCC" class="headerlink" title="InnoDB 中的 MVCC"></a>InnoDB 中的 MVCC</h1><p>InnDB 中每个事务都有一个唯一的事务 ID，记为 transaction_id。它在事务开始时向 InnDB 申请，按照时间先后严格递增。</p>
<p>而每行数据其实都有多个版本，这就依赖 undo log 来实现了。每次事务更新数据就会生成一个新的数据版本，并把  transaction_id 记为 row trx_id。同时旧的数据版本会保留在 undo log 中，而且新的版本会记录旧版本的回滚指针，通过它直接拿到上一个版本。</p>
<p>为了保证每个事务中拿到的数据都是不被其他事务污染的，InnoDB 还需要一个 read-view（一致性读视图） 来保存每次事务查询的时候不被污染的那一份数据。</p>
<p>所以，InnDB 中的 MVCC 其实是通过在每行记录后面保存两个隐藏的列来实现的。一列是事务 ID：<code>trx_id</code>；另一列是回滚指针：<code>roll_pt</code>。</p>
<h2 id="undo-log（回滚日志）"><a href="#undo-log（回滚日志）" class="headerlink" title="undo log（回滚日志）"></a>undo log（回滚日志）</h2><p>回滚日志保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读。</p>
<p>根据操作和删除日志时机的不同，undo log 分为两种： insert undo log 和 update undo log。</p>
<h3 id="insert-undo-log"><a href="#insert-undo-log" class="headerlink" title="insert undo log"></a>insert undo log</h3><p>由于 INSERT 操作记录没有历史版本只对当前事务本身可见，对于其他事务此记录不可见，所以 insert undo log 可以在事务提交后直接删除而不需要进行 purge 操作。</p>
<blockquote>
<p>purge（清除）：的主要任务是将数据库中已经 mark del 的数据删除，另外也会批量回收 undo pages</p>
</blockquote>
<p>在事务提交时，这个事务所做的 INSERT 的操作所记录的 undo log 的日志会被直接删除。</p>
<h3 id="update-undo-log"><a href="#update-undo-log" class="headerlink" title="update undo log"></a>update undo log</h3><p>由于 UPDATE 操作的历史版本可能其他的事务需要用到，所以 UPDATE 操作的 undo log 保存的时间会长一些，只有在系统中没有比这个回滚日志更早的版本时，purge 线程将进行最后的删除操作。</p>
<p>假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E5%9B%9E%E6%BB%9A%E6%97%A5%E5%BF%97%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="回滚日志流程图"></p>
<p>如果发生了回滚，4就会变成3再变成2再变成1，一步一步的恢复到初始状态。</p>
<blockquote>
<p>当不需要这些回滚日志的时候，这些日志就会被删除。<br>什么时候不需要这些回滚日志呢？<strong>当系统里没有比这个回滚日志更早的 read-view 的时候。</strong></p>
</blockquote>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/1654328337012.png" alt="1654328337012"></p>
<h2 id="read-view（一致性读视图）"><a href="#read-view（一致性读视图）" class="headerlink" title="read-view（一致性读视图）"></a>read-view（一致性读视图）</h2><p>read view 是 InnDB 在实现 MVCC 时用到的一致性读视图，用于支持 RC（读提交）以及 RR（可重复读）隔离级别的实现。</p>
<p>read view 不是真实存在的，只是一个概念，undo log 才是它的实现，<strong>主要是通过版本和 undolog 计算出来的</strong>，作用是决定事务能看到哪些数据。</p>
<p>每个事务或者语句有自己的一致性视图。普通查询语句是一致性读，一致性读会根据 row trx_id 和一致性视图确定数据版本的可见性。</p>
<div class="note warning flat"><p><strong>可见性规则</strong></p>
</div>

<blockquote>
<p>一个事务只需要在启动的时候声明说，“以我启动的时刻为准，如果一个数据版本是在我启动之前生成的，就认；如果是我启动以后才生成的，我就不认，我必须要找到它的上一个版本”。</p>
</blockquote>
<p>在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交。</p>
<p>数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。（注意：低水位是数组内最小值，高水位是系统内最大的事务ID再加1，高水位不在数组内）</p>
<p>这个视图数组和高水位，就组成了当前事务的一致性视图（read-view）。而数据版本的可见性规则，就是基于数据的 row trx_id 和这个一致性视图的对比结果得到的。</p>
<div class="note primary flat"><p><strong>这个视图数组把所有的 row trx_id 分成了几种不同的情况，如下：</strong></p>
</div>

<ol>
<li><strong>小于低水位：</strong>表示这个版本是已提交的事务，这个数据是可见的；</li>
<li><strong>大于等于高水位：</strong>表示这个版本是由将来启动的事务生成的，是肯定不可见的；</li>
<li><strong>大于等于低水位 &amp;&amp; 小于高水位：</strong><ul>
<li><strong>就是当前事务：</strong>可见；</li>
<li><strong>row trx_id 在数组中：</strong>表示这个版本是由还没提交的事务生成的，不可见；</li>
<li><strong>row trx_id 不在数组中：</strong>表示这个版本是已经提交了的事务生成的，可见。</li>
</ul>
</li>
</ol>
<blockquote>
<p>关于第三点的 row trx_id 在不在数组中，不是很好理解，专门画了个图：</p>
</blockquote>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/MVCC%E6%B0%B4%E4%BD%8D%E5%9B%BE.png" alt="MVCC水位图"></p>
<div class="note info flat"><p><strong>一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，有三种情况：</strong></p>
</div>

<ol>
<li>版本未提交，不可见；</li>
<li>版本已提交，但是是在视图创建后提交的，不可见；</li>
<li>版本已提交，而且是在视图创建前提交的，可见。</li>
</ol>
<h1 id="更新不用-read-view"><a href="#更新不用-read-view" class="headerlink" title="更新不用 read-view"></a>更新不用 read-view</h1><div class="note danger flat"><p><strong>更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读”（current read）</strong></p>
</div>

<blockquote>
<p><strong>为什么 UPDATE 操作必须使用当前读？</strong></p>
<p>当 <code>x=1</code> 事务A 执行：<code>set x = x + 1</code>；事务B 也执行：<code>set x = x + 1</code>。<br><strong>一致性读：</strong></p>
<ul>
<li>事务A 与 事务B 拿到 x 的初始数据都是 x&#x3D;1，执行完毕后 x&#x3D;2，<strong>丢失其中一次更新</strong></li>
</ul>
<p><strong>当前读：</strong></p>
<ul>
<li>事务A 开始执行。事务B 等待 事务A 执行完毕</li>
<li>事务A 执行完毕，x&#x3D;2。事务B 开始执行，x&#x3D;3</li>
</ul>
<p><strong>可见当前读未丢失更新</strong></p>
</blockquote>
<div class="note success flat"><p><strong>这也是行锁的两阶段协议存在的原因，防止更新丢失。</strong></p>
</div>

<div class="note primary flat"><p><strong>除了 update 语句外，select 语句如果加锁，也是当前读。</strong></p>
</div>

<h1 id="一个例子结束本文"><a href="#一个例子结束本文" class="headerlink" title="一个例子结束本文"></a>一个例子结束本文</h1><p>假设现在有一个表 t，初始化语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `k` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t(id, k) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>此时，分别有事务A、事务B、事务C，执行流程如下：</p>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E4%BA%8B%E5%8A%A1%E4%B8%BE%E4%BE%8B.jpg" alt="事务举例"></p>
<p><strong>注意：</strong>begin&#x2F;start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。</p>
<ul>
<li>第一种启动方式，一致性视图是在执行第一个快照读语句时创建的；</li>
<li>第二种启动方式，一致性视图是在执行 start transaction with consistent snapshot 时创建的。</li>
</ul>
<p><strong>但是：</strong>在读提交的隔离级别下，“start transaction with consistent snapshot; ”这个用法就没意义了，等效于普通的 start transaction。</p>
<p><strong>因为：</strong>在可重复读隔离级别下，只需要在事务开始的时候创建一致性视图，之后事务里的其他查询都共用这个一致性视图；在读提交隔离级别下，每一个语句执行前都会重新算出一个新的视图。</p>
<blockquote>
<p>本例中，事务A、事务B、事务C分别的查询结果：</p>
<ul>
<li><strong>事务A</strong>读取的 k &#x3D; 1：事务A 的一致性视图开启时 k &#x3D; 1。</li>
<li><strong>事务B</strong>读取的 k &#x3D; 3：事务B 的更新采用当前读，当前 k 值已经被事务C修改成2。</li>
<li><strong>事务C</strong>读取的 k &#x3D; 1：事务C 最初始拿到的 k 值就是1。</li>
</ul>
</blockquote>
<hr>
<p>大家加油：）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL实战】日志系统：一条SQL更新语句是如何执行的？</title>
    <url>/posts/39005/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><a href="https://time.geekbang.org/column/article/68633">《极客时间-MySQL实战45讲》02 | 日志系统：一条SQL更新语句是如何执行的？</a></li>
<li>笔记整理</li>
</ul>
</blockquote>
<span id="more"></span>

<p>与上一篇笔记中的查询流程相同，一条更新语句也是要经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。</p>
<p>例如这样的一个表，然后有这样的一条更新的语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> T(ID <span class="type">int</span> <span class="keyword">primary</span> key, c <span class="type">int</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> T <span class="keyword">set</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>在上一篇笔记中说过在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。</p>
<p>但与查询流程所不相同的是，更新流程涉及到两个重要的日志模块：redo log（重做日志）和binlog（归档日志）。</p>
<h1 id="重要日志模块：redo-log"><a href="#重要日志模块：redo-log" class="headerlink" title="重要日志模块：redo log"></a>重要日志模块：redo log</h1><p>其实就是 MySQL 里经常说到的 WAL 技术，WAL 的全称是 Write-Ahead Logging（预写日志记录），它的关键点就是先写日志，再写磁盘。</p>
<blockquote>
<p>需要注意的是：redo log 也是在磁盘里的，并不是保存在内存里。</p>
</blockquote>
<p><strong>redo log工作流程：</strong></p>
<ol>
<li>当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log 里面。</li>
<li>更新内存，将这条记录的最新值放到内存里。</li>
<li>之后 InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</li>
</ol>
<p><strong>干嘛要搞的这么复杂，直接写磁盘不好吗？</strong></p>
<ul>
<li><strong>直接写磁盘？？</strong>那不是每次都要去找要写在哪里，数据那么多，等找出来不是人都麻了。</li>
<li><strong>那redo log不也是写磁盘？？</strong>redo log是在磁盘中单独开辟出来的一块空间写滴，每次要写就在后面追加写上去就完了，不用每次都去找要写在哪里，等有空了再去找写在哪里然后写进去，省去了一个寻址的操作。<strong>顺序写可比随机写快的多的多</strong></li>
</ul>
<p><strong>还有个事儿，redo log的大小是固定的哇！！！</strong></p>
<blockquote>
<p>换句话说就是长江后浪推前浪，前浪被拍死在沙滩上哇！！前浪都被后浪卷死了哇！！！</p>
</blockquote>
<p>看图吧您！！</p>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/redo_log%E5%BE%AA%E7%8E%AF%E5%86%99%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="redo_log循环写示意图"></p>
<p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。就像是循环数组一样。</p>
<p><strong>讲这么多，redo log干嘛的哇？？</strong>用来搞哪个crash-safe的哇！！</p>
<blockquote>
<p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 crash-safe。</p>
<p>redo log是将未提交的数据写入磁盘，不是写入内存，因此如果数据库异常重启了，那么InnoDB也可以通过读取redo log来重新恢复那些未提交的事务。这样的能力称之为crash-safe</p>
</blockquote>
<h1 id="重要的日志模块：binlog"><a href="#重要的日志模块：binlog" class="headerlink" title="重要的日志模块：binlog"></a>重要的日志模块：binlog</h1><blockquote>
<p><strong>为什么有了redo log还需要binlog？</strong></p>
<p>上一篇笔记中说过 MySQL 整体来看，其实就有两块：一块是 Server 层，负责 MySQL 功能层面的事情，另外一块是引擎层，负责存储相关的具体事宜。redo log 只是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</p>
<p>因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。</p>
</blockquote>
<h2 id="两种日志的不同点："><a href="#两种日志的不同点：" class="headerlink" title="两种日志的不同点："></a>两种日志的不同点：</h2><ol>
<li><p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</p>
</li>
<li><p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”。</p>
</li>
<li><p>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p>
</li>
</ol>
<p><strong>binlog的工作流程：</strong></p>
<ol>
<li><p>执行器先找引擎取 ID&#x3D;2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID&#x3D;2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</p>
</li>
<li><p>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</p>
</li>
<li><p>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，<strong>此时 redo log 处于 prepare 状态。</strong></p>
</li>
<li><p>然后告知执行器执行完成了，随时可以提交事务。执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</p>
</li>
<li><p>执行器调用引擎的提交事务接口，<strong>引擎把刚刚写入的 redo log 改成提交（commit）状态</strong>，更新完成。</p>
</li>
</ol>
<p>整个执行流程示意图（图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。）<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/binlog%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="binlog执行流程示意图"></p>
<p>最后的三步将redo log的写入分成了两个部分，prepare和commit 这就是“两阶段提交”</p>
<h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><p>两阶段提交是为了保证两个日志的一致性设计的。</p>
<p><strong>假设没有两阶段提交，会怎样？</strong></p>
<ul>
<li><p><strong>先提交redo log：</strong>（提交完MySQL挂掉）</p>
<ul>
<li>重启恢复：redo log 比 binlog 多出一条数据，<ul>
<li>如果后续拿 binlog 做备份恢复，则丢失该条数据</li>
<li>如果此时拿 binlog 做一个从库复制，则从库比主库少了该条数据</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>先提交binlog：</strong>（提交完MySQL挂掉）</p>
<ul>
<li>重启恢复：使用redo log恢复，此时 binlog 比库中多了一条数据记录<ul>
<li>如果后续拿 binlog 做备份恢复，会莫名多出来一条数据（该记录未曾提交）</li>
<li>如果此时拿 binlog 做一个从库复制，则从库比主库多了该条数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>有了两阶段提交之后呢？</strong></p>
<p>两阶段提交流程：1. prepare 阶段、2.写 binlog、3. commit<br>    - 在2之前崩溃：发现没有 commit 且两份日志不统一，自动回滚。两份日志一致<br>    - 在3之前崩溃：虽然没有 commit 但是两份日志统一，自动提交。两份日志一致<br>    - 备份：全靠 binlog</p>
<hr>
<blockquote>
<p>网友热心总结的一些问题，复习的时候可以试着回答一下。</p>
</blockquote>
<ol>
<li>redo log的概念是什么? 为什么会存在.</li>
<li>什么是WAL(write-ahead log)机制, 好处是什么.</li>
<li>redo log 为什么可以保证crash safe机制.</li>
<li>binlog的概念是什么, 起到什么作用, 可以做crash safe吗? </li>
<li>binlog和redolog的不同点有哪些? </li>
<li>物理一致性和逻辑一直性各应该怎么理解? </li>
<li>执行器和innoDB在执行update语句时候的流程是什么样的?</li>
<li>如果数据库误操作, 如何执行数据恢复?</li>
<li>什么是两阶段提交, 为什么需要两阶段提交, 两阶段提交怎么保证数据库中两份日志间的逻辑一致性(什么叫逻辑一致性)?</li>
<li>如果不是两阶段提交, 先写redo log和先写bin log两种情况各会遇到什么问题?</li>
</ol>
<p>大家加油：）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL实战】基础架构：一条SQL查询语句是如何执行的？</title>
    <url>/posts/7327/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://time.geekbang.org/column/intro/100020801">《极客时间-MySQL实战45讲》01 | 基础架构：一条SQL查询语句是如何执行的？</a></p>
<ul>
<li>笔记整理</li>
</ul>
</blockquote>
<span id="more"></span>

<h1 id="MySQL-架构示意图"><a href="#MySQL-架构示意图" class="headerlink" title="MySQL 架构示意图"></a>MySQL 架构示意图</h1><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="MySQL逻辑架构图"></p>
<p>MySQL架构上从大体来说可以分为Server层和存储引擎层两个部分。</p>
<p><strong>Server层：</strong>包括连接器、查询缓存、分析器、优化器、执行器等，其中涵盖了MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有的跨存储引擎的功能也都在这一层实现，比如存储过程、触发器、视图等。</p>
<p><strong>存储引擎层：</strong>负责数据的存储和读取。其架构模式是插件式的，支持InnoDB、MyISAM、Menory等多个存储引擎。现在最常用的存储引擎是InnoDB，InnoDB从MySQL 5.5.5版本开始成为默认存储引擎。</p>
<h1 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h1><blockquote>
<p>连接器负责跟客户端建立连接、获取权限、维持和管理连接。</p>
</blockquote>
<p>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。<strong>之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</strong>但是这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。<u>修改完成后，只有再新建的连接才会使用新的权限设置。</u></p>
<p>由于 <u>MySQL 在执行过程中临时使用的内存是管理在连接对象里面的</u>。所以一旦一个连接使用时间过长，执行的操作越多，其所占用的内存也越大，而这些内存资源只有在连接被断开的时候才会被释放。一旦内存占用过大，就有可能会被系统强行杀掉，从现象上来看就是MySQL的异常重启。解决这个问题的方法一般有以下两种：</p>
<ol>
<li><strong>定期断开长连接。</strong>使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li>
<li>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，<strong>通过执行mysql_reset_connection来重新初始化连接资源。</strong>这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li>
</ol>
<h1 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h1><p>执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。</p>
<p>大多数情况下建议不要使用查询缓存，为什么呢？因为<strong>查询缓存往往弊大于利！</strong></p>
<p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。这对于经常更新的表来说，查询缓存的命中率会非常低。除非是一些静态表，例如系统配置表之类的。</p>
<p>MySQL 也提供了显示指定是否使用缓存的方式：将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> SQL_CACHE <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">10</span>；</span><br></pre></td></tr></table></figure>

<h1 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h1><p>对于SQL语句做词法分析、语法分析。</p>
<ul>
<li><strong>词法分析：</strong>分析SQL语句中的每个单词代表什么意思</li>
<li><strong>语法分析：</strong>分析SQL语句是否满足MySQL的语法要求</li>
</ul>
<h1 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h1><ul>
<li>决定使用索引的方式</li>
<li>如果是多表连接查询还需要决定表连接的先后顺序</li>
</ul>
<h1 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h1><p><strong>执行流程（没索引）：</strong></p>
<ol>
<li>调用 InnoDB 引擎接口取这个满足条件的第一行。</li>
<li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li>
<li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li>
</ol>
<p>在数据库的慢查询日志中有一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。</p>
<p>但是在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。</p>
<hr>
<p>实际上在连接器、分析器、执行器阶段都是会做权限的校验的，因此把权限校验的这一块内容放在最后一起说明：</p>
<p><strong>连接器的权限校验：</strong>应该是库的校验，因为连接是可以指定连接到哪个库中去的，不指定库的话连接成功之后也是要返回可以操作的库给用户的。</p>
<p><strong>分析器的权限校验：</strong>在分析器应该是做的表权限验证，因为分析器已经分析出要执行的SQL了需要调用那一张表了，在此处进行表的权限验证就是最合适的。</p>
<p><strong>执行器的权限校验：</strong>在执行器这一块我认为是做的一个存储过程、触发器、函数之类的验证，因为在这些模块中是可能会调用到其他的表的，而在分析器的时候并不知道这些模块都调用到什么表，因此MySQL需要判断当前用户是否有对这些模块所调用到的表的权限。</p>
<hr>
<blockquote>
<p>网友热心总结的一些问题，复习的时候可以试着回答一下。</p>
</blockquote>
<ol>
<li>Server 有多少组件，各自都是什么作用？</li>
<li>Server 层和存储引擎层各是什么作用？</li>
<li><code>you have an error in your SQL syntax</code> 这个错误是在词法分析还是语法分析的报错？</li>
<li>对于表的操作权限验证在哪里进行？</li>
<li>执行器执行查询语句的流程是怎么样的？</li>
</ol>
<p>大家加油：）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ 远征篇</title>
    <url>/posts/28560/</url>
    <content><![CDATA[<p>RabbitMQ 是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ 是使用 Erlang 语言来编写的，并且 RabbitMQ 是基于 AMQP 协议的。</p>
<span id="more"></span>

<div class="note primary flat"><p><strong>Q&amp;A Time</strong></p>
</div>

<blockquote>
<p>RabbitMQ 高性能的原因？</p>
</blockquote>
<ol>
<li>Erlang语言最初在于交换机领域的架构模式，这样使得 RabbitMQ 在 Broker 之间进行数据交互的性能是非常优秀的</li>
<li>Erlang语言的优点：有着和原生 Socket 一样的延迟</li>
</ol>
<blockquote>
<p>什么是 AMQP？</p>
</blockquote>
<p>AMQP全称：Advanced Messgae Queuing Protocol（高级消息队列协议）</p>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210928135718.png" alt="20210928135718"></p>
<div class="note default flat"><p><strong>AMQP 核心概念：</strong></p>
</div>

<ol>
<li><strong>Server：</strong>又称 Broker，接受客户端的连接，实现 AMQP 实体服务</li>
<li><strong>Connection：</strong>连接，应用程序与 Broker 的网络连接</li>
<li><strong>Channel：</strong>网络信道，几乎所有的操作都在 Channel 中进行，Channel 是进行消息读写的通道。客户端可建立多个 Channel，每个 Channel 代表一个会话任务。</li>
<li><strong>Message：</strong>消息，服务器和应用程序之间传送的数据，由 Properties 和 Body 组成。Properties 可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body 则就是消息体内容。</li>
<li><strong>Virtual Host：</strong>虚拟地址，用于进行逻辑隔离，最上层的消息路由。一个 Virtual Host里面可以有若干个 Exchange 和 Queue，同一个 Virtual Host 里面不能用相同名称的 Exchange 或 Queue。</li>
<li><strong>Exchange：</strong>交换机，接收消息，根据路由键转发消息到绑定的队列。</li>
<li><strong>Binding：</strong>Exchange 和 Queue 之间的虚拟连接，binding 中可以包含 Routing Key。</li>
<li><strong>Routing Key：</strong>一个路由规则，虚拟机可用它来确定如何路由一个特定消息。</li>
<li><strong>Queue：</strong>也成为 Message Queue，消息队列，保存消息并将他们转发给消费者。</li>
</ol>
]]></content>
      <tags>
        <tag>中间件</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ 启航篇</title>
    <url>/posts/38923/</url>
    <content><![CDATA[<p>RabbitMQ 启航篇，本文将记录一下 RabbitMQ 在 CentOS 7 中安装的详细过程，以及简单的使用。以本文正式开始 RabbitMQ 的学习。</p>
<span id="more"></span>

<blockquote>
<p>RabbitMQ 的运行是基于 Erlang 的。所以在安装 RabbitMQ 之前需要先安装好 Erlang 的环境。RabbitMQ 对于运行环境 Erlang 也是有要求的，在安装 Erlang 之前应该先确定好要安装的 RabbitMQ 版本和 Erlang 版本是否兼容。</p>
<p>在 RabbitMQ 官网中可以查看各个版本的 RabbitMQ 对于 Erlang 环境的版本要求。<a href="https://www.rabbitmq.com/which-erlang.html">RabbitMQ 安装对应 Erlang 版本查询</a></p>
</blockquote>
<h1 id="Erlang-环境安装"><a href="#Erlang-环境安装" class="headerlink" title="Erlang 环境安装"></a>Erlang 环境安装</h1><p>在正式安装开始之前需要先安装好 Erlang 所需要的一些依赖，这里通过 yum 源进行安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install unixODBC unixODBC-devel wxBase wxGTK SDL wxGTK-gl epel-release</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>下载：</strong><a href="https://www.erlang-solutions.com/downloads/">https://www.erlang-solutions.com/downloads/</a><br> 根据需要的版本以及操作系统选择对应的版本下载即可。在这里下载的是23.2版本的Erlang</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://packages.erlang-solutions.com/erlang/rpm/centos/7/x86_64/esl-erlang_23.2-1~centos~7_amd64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>按照官网的要求先添加一个密钥</strong></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm --import https://packages.erlang-solutions.com/rpm/erlang_solutions.asc</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>解压刚下载好的安装包</strong></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh esl-erlang_23.2-1~centos~7_amd64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通过 yum 源安装 Erlang</strong></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install erlang</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>验证安装是否成功</strong></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">erl -version</span><br></pre></td></tr></table></figure>
<p> 如果可以看到 Erlang 的版本信息则说明安装成功。</p>
</li>
</ol>
<h1 id="RabbitMQ-安装"><a href="#RabbitMQ-安装" class="headerlink" title="RabbitMQ 安装"></a>RabbitMQ 安装</h1><p>前文 RabbitMQ 所需要的环境 Erlang 已经安装成功，现在可以安装 RabbitMQ 了。</p>
<ol>
<li><p><strong>下载：</strong><a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a> ，打开下载页面找到以下部分，根据系统选择下载即可。<br> 需要选择版本去 GitHub 中寻找合适的版本。<br> <img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210920144340.png" alt="20210920144340"></p>
</li>
<li><p><strong>解压下载的安装包</strong></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh rabbitmq-server-3.9.5-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure></li>
</ol>
<p>至此，RabbitMQ 就安装成功了，运行 <code>systemctl start rabbitmq-server</code> 即可启动 RabbitMQ。</p>
<hr>
<p><font size=5><strong>常用命令</strong></font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加用户</span></span><br><span class="line">rabbitmqctl add_user 用户 密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置用户角色（根绝角色分配权限）</span></span><br><span class="line">rabbitmqctl set_user_tags 用户 角色</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改用户密码</span></span><br><span class="line">rabbitmqctl change_password 用户 新密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除用户</span></span><br><span class="line">rabbitmqctl delete_user 用户</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为用户设置权限</span></span><br><span class="line">rabbitmqctl set_permissions -p / 用户 &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 RabbitMQ WEB 界面管理，访问地址：http://虚拟机IP:15672，需要创建一个用户进行访问</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考文章：<br><a href="https://juejin.cn/post/6844903926408413197#heading-0">RabbitMQ的六种工作模式</a><br><a href="https://segmentfault.com/a/1190000023107822">连RabbitMQ的5种核心消息模式都不懂，也敢说自己会用消息队列！</a></p>
</blockquote>
<hr>
<p><strong>一个代码仓库介绍一下 RabbitMQ 中五种常用模式，也在此正式启航 RabbitMQ</strong></p>
<ul>
<li><a href="https://github.com/wangruipeng-wrp/rabbitmq">GitHub</a></li>
<li><a href="https://gitee.com/wangruipeng-wrp/rabbtmq">Gitee</a></li>
</ul>
<p>大家加油：）</p>
]]></content>
      <tags>
        <tag>中间件</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 持久化机制（RDB 和 AOF）</title>
    <url>/posts/59553/</url>
    <content><![CDATA[<p>RDB和AOF分别是Redis所提供的两种持久化方式，其中RDB是全量备份，也就是一个快照的方式，对应的AOF就是一个增量备份的方式，是一个日志备份的方式。</p>
<span id="more"></span>

<blockquote>
<p>本文非原著，出自：<a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-rdb-aof.html">Redis进阶 - 持久化：RDB和AOF机制详解</a></p>
</blockquote>
<hr>
<h1 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h1><p>触发Redis进行RDB备份的方式有两种，手动备份和自动备份。自动备份需要在配置文件种设置一些配置项，手动备份只需要手动向Redis控制台输入<code>save</code>命令或者是<code>bgsave</code>命令。</p>
<ul>
<li><code>save</code>：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存比较大的实例会造成长时间<strong>阻塞</strong>，线上环境不建议使用</li>
<li><code>bgsave</code>：Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短</li>
</ul>
<p>bgsave流程图如下所示<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20220221142546.png" alt="20220221142546"></p>
<h2 id="会自动触发RDB备份的四种情况"><a href="#会自动触发RDB备份的四种情况" class="headerlink" title="会自动触发RDB备份的四种情况"></a>会自动触发RDB备份的四种情况</h2><ul>
<li>redis.conf中配置<code>save m n</code>，即在<code>m</code>秒内有<code>n</code>次修改时，自动触发bgsave生成rdb文件</li>
<li>主从复制时，从节点要从主节点进行全量复制时也会触发bgsave操作，生成当时的快照发送到从节点；执行debug</li>
<li>reload命令重新加载redis时也会触发bgsave操作</li>
<li>默认情况下执行shutdown命令时，如果没有开启aof持久化，那么也会触发bgsave操作</li>
</ul>
<h2 id="redis-conf-中配置RDB备份"><a href="#redis-conf-中配置RDB备份" class="headerlink" title="redis.conf 中配置RDB备份"></a>redis.conf 中配置RDB备份</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 周期性执行条件的设置格式为</span><br><span class="line">save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"></span><br><span class="line"># 默认的设置为：</span><br><span class="line">save 900 1      # 如果900秒内有1条Key信息发生变化，则进行快照</span><br><span class="line">save 300 10     # 如果300秒内有10条Key信息发生变化，则进行快照</span><br><span class="line">save 60 10000   # 如果60秒内有10000条Key信息发生变化，则进行快照</span><br><span class="line"></span><br><span class="line"># 以下设置方式为关闭RDB快照功能</span><br><span class="line">save &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 文件名称</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># 文件保存路径</span><br><span class="line">dir /home/work/app/redis/data/</span><br><span class="line"></span><br><span class="line"># 如果持久化出错，主进程是否停止写入</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"># 是否压缩 </span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># 导入时是否检查</span><br><span class="line">rdbchecksum yes</span><br></pre></td></tr></table></figure>

<p><code>rdbcompression</code>：该属性将在字符串类型的数据被快照到磁盘文件时，启用LZF压缩算法。Redis官方的建议是请保持该选项设置为yes，因为“it’s almost always a win”。<br><code>rdbchecksum</code>：从RDB快照功能的version 5 版本开始，一个64位的CRC冗余校验编码会被放置在RDB文件的末尾，以便对整个RDB文件的完整性进行验证。这个功能大概会多损失10%左右的性能，但获得了更高的数据可靠性。所以如果您的Redis服务需要追求极致的性能，就可以将这个选项设置为no。</p>
<h2 id="拍摄快照的过程中如何保证数据一致性？"><a href="#拍摄快照的过程中如何保证数据一致性？" class="headerlink" title="拍摄快照的过程中如何保证数据一致性？"></a>拍摄快照的过程中如何保证数据一致性？</h2><p><em>由于生产环境中我们为Redis开辟的内存区域都比较大（例如6GB），那么将内存中的数据同步到硬盘的过程可能就会持续比较长的时间，而实际情况是这段时间Redis服务一般都会收到数据写操作请求。那么如何保证数据一致性呢？</em></p>
<p>RDB中的核心思路是Copy-on-Write，来保证在进行快照操作的这段时间，需要压缩写入磁盘上的数据在内存中不会发生变化。在正常的快照操作中，一方面Redis主进程会fork一个新的快照进程专门来做这个事情，这样保证了Redis服务不会停止对客户端包括写请求在内的任何响应。另一方面这段时间发生的数据变化会以副本的方式存放在另一个新的内存区域，待快照操作结束后才会同步到原来的内存区域。 </p>
<p>举个例子：如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。</p>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20220221144234.png" alt="20220221144234"></p>
<h2 id="RDB优缺点"><a href="#RDB优缺点" class="headerlink" title="RDB优缺点"></a>RDB优缺点</h2><ul>
<li><strong>优点</strong><ul>
<li>RDB文件是某个时间节点的快照，默认使用LZF算法进行压缩，压缩后的文件体积远远小于内存大小，适用于备份、全量复制等场景；</li>
<li>Redis加载RDB文件恢复数据要远远快于AOF方式；</li>
</ul>
</li>
<li><strong>缺点</strong><ul>
<li>RDB方式实时性不够，无法做到秒级的持久化；</li>
<li>每次调用bgsave都需要fork子进程，fork子进程属于重量级操作，频繁执行成本较高；</li>
<li>每次调用bgsave都需要fork子进程，fork子进程属于重量级操作，频繁执行成本较高；</li>
<li>版本兼容RDB文件问题；</li>
</ul>
</li>
</ul>
<h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><p>Redis是“写后”日志，Redis先执行命令，把数据写入内存，然后才记录日志。日志里记录的是Redis收到的每一条命令，这些命令是以文本形式保存。即先写内存，后写日志。</p>
<h2 id="为什么采用写后日志？"><a href="#为什么采用写后日志？" class="headerlink" title="为什么采用写后日志？"></a>为什么采用写后日志？</h2><p>Redis要求高性能，采用写后日志有两方面好处：</p>
<ul>
<li><strong>避免额外的检查开销</strong>：Redis 在向 AOF 里面记录日志的时候，并不会先去对这些命令进行语法检查。所以，如果先记日志再执行命令的话，日志中就有可能记录了错误的命令，Redis 在使用日志恢复数据时，就可能会出错。 </li>
<li>不会阻塞当前的写操作。</li>
</ul>
<p>但这种方式存在潜在风险：</p>
<ul>
<li>如果命令执行完成，写日志之前宕机了，会丢失数据。</li>
<li>主线程写磁盘压力大，导致写盘慢，阻塞后续操作。</li>
</ul>
<h2 id="三种写回策略："><a href="#三种写回策略：" class="headerlink" title="三种写回策略："></a>三种写回策略：</h2><ul>
<li>always，同步写回：每个写命令执行完，立马同步地将日志写回磁盘</li>
<li>everysec，每秒写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘</li>
<li>no，操作系统控制的写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</li>
</ul>
<p>为了提高文件写入效率，在现代操作系统中，当用户调用write函数，将一些数据写入文件时，操作系统通常会将数据暂存到一个内存缓冲区里，当缓冲区的空间被填满或超过了指定时限后，才真正将缓冲区的数据写入到磁盘里。</p>
<p>这样的操作虽然提高了效率，但也为数据写入带来了安全问题：如果计算机停机，内存缓冲区中的数据会丢失。为此，系统提供了fsync、fdatasync同步函数，可以强制操作系统立刻将缓冲区中的数据写入到硬盘里，从而确保写入数据的安全性。</p>
<h2 id="redis-conf中配置AOF"><a href="#redis-conf中配置AOF" class="headerlink" title="redis.conf中配置AOF"></a>redis.conf中配置AOF</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># appendonly参数开启AOF持久化</span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># AOF持久化的文件名，默认是appendonly.aof</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"># 同步策略</span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"># aof重写期间是否同步</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># 重写触发配置</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"># 加载aof出错如何处理</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"># 文件重写策略</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure>

<ul>
<li><code>appendfsync</code>：这个参数项是AOF功能最重要的设置项之一，主要用于设置“真正执行”操作命令向AOF文件中同步的策略。与上节对应，appendfsync参数项可以设置三个值，分别是：always、everysec、no，默认的值为everysec。</li>
<li><code>auto-aof-rewrite-percentage</code>：上文说到在生产环境下，技术人员不可能随时随地使用“BGREWRITEAOF”命令去重写AOF文件。所以更多时候我们需要依靠Redis中对AOF文件的自动重写策略。Redis中对触发自动重写AOF文件的操作提供了两个设置：auto-aof-rewrite-percentage表示如果当前AOF文件的大小超过了上次重写后AOF文件的百分之多少后，就再次开始重写AOF文件。例如该参数值的默认设置值为100，意思就是如果AOF文件的大小超过上次AOF文件重写后的1倍，就启动重写操作。 </li>
<li><code>auto-aof-rewrite-min-size</code>：参考auto-aof-rewrite-percentage选项的介绍，auto-aof-rewrite-min-size设置项表示启动AOF文件重写操作的AOF文件最小大小。如果AOF文件大小低于这个值，则不会触发重写操作。注意，auto-aof-rewrite-percentage和auto-aof-rewrite-min-size只是用来控制Redis中自动对AOF文件进行重写的情况，如果是技术人员手动调用“BGREWRITEAOF”命令，则不受这两个限制条件左右。</li>
</ul>
<h2 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h2><p>AOF会记录每个写命令到AOF文件，随着时间越来越长，AOF文件会变得越来越大。如果不加以控制，会对Redis服务器，甚至对操作系统造成影响，而且AOF文件越大，数据恢复也越慢。为了解决AOF文件体积膨胀的问题，Redis提供AOF文件重写机制来对AOF文件进行“瘦身”。Redis通过创建一个新的AOF文件来替换现有的AOF，新旧两个AOF文件保存的数据相同，但新AOF文件没有了冗余命令。</p>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20220221161556.png" alt="20220221161556"></p>
<ul>
<li><p><strong>AOF重写会阻塞吗？</strong><br>  AOF重写过程是由后台进程bgrewriteaof来完成的。主线程fork出后台的bgrewriteaof子进程，fork会把主线程的内存拷贝一份给bgrewriteaof子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。 </p>
<p>  所以aof在重写时，在fork进程时是会阻塞住主线程的。</p>
</li>
<li><p><strong>AOF日志何时会重写？</strong><br>  有两个配置项控制AOF重写的触发：</p>
<ul>
<li><code>auto-aof-rewrite-min-size</code>：表示运行AOF重写时文件的最小大小，默认为64MB。</li>
<li><code>auto-aof-rewrite-percentage</code>：这个值的计算方式是，当前aof文件大小和上一次重写后aof文件大小的差值，再除以上一次重写后aof文件大小。也就是当前aof文件比上一次重写后aof文件的增量大小，和上一次重写后aof文件大小的比值。</li>
</ul>
</li>
<li><p><strong>小结：</strong></p>
<ul>
<li>主线程fork出子进程重写aof日志</li>
<li>子进程重写日志完成后，主线程追加aof日志缓冲</li>
<li>替换日志文件</li>
</ul>
</li>
</ul>
<h1 id="RDB和AOF混合方式"><a href="#RDB和AOF混合方式" class="headerlink" title="RDB和AOF混合方式"></a>RDB和AOF混合方式</h1><blockquote>
<p>Redis 4.0 中提出了一个混合使用 AOF 日志和内存快照的方法。简单来说，内存快照以一定的频率执行，在两次快照之间，使用 AOF 日志记录这期间的所有命令操作。</p>
</blockquote>
<p>这样一来，快照不用很频繁地执行，这就避免了频繁 fork 对主线程的影响。而且，AOF 日志也只用记录两次快照间的操作，也就是说，不需要记录所有操作了，因此，就不会出现文件过大的情况了，也可以避免重写开销。</p>
<p>如下图所示，T1 和 T2 时刻的修改，用 AOF 日志记录，等到第二次做全量快照时，就可以清空 AOF 日志，因为此时的修改都已经记录到快照中了，恢复时就不再用日志了。</p>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20220221162108.png" alt="20220221162108"></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 集成 Redis</title>
    <url>/posts/44305/</url>
    <content><![CDATA[<blockquote>
<p>使用 Spring Boot 操作 Redis 其实非常简单，本文主要记录一下整合的步骤，方便后续查看。</p>
</blockquote>
<span id="more"></span>

<ol>
<li><p>添加 Redis 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 yml 文件中配置 Redis 服务器信息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">&quot;指定所使用的是 Redis 中的哪个数据库&quot;</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">&quot;Redis 服务器 IP 地址&quot;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">&quot;Redis 端口号&quot;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&quot;指定登录客户端的密码，如果没有可以不指定&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Spring Boot 中使用 StringRedisTemplate 操作 Redis 缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis 工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisOperator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以 key 为键获取 Redis 中的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 Redis 键值对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        set(key, value, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 Redid 键值对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间，单位：秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 Redis 中的键值对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... keys)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys)</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>以上是我在日常开发中真实使用到的一些对 Redis 的操作，在此封装成一个简单的工具类，以后随着使用的越多会封装更多简便的方法。</p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Keepalived 实现 Nginx 的主备和互备</title>
    <url>/posts/42807/</url>
    <content><![CDATA[<blockquote>
<p>本文侧重点是讲解 Keepalived 的原理以及使用方式。</p>
</blockquote>
<p><strong>简单讲解一下 Keepalived 的工作原理：</strong></p>
<ol>
<li>通过 VRRP 协议将虚拟IP绑定至本机的一张网卡上</li>
<li>将 Nginx 服务器的IP隐藏起来不对用户暴露，用户直接访问虚拟IP</li>
<li>通过虚拟IP对同一个集群内的不同节点网卡的绑定来实现控制用户访问不同的节点</li>
</ol>
<span id="more"></span>

<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ol>
<li>CentOS 7 虚拟机1，IP地址：<code>192.168.160.136</code>，为了方便区分取主机名为 <code>keep_136</code></li>
<li>CentOS 7 虚拟机2，IP地址：<code>192.168.160.137</code>，为了方便区分取主机名为 <code>keep_137</code></li>
<li>分别安装：<code>nginx-1.20.1</code>、<code>keepalived-2.2.4</code></li>
<li>绑定虚拟IP为 <code>192.168.160.161</code></li>
</ol>
<h3 id="实验准备工作"><a href="#实验准备工作" class="headerlink" title="实验准备工作"></a>实验准备工作</h3><ol>
<li><p><strong>安装 Nginx</strong></p>
<ul>
<li>详细步骤记录于：<a href="https://www.wrp.cool/posts/62048/">Nginx 安装</a></li>
</ul>
</li>
<li><p><strong>安装 Keepalived</strong></p>
<ul>
<li><strong>下载：</strong><a href="https://www.keepalived.org/download.html">https://www.keepalived.org/download.html</a></li>
<li><strong>依赖：</strong><code>yum -y install libnl libnl-level</code></li>
<li><strong>配置：</strong><code>./configure --prefix=/usr/local/keepalived --sysconf=/etc</code></li>
<li><strong>安装：</strong><code>make &amp;&amp; make install</code></li>
<li><strong>配置文件：</strong><code>/etc/keepalived/keelalived.conf</code></li>
</ul>
</li>
<li><p><strong>注册 Keepalived 为系统服务</strong></p>
<ul>
<li>进入 Keepalived 的安装目录下的<code>/keepalived/etc/</code>，以本实验为例： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/software/keepalived-2.2.4/keepalived/etc</span><br></pre></td></tr></table></figure></li>
<li>复制安装目录下的<code>init.d</code>目录下的<code>keepalived</code>文件拷贝到<code>/etc/init.d</code>目录中 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -a init.d/keepalived /etc/init.d/</span><br></pre></td></tr></table></figure></li>
<li>复制<code>sysconfig</code>目录中的<code>keepalive</code>文件至<code>/etc/sysconfig</code>目录中 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -a sysconfig/keepalived /etc/sysconfig/</span><br></pre></td></tr></table></figure></li>
<li>重新加载 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li>
<li>启动、关闭、重启 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start keepalived</span><br><span class="line">systemctl stop keepalived</span><br><span class="line">systemctl restart keepalived</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="主备实验步骤"><a href="#主备实验步骤" class="headerlink" title="主备实验步骤"></a>主备实验步骤</h3><ol>
<li><p>配置 Keepalived 主机（keep_136）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line"># 全局配置</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id keep_136          # 路由ID：当前安装 keepalived 节点主机的标识符，全局唯一</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 计算机节点</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER                # 标识当前节点为主节点或者是备节点。MASTER/BACKUP</span><br><span class="line">    interface ens33             # 指定虚拟IP所绑定的本机网卡</span><br><span class="line">    virtual_router_id 51        # 虚拟路由ID，保持主备节点一致即可</span><br><span class="line">    priority 100                # 标识计算节点权重，当主节点宕机后权重高的节点优先成为主节点</span><br><span class="line">    advert_int 1                # 心跳检测间隔时间，单位：秒</span><br><span class="line"></span><br><span class="line">    # 认证授权的密码，防止非法节点接入</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 虚拟IP</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.160.161</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Keepalived 备用机（keep_137）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id keep_137</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 80</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.160.161</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="互备实验步骤"><a href="#互备实验步骤" class="headerlink" title="互备实验步骤"></a>互备实验步骤</h3><blockquote>
<p>做完了主备之后，互备其实很简单，就是在备用机中添加一份主机的配置，在主机中添加一份备用机的配置。</p>
</blockquote>
<ol>
<li><p>配置 Keepalived 主机（keep_136）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加一个备用机节点的配置</span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 80</span><br><span class="line">    advert_int 1</span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.160.162</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Keepalived 备用机（keep_137）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加一个主机节点的配置</span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.160.162</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h3><ol>
<li>分别启动两台虚拟机中的 Keepalived 服务</li>
<li>观察此时的虚拟IP绑定在哪台虚拟机中，可使用 <code>ip addr</code> 命令查看</li>
<li>打开浏览器访问虚拟IP，此时由主机提供服务</li>
<li>停止提供服务的 Keepalived</li>
<li>浏览器中再次访问该虚拟IP，此时可见由备用机开始提供服务</li>
</ol>
]]></content>
      <categories>
        <category>负载均衡</category>
      </categories>
      <tags>
        <tag>Keepalived</tag>
        <tag>主备</tag>
        <tag>互备</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 钩子自动化部署 Spring Boot 项目</title>
    <url>/posts/19410/</url>
    <content><![CDATA[<p>开发过程中，接口开发完毕给测试人员做测试的时候会很经常的需要将一些测试提交的修改更新到测试服务器上去，但是如果每次提交都手动的去测试服务器打包代码，重启服务的话，那太麻烦了。</p>
<p>之前在 Linux 服务器上部署这个博客的时候有了解到 git 里面有一个钩子的东西可以做这种自动化的部署，于是最近研究了一下针对上面的问题可以使用 git 的钩子来做一个项目的自动部署，这样就不用每次都去手动的部署了，要更新的时候只需要把代码提交到 git 上就可以完成自动化部署。</p>
<p>接下来详细说一下部署的过程，也算是做一个记录，方便以后查看。</p>
<span id="more"></span>

<hr>
<p><font size=4><strong>在测试环境上搭建git仓库</strong></font></p>
<ol>
<li><p><strong>安装git</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建一个 git 用户并且设置密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd git</span><br><span class="line">passwd git</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>选定一个目录作为git仓库，并初始化这个git仓库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个 project.git 的目录，并初始化为 git 仓库</span></span><br><span class="line">git init --bare projuce.git</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>将本地的 ssh 公钥部署到服务器上</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1) 创建 ssh 公钥</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2) 创建 authorized_keys 文件</span></span><br><span class="line">touch /home/git/.ssh/authorized_keys</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3) 将本地创建的公钥复制到 authorized_keys 中，一行一个</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>本地项目添加测试服务器的 git 远程仓库地址</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@&#x27;测试服务器IP&#x27;:&#x27;仓库路径&#x27;</span><br></pre></td></tr></table></figure>
<p>接下来就是在本地正常的提交代码到测试服务器的 git 仓库了，就像是平时开发一样提交即可。</p>
</li>
</ol>
<hr>
<p><font size=4><strong>将代码部署到测试服务器</strong></font></p>
<ol>
<li><p><strong>检出代码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --work-tree=&#x27;要发布的目录&#x27; --git-dir=&#x27;远程仓库地址&#x27; checkout -f</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>打包</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure></li>
</ol>
<p><font size=4><strong>自动化部署到测试服务器</strong></font></p>
<p>自动化部署的流程跟以上是一样的，只是利用了 git 的钩子来自动的执行一个部署的脚本，以此免去了人工手动部署的工作。</p>
<ol>
<li><p><strong>在测试服务器上的 git 远程仓库中有一个 <code>hooks</code> 文件夹，在这个文件夹中创建 <code>post-receive</code> 文件</strong></p>
<blockquote>
<p>这个文件就是钩子，当我们的代码提交到这个远程仓库中就会触发这个文件的执行，于是我们就可以把代码部署的脚本写在这个文件中，利用这个来实现自动部署。</p>
</blockquote>
</li>
<li><p><strong>赋予 <code>post-receive</code> 可执行权限</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自动部署代码脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo &quot;删除项目目录&quot;</span><br><span class="line">rm -rf &quot;项目目录&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;创建项目目录&quot;</span><br><span class="line">mkdir &quot;项目目录&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;拉取代码&quot;</span><br><span class="line">git --work-tree=&#x27;项目根目录&#x27; --git-dir=&#x27;远程仓库地址&#x27; checkout -f</span><br><span class="line"></span><br><span class="line">echo &quot;进入项目根目录&quot;</span><br><span class="line">cd ~/foodie-prod/foodie/</span><br><span class="line"></span><br><span class="line">echo &quot;maven 打包&quot;</span><br><span class="line">/usr/local/apache-maven-3.8.1/bin/mvn package # 此处 maven 打包需要使用全路径</span><br><span class="line"></span><br><span class="line">echo &quot;停止正在运行的 Spring Boot&quot;</span><br><span class="line">appid=`ps -ef |grep java|grep foodie|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">kill $appid</span><br><span class="line"></span><br><span class="line">echo &quot;进入 jar 包所在路径&quot;</span><br><span class="line">cd &quot;jar 包所在路径&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;后台启动 Spring Boot&quot;</span><br><span class="line">nohup java -jar -Dspring.profiles.active=&quot;配置文件&quot; foodie-api-0.0.1-SNAPSHOT.jar &gt; ~/temp.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">echo &quot;休眠 10s 等待 Spring Boot 启动&quot;</span><br><span class="line">sleep 10</span><br><span class="line"></span><br><span class="line">echo &quot;自动化发布脚本执行结束！&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<br>以上脚本在编写时应该对每一步都进行校验以保证最终成功运行。<br>钩子的运行日志可以提交代码时查看。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 安装</title>
    <url>/posts/7587/</url>
    <content><![CDATA[<p>记录一下 Linux 中安装 MySQL 的步骤。</p>
<span id="more"></span>

<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>MySQL 下载地址：<a href="https://www.mysql.com/downloads/">https://www.mysql.com/downloads/</a></p>
<ol>
<li><p><strong>进入下载地址点击这个链接</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210818114657.png" alt="20210818114657"></p>
</li>
<li><p><strong>选择 MySQL Yum Repository</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210818115056.png" alt="20210818115056"></p>
</li>
<li><p><strong>进入这个页面之后选择合适的的版本点击 <code>Download</code></strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210818120024.png" alt="20210818120024"></p>
</li>
<li><p><strong>右键这个链接选择“复制链接地址”到 Linux 系统中使用 <code>wget</code> 下载即可</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210818120520.png" alt="20210818120520"></p>
</li>
</ol>
<hr>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol>
<li><p><strong>检查是否安装了 MySQL 或者 Mariadb，如果安装了需要先卸载</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否安装了 MySQL</span></span><br><span class="line">rpm -qa |grep mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载 MySQL</span></span><br><span class="line">rpm -e --nodeps &quot;上面查询出来的全部内容&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>开始安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下载的 MySQL 文件加载进本地 yum 源中</span></span><br><span class="line">yum -y localinstall mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 yum 源进行安装</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动 MySQL</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">service mysqld start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 MySQL 服务是否启动成功</span></span><br><span class="line">ps -ef |grep mysql</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><ol>
<li><p><strong>查询 MySQL 临时密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>登录 MySQL</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p&#x27;临时密码&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改 root 用户密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整密码复杂度和长度</span></span><br><span class="line">set global validate_password.policy=0;</span><br><span class="line">set global validate_password.length=4;</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &quot;新密码&quot;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="SQL的四种语言：DDL、DML、DCL、TCL"><a href="#SQL的四种语言：DDL、DML、DCL、TCL" class="headerlink" title="SQL的四种语言：DDL、DML、DCL、TCL"></a>SQL的四种语言：DDL、DML、DCL、TCL</h4><ul>
<li><p><strong>DDL（Data Definition Language）</strong></p>
<ul>
<li>数据定义语言，定义表结构跟约束</li>
<li>关键字：CREATE、ALTER、DROP、TRUNCATE（清空表）</li>
</ul>
</li>
<li><p><strong>DML（Data Manipulation Language）</strong></p>
<ul>
<li>数据操纵语言，可操控具体数据</li>
<li>关键字：SELECT、INSERT、UPDATE、DELETE</li>
</ul>
</li>
<li><p><strong>DCL（Data Control Language）</strong></p>
<ul>
<li>数据库控制语言，授权，角色控制等</li>
<li>关键字：GRANT、REVOKE</li>
</ul>
</li>
<li><p><strong>TCL（Transaction Control Language）</strong></p>
<ul>
<li>事务控制语言</li>
<li>关键字：BEGIN、COMMIT、ROLLBACK</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 配置</title>
    <url>/posts/48812/</url>
    <content><![CDATA[<blockquote>
<p>本文记录一些 nginx 中的配置，以便后续查看。</p>
</blockquote>
<span id="more"></span>

<p>Nginx 的配置文件都放在 conf 目录下，其中最重要的就是 <code>nginx.conf</code> 配置文件，本文也主要记录该配置文件中的配置</p>
<p>为了使配置文件能够更方便管理，把一些站点配置写到外面来，不要直接写入 <code>nginx.conf</code> 文件</p>
<p>在 conf 文件夹下创建一个 hosts 文件夹，之后将每个虚拟主机的配置都以 <code>域名.conf</code> 的命名格式保存在 hosts 文件夹中</p>
<p>之后在 nginx.conf 文件的 http 的大括号内引入自己写的配置文件 <code>include hosts/*.conf;</code></p>
<h4 id="运行配置"><a href="#运行配置" class="headerlink" title="运行配置"></a>运行配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定运行 worker 进程的用户</span></span><br><span class="line">user root;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">worker 进程的数量</span></span><br><span class="line">worker_processes  3;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志文件输出配置 可根据日志级别输出到不同的日志文件中</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 pid</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作模式</span></span><br><span class="line">events &#123;</span><br><span class="line">    # 默认使用 epoll，采用异步非阻塞的处理方式</span><br><span class="line">    use epoll;</span><br><span class="line">    # 每个 worker 进程的客户端最大连接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="传输配置"><a href="#传输配置" class="headerlink" title="传输配置"></a>传输配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    # 导入请求类型</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # 日志格式，main 为格式的名称，可以通过 main 来指定输出此日志格式。</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                        &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                        &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    # 定义日志输出格式</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    # sendfile 高效传输文件，开启可提升传输性能，开启后才可以使用 tcp_nopush，当数据累积到一定大小后才发送，提高了效率</span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    # 设置客户端与服务端请求的超时时间，保证客户端多次请求的时候不会重复建立新的连接，节约资源资源损耗</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    # 启用 gzip 压缩，静态资源文件压缩后传输会更快一些</span><br><span class="line">    gzip  on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>日志格式：</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>$remote_addr</td>
<td>客户端IP</td>
</tr>
<tr>
<td>$remote_user</td>
<td>远程客户端用户名，一般为：’-‘</td>
</tr>
<tr>
<td>$time_local</td>
<td>时间和时区</td>
</tr>
<tr>
<td>$request</td>
<td>请求的 url 和 method</td>
</tr>
<tr>
<td>$status</td>
<td>响应状态码</td>
</tr>
<tr>
<td>$body_bytes_send</td>
<td>响应客户端内容字节数</td>
</tr>
<tr>
<td>$http_referer</td>
<td>记录用户从哪个链接跳转过来的</td>
</tr>
<tr>
<td>$http_user_agent</td>
<td>用户所使用的代理，一般情况下为浏览器</td>
</tr>
<tr>
<td>$http_x_forwarded_for</td>
<td>通过代理服务器来记录客户端的IP</td>
</tr>
</tbody></table>
<h4 id="虚拟主机配置"><a href="#虚拟主机配置" class="headerlink" title="虚拟主机配置"></a>虚拟主机配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    # 虚拟主机配置块</span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80;         # 监听端口</span><br><span class="line">        server_name localhost;  # 请求域名</span><br><span class="line"></span><br><span class="line">        # 设置请求头，一般用于解决跨域问题</span><br><span class="line">        add_header &#x27;Access-Control_Allow_Origin&#x27; *;             # 允许跨域请求的域</span><br><span class="line">        add_header &#x27;Access-Control_Allow_Credentials&#x27; &#x27;true&#x27;;   # 允许带上 cookie 请求</span><br><span class="line">        add_header &#x27;Access-Control_Allow_Methods&#x27; *;            # 允许请求的方法（GET/POST/PUT/DELETE）</span><br><span class="line">        add_header &#x27;Access-Control_Allow_Headers&#x27; *;            # 允许请求的 header</span><br><span class="line"></span><br><span class="line">        # 对源站点进行验证（防盗链）</span><br><span class="line">        valid_referers *.wrp.cool;</span><br><span class="line">        if ($valid_referers) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 请求路由映射，匹配拦截</span><br><span class="line">        location / &#123;</span><br><span class="line">            root        html;           # 网站根路径（配置负载均衡之后不需要配置根路径）</span><br><span class="line">            index       index.html;     # 默认首页</span><br><span class="line">            expires     10s;            # 设置缓存</span><br><span class="line">            # alias 可以为请求路径配置一个别名</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # ssl 证书配置</span><br><span class="line">        ssl on                              # 开启ssl</span><br><span class="line">        ssl_certificate &quot;ssl证书路径&quot;;       # 配置 ssl 证书</span><br><span class="line">        ssl_certificate_key &quot;ssl证书路径&quot;;   # 配置 ssl 证书密钥</span><br><span class="line">        ssl_session_cache shared:SSL:10m;   # ssl 会话 cache</span><br><span class="line">        ssl_session_timeout 10m;            # ssl 会话超时时间</span><br><span class="line">        # 配置加密套件</span><br><span class="line">        ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>location 的匹配规则：</strong></p>
<ul>
<li><code>空格</code>：普通匹配</li>
<li><code>=</code>：精确匹配</li>
<li><code>~*</code>：匹配正则表达式，不区分大小写</li>
<li><code>~</code>：匹配正则表达式，区分大小写</li>
<li><code>^~</code>：以某个字符路径开头</li>
</ul>
<p><strong>expires 指令</strong></p>
<ul>
<li><code>expires 10s</code>：10s之后过期</li>
<li><code>expires @22h30m</code>：22h30m这个时间点之后过期</li>
<li><code>expires -1h</code>：一个小时之前就过期了</li>
<li><code>expires epoch</code>：关闭缓存</li>
<li><code>expires off</code>：使用浏览器默认缓存</li>
</ul>
<h4 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    # 负载均衡配置快</span><br><span class="line">    upstream load_balance &#123;</span><br><span class="line">        </span><br><span class="line">        # 使用 ip hash 作为负载均衡算法，使用 ip hash 算法之后不能把服务器直接移除，只能标记为 down</span><br><span class="line">        ip_hash;</span><br><span class="line"></span><br><span class="line">        # 使用 url hash 作为负载均衡算法</span><br><span class="line">        hash $request_uri;</span><br><span class="line"></span><br><span class="line">        # 使用 least_conn 作为负载均衡算法，哪台服务器连接数少就去请求哪台服务器</span><br><span class="line">        least_conn;</span><br><span class="line"></span><br><span class="line">        # 配置上游服务器</span><br><span class="line">        server localhost:81;</span><br><span class="line">        server localhost:82;</span><br><span class="line">        server localhost:83;</span><br><span class="line"></span><br><span class="line">        # 常链接数量，用于提高网络吞吐量，相当于连接池</span><br><span class="line">        keepalive   32;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 将一些负载均衡节点中的静态资源文件缓存在nginx服务器当中</span><br><span class="line">    # prody_cache_path 指令设置缓存保存的目录</span><br><span class="line">    # keys_zone 指令设置共享缓存空间的名称和索引信息大小</span><br><span class="line">    # max_size 指令指定缓存大小</span><br><span class="line">    # inactive 指令指定超过这个时间则清理此缓存</span><br><span class="line">    # use_temp_path 指令指定临时目录，使用后会影响 nginx 性能</span><br><span class="line">    proxy_cache_path /usr/local/cache keys_zone=mycache:5m max_size=1g inactive=1h use_temp_path=off;</span><br><span class="line"></span><br><span class="line">    # 虚拟主机配置块</span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80;         # 监听端口</span><br><span class="line">        server_name localhost;  # 请求域名</span><br><span class="line"></span><br><span class="line">        # 开启并且使用缓存</span><br><span class="line">        proxy_cache mycache;</span><br><span class="line"></span><br><span class="line">        # 指定命中缓存返回码</span><br><span class="line">        proxy_cache_valid 200 304 8h;</span><br><span class="line"></span><br><span class="line">        # 请求路由映射，匹配拦截</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://load_balance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>upstream 模块参数：</strong></p>
<ul>
<li><p><code>weight</code>：配置每台服务器的权重</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 weight=1;</span><br><span class="line">    server localhost:82 weight=2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>max_conns</code>：配置服务器最大链接数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 max_conns=200;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <strong>注意：</strong>在多 <code>worker</code> 线程的环境下，可能会超过指定的最大连接数。</p>
</li>
<li><p><code>slow_start</code>：设置服务器权重从零开始至设置值的时间。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 slow_start=60s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <strong>注意：</strong><br>  ① 该参数不能在 <code>hash</code> 和 <code>random load balancing</code> 中使用。<br>  ② 如果在 <code>upstream</code> 中只有一台 server，则该参数无效。<br>  ③ 该参数为商业版 nginx 才有的，使用需要付费。 </p>
</li>
<li><p><code>down</code>：标识该服务器已经宕机。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>backup</code>：标识该服务器为备用机。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <strong>注意：</strong>当所有服务器都无法访问才会访问备用机。</p>
</li>
<li><p><code>max_fails</code>：最大失败次数，超过这个次数时，默认该服务器已经宕机。与<code>fail_timeout</code>搭配使用。</p>
</li>
<li><p><code>fail_timeout</code>：当超过最大失败次数时，经过多少时间去重新访问这台服务器，默认值为10s。与<code>max_fails</code>搭配使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 max_fails=50 file_timeout=10s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring Boot】全局异常处理器</title>
    <url>/posts/19537/</url>
    <content><![CDATA[<p>记录一下最近在开发中遇到的一个问题有以及一个不错的解决方案。</p>
<p>通常情况下一个请求从前端发起到后端的 Controller 接收这个请求，再去调用对应的 Service 方法去处理对应的逻辑，再由 Controller 将处理的结果封装成一个 JSON 对象返回给前端。这是我们的一个正常的请求处理的过程，但是这其中也有一些例外的地方，如果在 Service 处理的时候出现了一些业务上的逻辑问题流程已经无法再继续往下面去走了，这个时候需要在 Service 直接返回到前端需要怎么做？</p>
<span id="more"></span>

<p>其实可以通过约定不同的返回值给到 Controller 去判断需要怎么处理再怎么返回给前端。但是这样会带来两个问题：</p>
<ol>
<li>一旦项目中的返回类型多了起来就会造成 Controller 层代码的冗余。</li>
<li>Service 一旦返回事务就会提交，这样子就没办法灵活的来控制我们的事务了。当然这也可以通过 Service 层代码编写的逻辑来解决，但这么处理就不是那么的优雅了。</li>
</ol>
<p>一个优雅的处理方式应该是定义好一个业务异常类 BizException，这个类需要继承 RuntimeException 类，一旦在 Service 中需要返回的时候就抛出 BizException 异常，这样事务就可以回滚，然后再由 Spring Boot 的全局异常处理器来捕获这个异常直接将我们自定义的异常信息返回给前端。</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义业务异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BizException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处的异常信息仅仅为了演示而定义的只有一个 errMsg 字段</span></span><br><span class="line">    <span class="comment">// 实际使用中可以根据需要将这个异常信息定义的丰富一些，比如使用一个 Enum 来维护这些异常信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String errMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BizException</span><span class="params">(String errMsg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApiResponse 类为接口全局响应类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BizException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title function_">businessExceptionHandler</span><span class="params">(BizException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.fail(e.getErrMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>通过2-3树来理解红黑树</title>
    <url>/posts/18972/</url>
    <content><![CDATA[<p>好了，终于来到了这块最难啃的骨头了——<strong>红黑树</strong>。</p>
<p>首先，当然是直接摆出红黑树大名鼎鼎的五条基本性质了</p>
<ol>
<li><font color=blue>节点是红色或者黑色。</font></li>
<li><font color=blue>根节点是黑色。</font></li>
<li><font color=blue>所有叶子节点都是黑色。（叶子节点是空节点）</font></li>
<li><font color=blue>不存在能够和两条红链接相连的节点。（每个红色的节点的两个子节点都是黑色）</font></li>
<li><font color=blue>从任意一个节点到叶子节点，经过的黑色节点数量是一样的。（黑平衡）</font></li>
</ol>
<p>只要满足以上五个性质的二叉搜索树就可以称之为红黑树。</p>
<span id="more"></span>

<blockquote>
<p>温馨提示：本文比较长，开始之前还请你耐下心来，一步一步仔细看完，我相信这篇文章会带给你一些收获。继续加油！：）</p>
</blockquote>
<p>红黑树其实也是一种二叉搜索树，只不过这是一种性能更好的二叉搜索树。二叉搜索树的结构决定了增删改查这些操作对于二叉搜索树而言都是对数级别的时间复杂度，所以这是一种高效的数据结构，但它有一个致命的缺陷，就是有序插入元素的情况下，它会严重的向一边倾斜退化成一个链表，也就是所谓的失衡。所以，我们希望我们的二叉搜索树在任何情况下都能保持左图的样子，或者说是尽量保持成左图的样子，而永远不要退化成右图的样子。于是我们为二叉搜索树加入了平衡机制，其中红黑树就是这么一种机制。<strong>对于二叉搜索树的有序性而言，红黑树在这基础上又添加了平衡性。</strong>以上红黑树的五条基本性质就是维持平衡的手段。</p>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210720231008.png" alt="20210720231008"></p>
<p>像左图这样的树我们称之为平衡的，而红黑树仅仅只是维持平衡的手段而已，<font color=blue>红黑树在本质上依然是一棵二叉搜索树。</font></p>
<p>像红黑树这样的数据结构，肯定也不是一朝一夕能够发明出来的，而是有一个演化的过程，从二叉搜索树到红黑树之间就有一个不可缺少的过渡——<strong>2-3查找树</strong>。</p>
<h1 id="2-3查找树"><a href="#2-3查找树" class="headerlink" title="2-3查找树"></a>2-3查找树</h1><br>

<p><strong>定义：</strong></p>
<ul>
<li>一棵2-3查找树要么是一棵空树，要么由<code>2-节点</code>和<code>3-节点</code>组成。</li>
<li><code>2-节点</code>：含有一个节点本身的值和两条链接，左连接指向的2-3树值都小于该节点，右链接指向的2-3树值都大于该节点。</li>
<li><code>3-节点</code>：含有两个节点本身的值和三条链接，左连接指向的2-3树值都小于该节点，中链接指向的2-3树值都位于节点的两个值之间，右链接指向的2-3树值都大于该节点。</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>2-3查找树是一种完美平衡的树结构，也就是说一棵2-3树中的任意节点的左子树、中子树、右子树高度相等。</li>
</ul>
<p><strong>由完美平衡可知：</strong></p>
<ul>
<li><code>2-节点</code>要么没有两条链接都指向空，要么两条链接都不为空。</li>
<li><code>3-节点</code>要么没有三条链接都指向空，要么三条链接都不为空。</li>
</ul>
<p><strong>如图：</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627184547.PNG" alt="album_temp_1627184547"></p>
<blockquote>
<p><strong>接下来将分析2-3树中的各种插入情况</strong></p>
</blockquote>
<h2 id="向2-节点添加元素"><a href="#向2-节点添加元素" class="headerlink" title="向2-节点添加元素"></a>向2-节点添加元素</h2><p>首先，需要在2-3树中搜索到一个可以添加节点的位置，如果搜索结束于一个<code>2-节点</code>，那么很好办，只需要将这个<code>2-节点</code>替换成一个<code>3-节点</code>。像这样：<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/IMG_0045.PNG" alt="IMG_0045"></p>
<hr>
<p>其实向一个<code>2-节点</code>插入元素是非常简单的，只需要将一<code>2-节点</code>变换成一个<code>3-节点</code>即可。但是这很简单的一步却是保持2-3树完美平衡<strong>最关键的一步</strong>。</p>
<p>试想一个问题：一棵完美的平衡二叉树，也就是满二叉树，它的节点个数是奇数还是偶数？答案非常简单，是奇数，根节点的左子树和右子树的节点数是相同的，于是整棵树的节点数就是<code>2 * 左子树的节点数 + 1</code>。采用递归的思想，整棵树无论对于哪个节点求节点个数得出的答案都是奇数。</p>
<p>于是，如果一棵二叉树的节点个数是偶数，那么这棵二叉树绝对不是完美平衡，想要得到一棵完美平衡的二叉树必备的一个条件就是树的节点个数为奇数。实际上一棵完美平衡的二叉树的节点数是等于<code>2 ^ h - 1</code>的。（其中h为树的高度，根节点的高度为1）</p>
<p>一棵二叉树在生成的过程当中，依次将元素插入其中，这不可能保证整棵树的节点个数在任何情况下都是奇数。事实上，在节点只能存放一个元素的情况下，不可能实现完美平衡的树结构。2-3树中的<code>3-节点</code>正是为了解决这一情况而存在的。</p>
<p>正常情况下，向二叉树中的一个左右子树都为空的节点插入元素无论插入在左子树还是右子树中肯定会造成这个节点的不完美平衡，但是现在引入了<code>3-节点</code>这样的一个过渡的节点，说白了，这其实是在暂存一下这种不平衡的情况，一旦在这个<code>3-节点</code>中再次插入一个元素之后立马会分裂成为一棵左右子树都不为空的二叉树。</p>
<h2 id="向3-节点添加元素"><a href="#向3-节点添加元素" class="headerlink" title="向3-节点添加元素"></a>向3-节点添加元素</h2><p>单纯的向一棵仅有一个三节点的2-3树添加元素是比较简单的，这里简单讲一下思路即可。</p>
<ol>
<li>将新节点插入<code>3-节点</code>中，组成一个临时的<code>4-节点</code>。此时这个<code>4-节点</code>中包含三个值和四条链接。</li>
<li>将这个<code>4-节点</code>的三个值都抽取出来成为三个<code>2-节点</code>，中值抽取出来的<code>2-节点</code>作为根，根的左链接指向三个节点中的最小者，右链接指向三个节点中的最大者。</li>
</ol>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627305570.PNG" alt="album_temp_1627305570"></p>
<blockquote>
<p>也许有些同学也注意到了，这一步操作使得树的高度增加了，在将<code>4-节点</code>分裂为三个<code>2-节点</code>的过程当中，树高由1变成了2。这也是2-3树的生长方式，当根节点已经是一个<code>3-节点</code>的时候插入一个新的节点，此时根节点分裂为三个<code>2-节点</code>，树高度加1。与普通的二叉查找树不同的是2-3树的生长方向是由下至上生长的，而二叉查找树的生长方向是由上至下生长的。</p>
</blockquote>
<h3 id="向一个父节点为2-节点的3-节点添加元素"><a href="#向一个父节点为2-节点的3-节点添加元素" class="headerlink" title="向一个父节点为2-节点的3-节点添加元素"></a>向一个父节点为2-节点的3-节点添加元素</h3><ol>
<li>插入到<code>3-节点</code>中，组成一个临时的<code>4-节点</code>。</li>
<li>将<code>4-节点</code>的中值所抽取出来的根节点插入至父节点，使父节点从原来的<code>2-节点</code>变成<code>3-节点</code><br> 此处插入过程与“向<code>2-节点</code>添加元素”相同。</li>
<li>将<code>4-节点</code>分裂出来的两个<code>2-节点</code>移动至父节点中，成为<code>3-节点</code>的两个子树。</li>
</ol>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627307311.PNG" alt="album_temp_1627307311"></p>
<h3 id="向一个父节点为3-节点的3-节点添加元素"><a href="#向一个父节点为3-节点的3-节点添加元素" class="headerlink" title="向一个父节点为3-节点的3-节点添加元素"></a>向一个父节点为3-节点的3-节点添加元素</h3><ol>
<li>插入到<code>3-节点</code>中，组成一个临时的<code>4-节点</code>。</li>
<li>将<code>4-节点</code>的中值抽取出来的根节点插入至父节点，使父节点从原来的<code>3-节点</code>变成一个临时的<code>4-节点</code>。</li>
<li>将<code>4-节点</code>分裂出来的两个<code>2-节点</code>移动至父节点也就是新的临时的<code>4-节点</code>中，成为新的临时<code>4-节点</code>的两个子树。</li>
<li>将新的临时的<code>4-节点</code>分裂出来的根继续往上插入<br> 此处插入的过程与“向一个父节点为<code>2-节点</code>的<code>3-节点</code>添加元素”相同。</li>
</ol>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627307543.PNG" alt="album_temp_1627307543"></p>
<h3 id="向“从插入节点出发直到根节点全部都是3-节点”的节点添加元素"><a href="#向“从插入节点出发直到根节点全部都是3-节点”的节点添加元素" class="headerlink" title="向“从插入节点出发直到根节点全部都是3-节点”的节点添加元素"></a>向“从插入节点出发直到根节点全部都是3-节点”的节点添加元素</h3><ol>
<li>一直按照“向一个父节点为<code>3-节点</code>的<code>3-节点</code>添加元素”的方式插入元素，那么直到最后根节点也会变成一个临时的<code>4-节点</code>。</li>
<li>将根节点转换成的临时<code>4-节点</code>分裂开来，按照“向<code>3-节点</code>添加元素”的方式，中值成为整颗2-3树新的根，此时树高加一。</li>
</ol>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627310222.PNG" alt="album_temp_1627310222"></p>
<hr>
<p><strong>以上就是2-3树中插入元素的全部情况，做个小结：</strong></p>
<ol>
<li>向<code>2-节点</code>插入元素：直接插入至<code>2-节点中</code>生成一个三节点。</li>
<li>向<code>3-节点</code>插入元素：<ol>
<li>父节点为<code>2-节点</code>：组成临时<code>4-节点</code>，分裂后的根插入父节点组成<code>3-节点</code>。</li>
<li>父节点为<code>3-节点</code>：组成临时<code>4-节点</code>，分裂后的根插入父节点，再次组成临时<code>4-节点</code>。<br> 不断重复此过程，直到找到一个<code>2-节点</code>为止。如果直到根节点还找不到，则将根节点分裂成三个<code>2-节点</code>，此时树高加一。</li>
</ol>
</li>
</ol>
<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p>其实我更愿意这么来理解红黑树：<font color=blue>使用二叉树来表现2-3树</font>。换句话说，其实2-3树和红黑树是等价的。</p>
<blockquote>
<p>其实一般的红黑树是等价于2-3-4树的，也就是我们前面说的2-3树中再加了一个<code>4-节点</code>。但是本文讲述的红黑树是左倾红黑树，具体的左倾红黑树与一般红黑树的区别，在这就留个坑吧。在这里只需要记住一点：<strong>左倾红黑树中红链接全部都是左连接</strong>。</p>
</blockquote>
<p>一棵2-3树中的<code>2-节点</code>跟二叉查找树中的节点是完全相同的，也就是说普通的节点就可以表示2-3树中的<code>2-节点</code>。于是我们只要能够使用二叉树的形式来表现一个<code>3-节点</code>我们就可以成功的将一棵2-3树转化成为红黑树。</p>
<p>将<code>3-节点</code>中的两个值分别当作是两个<code>2-节点</code>分裂开，中间使用一条连接将这两个<code>2-节点</code>相连接起来，表示了这两个<code>2-节点</code>代表了一个<code>3-节点</code>。这样的链接被称为红链接。</p>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627903082.PNG" alt="album_temp_1627903082"></p>
<p>为了方便表示红链接我们注意到每个红色链接都会指向唯一的一个节点，所以我们将节点标记为红色来表示指向此节点的链接是红链接，相反的没有被红链接指向的节点全部就被标记为黑色。</p>
<p>本文一开始就提出的红黑树的五条基本性质中的第1点、第2点、第3点也就是这么来的，性质4和性质5稍微有一些抽象：</p>
<ol>
<li><font color=blue>节点是红色或者黑色</font>：每个节点都会被标记为红色或者黑色。</li>
<li><font color=blue>根节点是黑色</font>：二叉树中没有链接指向根节点，所以根节点被标记为黑色。</li>
<li><font color=blue>所有叶子节点都是黑色</font>：叶子节点都是空节点，没有被红链接所指向，所以标记为黑色。</li>
<li><font color=blue>不存在能够和两条红链接相连的节点</font>：如果将红黑树中由红链接相连的节点合并起来，得到的就是一棵2-3树。相反，如果将一棵2-3树中的<code>3-节点</code>画作由红色左连接相连的两个<code>2-节点</code>，那么肯定不会存在能够和两条红链接相连的节点。</li>
<li><font color=blue>从任意一个节点到叶子节点，经过的黑色节点数量是一样的。</font>：如果将红链接画平，那么第5点将很容易理解。</li>
</ol>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627905396.PNG" alt="album_temp_1627905396"></p>
<blockquote>
<p>上图中粗链接表示为红链接</p>
</blockquote>
<h2 id="着色和旋转"><a href="#着色和旋转" class="headerlink" title="着色和旋转"></a>着色和旋转</h2><p>保持红黑树五大性质的两大法宝就是着色和旋转，其中旋转又分为左旋转和右旋转。</p>
<h3 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h3><p>着色操作比较简单，只需要改变对节点颜色的标记即可。</p>
<h3 id="左旋转和右旋转"><a href="#左旋转和右旋转" class="headerlink" title="左旋转和右旋转"></a>左旋转和右旋转</h3><p>下图中粗链接表示为红链接<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210803095327.png" alt="20210803095327"></p>
<p>具体的旋转过程在<a href="https://www.wrp.cool/posts/54793/">AVL 树</a>这篇文章中已经有具体的说明。这里不再过多的赘述。</p>
<blockquote>
<p>需要注意的是：旋转过后应该保持根节点颜色相同，以及这里的旋转过程是在插入节点时调用的，在2-3树中插入操作总是和树中的节点相互融合的，所以要将旋转后的节点标记为红色。</p>
</blockquote>
<!-- TODO 聊清楚左右旋转的着色原理 -->

<hr>
<p>在正式开始插入操作之前，有一点需要先注意：新插入的节点默认是红色的节点，因为在插入的时候除非是插入在根节点的位置之外，所有的插入首先都是与原有的节点做融合操作，而融合进其他节点的节点在红黑树中被标记为红色。</p>
<h2 id="向红黑树中的“2-节点”插入元素"><a href="#向红黑树中的“2-节点”插入元素" class="headerlink" title="向红黑树中的“2-节点”插入元素"></a>向红黑树中的“2-节点”插入元素</h2><p>向一个<code>2-节点</code>中插入元素之后，会与原来的<code>2-节点</code>一起形成一个<code>3-节点</code>。这就引申出了两种情况：</p>
<ol>
<li>插入节点小于<code>2-节点</code>，插入在<code>2-节点</code>的左边，成为<code>2-节点</code>的左孩子。<br> 符合左倾红黑树的定义，即红链接在左边，此时无需修改。</li>
<li>插入节点大于<code>2-节点</code>，插入在<code>2-节点</code>的右边，成为<code>2-节点</code>的右孩子。<br> 不符合左倾红黑树的定义，即红链接在右边，此时需要对被插入节点做一次左旋转的操作，以将右红链接纠正为左红链接。</li>
</ol>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1628078520.PNG" alt="album_temp_1628078520"></p>
<h2 id="向红黑树中的“3-节点”插入元素"><a href="#向红黑树中的“3-节点”插入元素" class="headerlink" title="向红黑树中的“3-节点”插入元素"></a>向红黑树中的“3-节点”插入元素</h2><p>向一个<code>3-节点</code>中插入元素之后，与原来的<code>3-节点</code>之间会产生三种情况：</p>
<ol>
<li>插入的元素小于<code>3-节点</code>的两个元素。</li>
<li>插入的元素位于<code>3-节点</code>的两个元素之间。</li>
<li>插入的元素大于<code>3-节点</code>的两个元素。</li>
</ol>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1628079653.PNG" alt="album_temp_1628079653"></p>
<blockquote>
<p>注意：以上的三种情况中最后的一个步骤都是需要将根节点也就是b节点转换成黑色的，这样才能保持红黑树的第五条性质，黑平衡。</p>
</blockquote>
<h2 id="插入代码实现"><a href="#插入代码实现" class="headerlink" title="插入代码实现"></a>插入代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RBTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> e;</span><br><span class="line">        Node left, right;</span><br><span class="line">        <span class="type">boolean</span> color;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.e = e;</span><br><span class="line">            <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.color = RED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左旋转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">leftRotate</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="comment">// 暂存</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> node.right;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 旋转</span></span><br><span class="line">        node.right = x.left;</span><br><span class="line">        x.left = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 着色</span></span><br><span class="line">        x.color = node.color;</span><br><span class="line">        node.color = RED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右旋转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">rightRotate</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="comment">// 暂存</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> node.left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 旋转</span></span><br><span class="line">        node.left = x.right;</span><br><span class="line">        x.right = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 着色</span></span><br><span class="line">        x.color = node.color;</span><br><span class="line">        node.color = RED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isRed</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">node</span> <span class="operator">=</span>= <span class="literal">null</span> ? BLACK : node.color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">flipColors</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.color = RED;</span><br><span class="line">        node.left.color = BLACK;</span><br><span class="line">        node.right.color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">        add(root, e);</span><br><span class="line">        root.color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">add</span><span class="params">(Node node, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.e &gt; e) &#123;</span><br><span class="line">            node.left = add(node.left, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.e &lt; e) &#123;</span><br><span class="line">            node.right = add(node.right, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isRed(node.right) &amp;&amp; !isRed(node.left))</span><br><span class="line">            node = leftRotate(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isRed(node.left) &amp;&amp; isRed(node.left.left))</span><br><span class="line">            node = rightRotate(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isRed(node.left) &amp;&amp; isRed(node.right))</span><br><span class="line">            flipColors(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本文中的参考图片出自《算法：第4版》这本书中的红黑树章节。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>平衡二叉树</tag>
        <tag>2-3树</tag>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title>AVL 树</title>
    <url>/posts/54793/</url>
    <content><![CDATA[<p>上一篇文章所讲述的【<a href="https://www.wrp.cool/posts/46128/">二叉搜索树</a>】其实有一个非常严重的漏洞：如果插入的元素都是有序的怎么办？</p>
<blockquote>
<p>如果按照有序的方式或者近乎有序的方式将元素插入到二叉搜索树当中去，那么此时的二叉搜索树将退化成一个链表的数据结构。于是引入平衡这种机制来防止这种情况的发生，引入平衡的二叉树被成为平衡二叉树。</p>
</blockquote>
<p><strong>平衡：</strong><font color=blue>一棵树中对于任意节点都有左子树的高度减去右子树的高度的绝对值小于等于1，则称这棵二叉树是平衡的。</font></p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先还是先看看百度百科中对于AVL树的定义（<a href="https://baike.baidu.com/item/AVL%E6%A0%91">AVL树-百度百科</a>）。</p>
<p><strong>AVL树的特点：</strong></p>
<ul>
<li>本身首先是一棵二叉搜索树</li>
<li>带有平衡性：每个节点的左右子树的高度之差的绝对值（<strong>平衡因子</strong>）最多为1。<br>也就是说，AVL树，本质上是带了平衡功能的二叉搜索树。</li>
</ul>
<p><strong>平衡因子：</strong>左子树的高度减去右子树的高度。（注意：平衡因子的值可能为负，不过这是正常的，平衡因子的正负性能够帮助我们区分二叉树是向左倾斜的还是向右倾斜的）</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><blockquote>
<p>本质上AVL树还是一种二叉搜索树，但是引入了“平衡因子”的概念来维护树的平衡，所以在树的节点类中要新增加一个<code>height</code>变量来维护树的高度。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> e, height;</span><br><span class="line">    <span class="keyword">public</span> Node left, right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> e, Node left, Node right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = <span class="number">1</span>; <span class="comment">// 新节点默认高度为 1</span></span><br><span class="line">        <span class="built_in">this</span>.e = e;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设计两个辅助函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取节点高度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">node</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="number">0</span> : node.height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取平衡因子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBalanceFactor</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">node</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="number">0</span> : getHeight(node.left) - getHeight(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="树的平衡与失衡"><a href="#树的平衡与失衡" class="headerlink" title="树的平衡与失衡"></a>树的平衡与失衡</h1><p>一个节点的平衡因子由有这个节点左子树的高度减去右子树的高度得到的。如果平衡因子的绝对值小于等于一，则这个节点是平衡的，反之则称之为失衡。</p>
<p><font color=blue>那么什么情况会导致树的失衡呢？</font><br>当左右子树的高度本来就相差1的情况下，其中较高的子树再次加1的情况下，此时就会产生失衡。</p>
<p><font color=blue>那么失衡总共有多少种情况呢？</font><br>四种，分别是LL型、RR型、LR型、RL型，L和R分别是Left和Right的缩写。<br>其中第一个字母代表的是较高的子树是左子树还是右子树，第二个字母代表的是新增的节点是增加在较高子树的左子树还是右子树。<br>除了这四种失衡的情况，其余的情况就都是平衡的了。</p>
<p>下面为这四种情况分别举个例子：<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210714225927.png" alt="20210714225927"></p>
<blockquote>
<p>以上的四种情况失衡的节点都是根节点。</p>
</blockquote>
<h1 id="左旋转与右旋转-平衡-LL和RR"><a href="#左旋转与右旋转-平衡-LL和RR" class="headerlink" title="左旋转与右旋转 平衡 LL和RR"></a>左旋转与右旋转 平衡 LL和RR</h1><p>左旋转与右旋转就是对不平衡节点的平衡操作，就拿上面比较简单的LL和RR的例子来演示左旋转与右旋转。</p>
<p><strong>具体的旋转过程用这两张图来表示：</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-AVL-3.jpg" alt="数据结构-AVL-3"><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-AVL-2.jpg" alt="数据结构-AVL-2"></p>
<blockquote>
<p>这里的<code>D、E、F、G</code>分别是挂在在<code>A、B、C</code>节点下的二叉树，这里假设<code>D、E、F、G</code>高度相同。为了方便理解，你可以直接把<code>D、E、F、G</code>就当成是单个节点。</p>
</blockquote>
<p><font color=blue>这里最重要的一点是旋转前后整个树依然保持着二叉搜索树的性质，也就是图中的结论在旋转前和旋转后都是成立的。</font></p>
<p><font size=5><strong>编码实现：</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 左旋转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">leftRotate</span><span class="params">(Node a)</span> &#123;</span><br><span class="line">    <span class="comment">// 暂存</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">b</span> <span class="operator">=</span> a.right;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">e</span> <span class="operator">=</span> b.left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转</span></span><br><span class="line">    b.left = a;</span><br><span class="line">    a.right = e;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新Height</span></span><br><span class="line">    a.height = Math.max(getHeight(a.left), getHeight(a.right)) + <span class="number">1</span>;</span><br><span class="line">    b.height = Math.max(getHeight(b.left), getHeight(b.right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 右旋转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">rightRotate</span><span class="params">(Node a)</span> &#123;</span><br><span class="line">    <span class="comment">// 暂存</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">b</span> <span class="operator">=</span> a.left;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">f</span> <span class="operator">=</span> b.right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转</span></span><br><span class="line">    b.right = a;</span><br><span class="line">    a.left = f;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新Height</span></span><br><span class="line">    a.height = Math.max(getHeight(a.left), getHeight(a.right)) + <span class="number">1</span>;</span><br><span class="line">    b.height = Math.max(getHeight(b.left), getHeight(b.right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="左旋转与右旋转-平衡-LR和RL"><a href="#左旋转与右旋转-平衡-LR和RL" class="headerlink" title="左旋转与右旋转 平衡 LR和RL"></a>左旋转与右旋转 平衡 LR和RL</h1><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-AVL-4.jpg" alt="数据结构-AVL-4"></p>
<p>大概的处理过程就是这个样子，先旋转其中一个节点，将LR和RL变成LL或者是RR的形式，最后再旋转一次即可完成对LR和RL的平衡。</p>
<h1 id="在二叉搜索树中引入AVL"><a href="#在二叉搜索树中引入AVL" class="headerlink" title="在二叉搜索树中引入AVL"></a>在二叉搜索树中引入AVL</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保持平衡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">keepBalance</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平衡维护</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> getBalanceFactor(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LL</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt;= <span class="number">2</span> &amp;&amp; getBalanceFactor(root.left) &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> rightRotate(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RR</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt;= -<span class="number">2</span> &amp;&amp; getBalanceFactor(root.right) &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> leftRotate(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LR</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt;= <span class="number">2</span> &amp;&amp; getBalanceFactor(root.left) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        root.left = leftRotate(root.left);</span><br><span class="line">        <span class="keyword">return</span> rightRotate(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RL</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt;= -<span class="number">2</span> &amp;&amp; getBalanceFactor(root.right) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        root.right = rightRotate(root.right);</span><br><span class="line">        <span class="keyword">return</span> leftRotate(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">    root = add(root, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">add</span><span class="params">(Node root, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e &lt; root.e) root.left = add(root.left, e);</span><br><span class="line">    <span class="keyword">if</span> (e &gt; root.e) root.right = add(root.right, e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新Height</span></span><br><span class="line">    root.height = Math.max(getHeight(root.left), getHeight(root.right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平衡维护</span></span><br><span class="line">    <span class="keyword">return</span> keepBalance(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">    delNode(root, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">delNode</span><span class="params">(Node root, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e &gt; root.e) &#123;</span><br><span class="line">        root.right = delNode(root.right, e);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e &lt; root.e) &#123;</span><br><span class="line">        root.left = delNode(root.left, e);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size --;</span><br><span class="line">    Node retNode;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span>) retNode =  root.right;</span><br><span class="line">    <span class="keyword">if</span> (root.right == <span class="literal">null</span>) retNode = root.left;</span><br><span class="line">    retNode = delMax(root.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新Height</span></span><br><span class="line">    root.height = Math.max(getHeight(root.left), getHeight(root.right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平衡维护</span></span><br><span class="line">    <span class="keyword">return</span> keepBalance(retNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>二叉树</tag>
        <tag>平衡二叉树</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉搜索树</title>
    <url>/posts/46128/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： <font color=blue>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。</font>二叉搜索树作为一种经典的数据结构，它既有链表的快速插入与删除操作的特点，又有数组快速查找的优势；所以应用十分广泛，例如在文件系统和数据库系统一般会采用这种数据结构进行高效率的排序与检索操作。</p>
<p>以上资料来自：<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">二叉搜索树-百度百科</a></p>
</blockquote>
<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BST</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> e;</span><br><span class="line">        <span class="keyword">public</span> Node left, right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> e, Node left, Node right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.e = e;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BST</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">    add(root, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">add</span><span class="params">(Node root, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        size ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (e &lt; root.e) &#123;</span><br><span class="line">        root.left = add(root.left, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e &gt; root.e) &#123;</span><br><span class="line">        root.right = add(root.right, e);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> find(root, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(Node root, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e &lt; root.e) </span><br><span class="line">        <span class="keyword">return</span> find(root.left, e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e &gt; root.e)</span><br><span class="line">        <span class="keyword">return</span> find(root.right, e);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除最大元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">delMax</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        root.right = delMax(root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        size --;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除任意元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> delNode(root, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">delNode</span><span class="params">(Node root, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e &gt; root.e) &#123;</span><br><span class="line">        root.right = delNode(root.right, e);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e &lt; root.e) &#123;</span><br><span class="line">        root.left = delNode(root.left, e);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size --;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line">    <span class="keyword">if</span> (root.right == <span class="literal">null</span>) <span class="keyword">return</span> root.left;</span><br><span class="line">    <span class="keyword">return</span> delMax(root.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序遍历（递归版本）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    System.out.println(root);</span><br><span class="line">    preOrder(root.left);</span><br><span class="line">    preOrder(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序遍历（循环版本）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用栈来模拟递归</span></span><br><span class="line">    IStack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        System.out.print(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>)</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>)</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序遍历（递归版本）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    inOrder(root.left);</span><br><span class="line">    System.out.println(root);</span><br><span class="line">    inOrder(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序遍历（循环版本）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用栈来模拟递归</span></span><br><span class="line">    IStack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        System.out.print(node);</span><br><span class="line"></span><br><span class="line">        root = node.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序遍历（递归版本）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    postOrder(root.left);</span><br><span class="line">    postOrder(root.right);</span><br><span class="line">    System.out.println(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用栈来模拟递归</span></span><br><span class="line">    IStack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span> &amp;&amp; root.right != prev) &#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(root);</span><br><span class="line">            prev = root;</span><br><span class="line">            root = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="层序遍历二叉树"><a href="#层序遍历二叉树" class="headerlink" title="层序遍历二叉树"></a>层序遍历二叉树</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">levelOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    IQueue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    queue.enque(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> queue.deque();</span><br><span class="line">        System.out.println(node);</span><br><span class="line"></span><br><span class="line">        queue.enque(node.left);</span><br><span class="line">        queue.enque(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于二叉搜索树是一种比较简单的数据结构，所以本文更多的是一些代码的记录，并不对其中的逻辑做深入的阐述。<br>如果你发现了什么错误或者是有什么疑问都欢迎在评论区指出。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>二叉树</tag>
        <tag>递归</tag>
        <tag>遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/posts/11306/</url>
    <content><![CDATA[<p>本来像是这样的排序算法在网上搜个快速排序能找到很多的博客在详细的说明快速排序的实现、特点、性能、时间复杂度等等，但还是决定要自己写一篇博客来讲讲这个算法，实际上是想要分享一些在学习这个算法的过程中一些让我感到惊讶的地方。</p>
<p><font color=blue>也正是因为这样的一些比较独特的，比较不可思议却又是合乎情理的存在才让算法变得更神秘，更吸引人了。</font></p>
<span id="more"></span>

<hr>
<p>先简单的讲一下快速排序的核心思想：</p>
<blockquote>
<p>每次在数组中随机的找到一个元素，以这个元素为基准将整个数组分成大于基准元素的部分和小于基准元素的部分，之后再按照小于基准元素、基准元素、大于基准元素这样的顺序排好，之后再递归的对小于基准元素部分和大于基准元素部分分别进行相同的操作。有一些书中也会将这个基准元素称为标兵。</p>
</blockquote>
<p>根据这样的一个思想我们可以很快速的设计出第一版的快速排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[l]))</span><br><span class="line">            swap(arr, i, ++j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, l, j);</span><br><span class="line"></span><br><span class="line">    sort(arr, l, j - <span class="number">1</span>);</span><br><span class="line">    sort(arr, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处swap函数用于交换数组中两个下标处的值。</span></span><br></pre></td></tr></table></figure>

<p>有些书上的快速排序实现的过程可能跟上面代码并不一致，这里也想说一点关于自己的想法，对于算法的实现我们更应该关注的是这个算法的思想，以及我们所实现的算法的时间复杂度分析上，而不是去纠结具体实现的方式。</p>
<p>上面的代码看着好起来并不复杂，但是想要彻底的理解的话其实并不容易，关键是要能够理解 j 代表什么，也就是 j 的语义。</p>
<p><font color=blue>此处的 j 代表了小于标兵元素部分的最右边的元素。</font></p>
<blockquote>
<p>上面的代码对于初学者可能并不是特别友好，如果你有任何的疑问欢迎在评论区提问。</p>
</blockquote>
<hr>
<p><strong>有意思的地方现在开始了：</strong></p>
<p>如果你觉得上面的代码没问题的话，在这里强烈建议你设计一个数据规模是百万这个级别并且已经排好序的数组来跑一下上面的这个快速排序算法，你会发现这一点也不快速。</p>
<p>由于我们每次所选择的标兵元素都是数组中的第一个元素，所以如果是一个已经排好序的数组，这个快速排序算法会直接退化成一个<code>O(n^2)</code>级别的算法。</p>
<p>改进的方式是使用随机标兵，于是上面的代码迎来了第一次改进。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机标兵（针对有序数组的优化）</span></span><br><span class="line">    swap(arr, l, l + random.nextInt(r - l + <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[l]))</span><br><span class="line">            swap(arr, i, ++j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, l, j);</span><br><span class="line"></span><br><span class="line">    sort(arr, l, j - <span class="number">1</span>);</span><br><span class="line">    sort(arr, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码的逻辑还是没有改变，还是选取数组中的第一个元素为标兵元素，但是在每次选取之前将数组中的第一个元素和数组中的随机任何一个元素交换一下位置，以达到随机标兵的效果。</p>
<hr>
<p>但就算是这样这个算法依旧不完美，设想一下：<strong>如果是一个所有元素都相同的数组呢？</strong><br>比如一个容量为一百万的数组里面存放的元素全部都是0。</p>
<p>如果是这样的情况，那么随机标兵也就没有作用了，快速排序也就再次退化成了一个<code>O(n^2)</code>级别的算法。</p>
<p>于是第二次改进：<strong>双路快速排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机标兵（针对完全有序数组所进行的优化）</span></span><br><span class="line">    swap(arr, l, l + random.nextInt(r - l + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l + <span class="number">1</span>, j = r;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[i] &lt; arr[l]) i++;</span><br><span class="line">        <span class="keyword">while</span> (arr[j] &gt; arr[l]) j--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">        swap(arr, i++, j--);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, l, j);</span><br><span class="line"></span><br><span class="line">    sort(arr, l, j - <span class="number">1</span>);</span><br><span class="line">    sort(arr, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>双路快速排序算法已经是一个可以满足所有场景的快速排序算法了。</p>
<p>但是这还不够完美，还是刚刚的例子，如果数组中全部元素都相同的话，虽然可以满足O(nlogn)这个级别的速度实现排序，但是如果全部元素都相同的话快速排序还可以做到O(n)级别的时间复杂度。</p>
<p>于是最终版本：<strong>三路快速排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机标兵（针对完全有序数组所进行的优化）</span></span><br><span class="line">    SortingHelper.swap(arr, l, l + random.nextInt(r - l + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">lt</span> <span class="operator">=</span> l, i = l + <span class="number">1</span>, gt = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; gt) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[i].compareTo(arr[l]) &lt; <span class="number">0</span>) </span><br><span class="line">            SortingHelper.swap(arr, ++lt, i++);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[i].compareTo(arr[l]) &gt; <span class="number">0</span>) </span><br><span class="line">            SortingHelper.swap(arr, i, --gt);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">    SortingHelper.swap(arr, l, lt);</span><br><span class="line"></span><br><span class="line">    sort(arr, l, lt - <span class="number">1</span>);</span><br><span class="line">    sort(arr, gt, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 跨域处理</title>
    <url>/posts/63535/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 添加cors配置信息</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置允许请求的域名</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;https://www.wrp.cool&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置是否发送cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置允许请求的方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置允许的header</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 为url添加映射路径</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">corsSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        corsSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 返回重新定义好的corsSource</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(corsSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 事务传播行为</title>
    <url>/posts/33401/</url>
    <content><![CDATA[<p>记录一下Spring中的事务传播行为，也就是 <code>@Transactional</code> 这个注解中的 <code>propagation</code> 属性的值分别是什么，有什么，各自又代表了什么。</p>
<p>事务传播行为就是：<font color=blue>当方法与方法之间有发生嵌套调用的情况下，父级方法和子级方法之间的事务如何处理。</font>通过我们定义不同的传播行为，可以使得父级方法和子级方法有不同的处理事务的方式。</p>
<span id="more"></span>

<p>Spring 中的7种事务传播行为：</p>
<table>
<thead>
<tr>
<th>事务传播类型</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>Propagation.REQUIRED</td>
<td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，则加入到这个事务中。</td>
<td>父级有子级就父级共享父级没有子级就自己创建。</td>
</tr>
<tr>
<td>Propagation.SUPPORTS</td>
<td>支持当前事务，如果当前没有事务，就以非事务的方式运行。</td>
<td>父级有子级就父级共享父级没有就一起没有。</td>
</tr>
<tr>
<td>Propagation.MANDATORY</td>
<td>使用当前的事务，如果当前没有事务，就抛出异常。</td>
<td>父级必须要有。</td>
</tr>
<tr>
<td>Propagation.REQUIRES_NEW</td>
<td>新建事务，如果当前存在事务，把当前事务挂起。</td>
<td>子级肯定有父级有父级自己的，子级不父级共享。</td>
</tr>
<tr>
<td>Propagation.NOT_SUPPORTED</td>
<td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td>
<td>子级肯定没有，就父级有子级也不要。</td>
</tr>
<tr>
<td>Propagation.NEVER</td>
<td>以非事务方式执行，如果当前存在事务，则抛出异常。</td>
<td>子级没有父级也不能有。</td>
</tr>
<tr>
<td>Propagation.NESTED</td>
<td>如果当前存在事务，则成为当前事务的子事务。如果当前没有事务，则执行与<code>Propagation.REQUIRED</code>类似的操作。</td>
<td>父级有子级就父级共享，当子级回滚时也不影父级和其他兄弟。但是如父级回滚了，那子级肯定跟父级一起回滚。</td>
</tr>
</tbody></table>
<blockquote>
<p>参考文章：<br><a href="https://segmentfault.com/a/1190000013341344">Spring事务传播行为详解</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>maven 数据源配置</title>
    <url>/posts/243/</url>
    <content><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 淘宝源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>递归</title>
    <url>/posts/38362/</url>
    <content><![CDATA[<p>大家应该都听过这么一个故事：</p>
<blockquote>
<p>从前有座山，山上有座庙，庙里有个老和尚和一个小和尚，老和尚在给小和尚讲一个故事，故事是什么呢？故事就是：从前有座山，山上有座庙，庙里有个老和尚和一个小和尚，老和尚在给小和尚讲一个故事，故事是什么呢？故事就是：从前有座山，山上有座庙，庙里有个老和尚和一个小和尚，老和尚在给小和尚讲一个故事，故事是什么呢？故事就是：…..</p>
</blockquote>
<p>也都应该经历过这么一个场景：</p>
<blockquote>
<p>有一些理发店里面呢，会有两个镜子相对的情况，镜子A里面可以看到镜子B，镜子B里面又可以看到镜子A，镜子A跟镜子B之间互相反射的循环反反复复的无穷无尽。</p>
</blockquote>
<p>我认为这可以算是现实世界中的递归现象。当然了，现实世界中类似于这样的现象并不少见。我觉得发明了递归算法的人一定也是在这其中的某一个场景或者是某一个故事下获得的灵感。</p>
<p><font color=blue>毕竟，计算机科学就是一种对于现实世界的抽象。</font></p>
<span id="more"></span>

<hr>
<p>学习计算机的同学所接触到的第一个递归算法应该都是递归求阶乘或者是数组求和这样的算法。虽然求阶乘或者是求和这只是很简单的递归代码，但是递归算法该有的，它也一样都没有落下。其实这样的功能只需要一层简单的循环就可以搞定，递归算法在这里反而是降低了代码的可读性，并没有为我们带来实际上的好处。<br><font color=#aaa>这里并不是不鼓励同学们使用递归来编写逻辑代码，而是希望不要过度设计自己的代码，还是那句话，刚刚好的才是最美：）</font></p>
<p><font size=5 ><strong>递归</strong></font> <a href="https://baike.baidu.com/item/%E9%80%92%E5%BD%92">百度百科</a></p>
<blockquote>
<p>程序调用自身的编程技巧称为递归（ recursion）。递归做为一种算法在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。<strong>一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。</strong></p>
</blockquote>
<p>结合一下递归求阶乘的代码理解一下上面百度百科的这段话，特别是最后一句话。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归求阶乘</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个简单的递归代码，但是麻雀虽小，却也五脏俱全。在这个例子中，<strong>边界条件、递归前进段和递归返回段</strong>都是很明确的。</p>
<ul>
<li><strong>边界条件：</strong>n &#x3D;&#x3D; 1</li>
<li><strong>递归前进段：</strong>每次调用 <code>factorial(n - 1)</code> 时递归算法就前进一个函数单位</li>
<li><strong>递归返回段：</strong>当<code>n-1</code>减到<code>n==1</code>的时候，也就是if条件成立返回1的时候，<code>factorial(n - 1)</code>开始返回，每次返回，递归就结束一次<code>factorial(n - 1)</code>函数的调用，也就是返回一个函数单位。</li>
</ul>
<blockquote>
<p>简单一些来理解的话：递归无非就是一个满足了<strong>直接或者是间接的调用自身、以及在某个时候会结束对自身调用</strong>这两个条件的函数，仅此而已。</p>
</blockquote>
<p> 如果要我一句话来描述递归算法的话，我会说：<font color=blue>比起循环，这是一种更能够提高代码可读性的循环。</font></p>
<p> 我认为递归所能完成的逻辑，换成循环来做这样的事情甚至效率上还要更高一些，因为循环并不需要额外的方法调用的成本。但是在某些复杂的场景下，使用递归会让我们的代码变得非常简洁易于理解，比如：二叉树的前、中、后序的遍历；求一个二叉树的节点个数等等。</p>
<p> 但是递归也有一个非常明显的缺点，那就是几乎所有的编程语言的函数调用栈都有一个明确的大小，这就导致了递归函数的调用层数不能超出这个大小，否则会产生一个栈内存的溢出，在Java中这是一个叫做<code>StackOverflowError</code>的异常。</p>
<hr>
<p><font size=5 ><strong>递归函数的宏观语义</strong></font></p>
<p>递归的本质实际上就是将一个问题不断的拆解成一个一个的小的问题，直到最后的一个问题小到不能再小了，这个时候我们可以很容易的解决这个问题，将这个问题的解决结果返回给上一个问题，解决掉上一个问题之后再解决上上个问题以此类推，最终解决我们的问题。<strong>拆解问题的过程也就是递归前进段，解决掉最基本问题开始返回的阶段也就是递归返回段。</strong></p>
<p>更多的时候我喜欢把递归函数理解成一个单元，也就是递归单元。因为递归函数调用自身后还是走一遍自身的逻辑，每次递归调用在逻辑上并没有产生任何的变化，相应的我们只是改变了每次调用的参数而已。<strong>将递归函数拆解成的一个一个的小问题的这个步骤，就体现在每次调用递归函数的参数列表都要比上一次的参数列表要更简单一点点。</strong></p>
<p>很多时候编写递归逻辑的时候都是因为递归调用自身的这个动作会令我们感到很迷惑，没有办法理解到这一步操作是怎么执行的。我第一次接触二叉树前序遍历的代码的时候就是倒在了这一步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树前序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prevOrder</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    System.out.print(node);</span><br><span class="line">    prevOrder(node.left);</span><br><span class="line">    prevOrder(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我刚刚开始看这代码的时候我完全无法理解为什么上面这段代码为什么会以中、左、右的方式输出一个二叉树，甚至我完全不能够明白这段代码的逻辑。原因是我自己的思维跟着递归函数一起被递归进去了，一直试图去理解每次递归进去之后发生了什么事情，而递归函数的逻辑一直没变。就像是开头的哪个老和尚讲故事一样，我完全没办法跳出递归逻辑。</p>
<p><font color=blue>但是，如果能从宏观的角度来看这段代码，就舒服多了。</font></p>
<ul>
<li><strong>首先，明白我们写的递归函数是要完成一个什么样的功能。</strong></li>
<li><strong>然后，不要去研究递归进去的逻辑是什么样的，仅仅只看第一层逻辑。</strong></li>
<li>因为递归进去的逻辑跟第一层的逻辑是完全一样的。</li>
</ul>
<p>如果要把 <code>prevOrder</code> 这个递归函数所做的事情理解成一个递归单元的话，我们只需要整理出这个函数所要实现的功能就可以理解这个递归函数的逻辑。</p>
<p><font size=4><strong>Q&amp;A Time</strong></font></p>
<ul>
<li><strong>Q：prevOrder这个函数的功能是什么？</strong></li>
<li>A：按照中、左、右的顺序输出一棵二叉树。</li>
<li><strong>Q：第7行的逻辑是什么？</strong></li>
<li>A：输出当前节点。</li>
<li><strong>Q：第8行的逻辑是什么？</strong></li>
<li>A：按照中、左、右的顺序输出当前节点的左子树。</li>
<li><strong>Q：第9行的逻辑是什么？</strong></li>
<li>A：按照中、左、右的顺序输出当前节点的右子树。</li>
</ul>
<blockquote>
<p>看到这里如果还不能够明白这个递归逻辑的话，我建议在纸上画一棵高度为3，7个节点的满二叉树然后按照上面 Q&amp;A 再结合代码依次访问一下这棵二叉树上的各个节点，你也许能更加直观的感受什么是递归的宏观语义。</p>
</blockquote>
<p>我所理解的递归函数的宏观语义是：</font></p>
<ul>
<li><p>将一个大的问题一点一点的拆分成许多个小的问题，或者说是抽象成多个小问题，<strong>每一个问题就是一个递归单元，每一个递归单元在逻辑上都是相同的，唯一不同的只是参数列表。</strong></p>
</li>
<li><p>在这个例子中，前序遍历当前节点、前序遍历当前节点的左子树、前序遍历当前节点的右子树，这是<strong>完完全全相同的逻辑。</strong></p>
</li>
<li><p>当我们能够按照这种思维来解读递归代码的话，我们可以完全不关心递归调用里面的逻辑是怎样的，递归调用也就可以理解成为一种普通的函数调用。</p>
</li>
</ul>
<hr>
<p><font size=5 ><strong>如何编写一个递归程序？</strong></font></p>
<p>借助力扣第206号问题（<a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a>）来讲述如何梳理出递归函数的宏观语义以及怎么编写递归函数。</p>
<blockquote>
<p>给你<strong>单链表</strong>的头节点 <code>head</code> 请你反转链表，并返回反转后的链表<br><strong>示例一：</strong><br>输入：head &#x3D; (1) -&gt; (2) -&gt; (3) -&gt; (4) -&gt; (5) -&gt; NULL<br>输出：head &#x3D; (5) -&gt; (4) -&gt; (3) -&gt; (2) -&gt; (1) -&gt; NULL<br><strong>示例二：</strong><br>输入：head &#x3D; (1) -&gt; (2) -&gt; NULL<br>输出：head &#x3D; (2) -&gt; (1) -&gt; NULL<br><strong>示例三：</strong><br>输入：head &#x3D; (1) -&gt; NULL<br>输出：head &#x3D; (1) -&gt; NULL<br><strong>示例四：</strong><br>输入：head &#x3D; NULL<br>输出：head &#x3D; NULL</p>
</blockquote>
<p>如果一个问题已经明确了要使用递归来求解的话，我们第一步要做的就是找出这个拆解后最基本的那个问题，对于反转链表的这个问题来说，显而易见最基本的问题就是当链表为空或者是链表只有一个节点的情况。一个空链表反转过后还是一个空链表，一个只有一个节点的链表反转过后还是只有一个节点。找出最基本的问题只是递归函数中最基础的部分，如果连最基本的问题都找不出来的话，那么几乎可以断定这个问题无法使用递归求解。</p>
<p>完成了最基本的部分接下来才是一个如何编写一个递归函数的重头戏，<font color=blue>将递归函数单元化，也就是找出这个递归函数的宏观语义，清楚这个递归函数要表达什么。</font>将递归函数看作是一个单元之后其实就不需要再考虑我们要求解的这个问题具体是什么了，解决问题的重点就放在了怎么解决一个一个拆解出来的小问题了。</p>
<ul>
<li>这里我再啰嗦一下解释一下示例一这个例子：</li>
<li>反转前：<code>head</code> 的值为1，指向了值为2的节点，值为2的节点指向了值为3的节点…最终指向NULL</li>
<li>反转后：<code>head</code> 的值为5，指向了值为4的节点，值为4的节点指向了值为3的节点…最终指向NULL</li>
</ul>
<p>假如我们现在处于 <code>(3)</code> 这个节点，结合递归函数的宏观语义来看一下此时链表的状态。前面的 <code>(1)</code> 和 <code>(2)</code> 节点是没有变化的，因为我们现在处于 <code>(3)</code> 这个节点，还没有反转到 <code>(1)</code> 和 <code>(2)</code> 。<font color=blue>但是对于已经反转过的 <code>(4)</code> 和 <code>(5)</code> 来说，应该是 <code>NULL &lt;- (4) &lt;- (5)</code> 这个样子的。</font>而此时的 <code>(3)</code> 这个节点仍然是指向了 <code>(4)</code> 这个节点的。</p>
<p>好了，分析到此为止，答案已经是显而易见的了。当我们处于 <code>(3)</code> 这个节点的时候，我们只需要将 <code>(3)</code> 这个节点当作是已经反转完成的链表的下一个待反转节点再将 <code>(3)</code> 这个节点反转过来就可以了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)  <span class="comment">// 最基本的问题</span></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rev</span> <span class="operator">=</span> reverseList(head.next);  <span class="comment">// 得到已经反转完成的链表</span></span><br><span class="line">        head.next.next = head;                  <span class="comment">// 将当前节点挂接在已经反转完成的链表的下一个节点，注意：head.next此时指向的是已经反转完成的链表的尾节点。</span></span><br><span class="line">        head.next = <span class="literal">null</span>;                       <span class="comment">// 执行到这一步的时候，head已经挂载到反转完成链表的尾节点的位置了，但是链表尾节点必须指向null，所以令 head.next = null</span></span><br><span class="line">        <span class="keyword">return</span> rev;                             <span class="comment">// 返回已经反转完成的链表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的这段代码也就是力扣上第206号问题的答案，有兴趣的同学可以将代码复制到力扣上第206号问题的解答区中去验证结果。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>lambda 表达式</title>
    <url>/posts/47234/</url>
    <content><![CDATA[<p>jdk1.8之后才出现了lambda表达式这个东西，这说明了lambda表达式实际上并不是编程中必须掌握的一项技能，但是既然jdk1.8之后支持了lambda表达式，那么说明lambda表达式肯定是会有其独特的用处。其实lambda表达式最重要的就是让我们写的代码更加的优雅，看起来更加的舒服。同时，使用lambda表达式也能在一定程度上少写一些代码，提高一些编程的效率。不过我还是认为lambda表达式最重要的是让代码变得更加优雅。</p>
<p>关于lambda表达式的一些基本的使用在网上实际上已经有了很多的博客或者教程，本文就不再赘述这些别人已经写过的东西了，主要还是想聊一下自己在学习lambda表达式过程中的一些理解。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">2021</span>);</span><br><span class="line">    list.add(<span class="number">0</span>);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(<span class="number">23</span>);</span><br><span class="line">    list.forEach(item -&gt; System.out.print(item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：20210523</span></span><br></pre></td></tr></table></figure>
<p><code>item -&gt; System.out.print(item)</code> 这就是一个最基本的lambda表达式，这实际上是一个抽象方法的实现，只不过是写成这个样子，看起来更加优雅了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">for</span> (T t : <span class="built_in">this</span>) &#123;</span><br><span class="line">        action.accept(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的是forEach方法的接口定义，具体的实现内容先不看，先看看forEach的参数列表中的 <code>Consumer&lt;? super T&gt; action</code> 这个东西，它叫函数式接口。</p>
<blockquote>
<p>在《Java核心技术 卷一》这本书中对函数式接口的定义是这样的：<br>对于只有一个抽象方法的接口，需要这种接口的对象时，就可以提供一个lambda表达式。<br>这种接口称为<strong>函数式接口</strong>（functional interface）</p>
<p>粗浅的理解可以是：一个接口中如果只定义了一个抽象方法的话，那么这个接口就是一个函数式接口。</p>
</blockquote>
<p>看看这个 Consumer 所谓的函数式接口中唯一定义的一个抽象方法长什么样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br></pre></td></tr></table></figure>

<p>上面说的 <code>item -&gt; System.out.print(item)</code> 这个东西是对一个抽象方法的实现，实际上就是对 <code>accept</code> 这个抽象方法的实现，我以我的理解来尝试复原这个实现，将它变成我们平时见到的普通的方法实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T item)</span> &#123;</span><br><span class="line">    System.out.print(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这么看起来一下子清晰多了，forEach方法将这个lambda表达式解析成了它所需要的参数，也就是Consumer接口的实现，之后再调用这个方法来遍历List集合。</p>
<p><em>当然具体的遍历方式我们也看到了，底层还是使用的forEach循环来遍历这个集合，所以在这里顺带提一下，除非遍历集合的内容只要一行代码就可以完成，像是我上面这样子，否则使用lambda表达式来遍历集合的话就不是很必要了。因为这并不会让我们的代码变得优雅或者是提高效率，反而平白的增加的后期维护的成本，得不偿失。</em></p>
<blockquote>
<p>思考一个问题：<br><font color = blue>如果有一个方法的代码刚刚好可以实现accept这个抽象接口，能不能直接把这个方法的代码作为accept的实现传递给forEach方法呢？</font></p>
</blockquote>
<p>还是上面的这个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">2021</span>);</span><br><span class="line">    list.add(<span class="number">0</span>);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(<span class="number">23</span>);</span><br><span class="line">    list.forEach(System.out::print);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：20210523</span></span><br></pre></td></tr></table></figure>

<p><code>System.out::print</code> 也是一种lambda表达式，在这段代码中，这两种实现方式的效果是完全一样的。</p>
<blockquote>
<p><code>::</code>表示的是方法的引用，实际上就是将<code>System.out</code>对象中的<code>print</code>方法直接作为抽象方法<code>accept</code>的实现传到forEach中去。</p>
</blockquote>
<p>结合这两个例子来看，lambda表达式中我们实际上只是传递的一个代码段，而不是接口的实现，底层的jvm会自动的根据上下文帮助我们封装成接口的实现以供方法调用，仅此而已。我认为这应该就是lambda表达式的真面目。</p>
<hr>
<p>除了传递方法的引用进去，lambda表达式还可以直接传递一个构造器。像这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 声明两个函数式接口 (此处借用 java.util.function.Supplier 函数接口)*/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Supplier1</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Supplier2</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">get</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Main */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;执行无参构造器&quot;</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">(String str)</span> &#123; System.out.println(<span class="string">&quot;执行有参构造器&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Supplier1&lt;Main&gt; s1 = Main::<span class="keyword">new</span>;</span><br><span class="line">        Supplier2&lt;Main&gt; s2 = Main::<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">        s1.get();</span><br><span class="line">        s2.get(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">执行无参构造器</span></span><br><span class="line"><span class="comment">执行有参构造器</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>上面的代码就是调用了Main类中对应的构造器来构建一个Main的实例并返回，写法也非常的简单，直接双冒号调用new关键字即可。具体的调用哪一个构造器会根据上下文自动选择跟函数式接口参数对应的上的构造器。</p>
<p>上面的使用lambda表达式创建的Supplier1对象和Supplier2对象的方式实际上等价于下面的样子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier1&lt;Main&gt; s1 = <span class="keyword">new</span> <span class="title class_">Supplier1</span>&lt;Main&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Main <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Supplier2&lt;Main&gt; s2 = <span class="keyword">new</span> <span class="title class_">Supplier2</span>&lt;Main&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Main <span class="title function_">get</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Main</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<p>再来看看lambda表达式中this的指向问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Test&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        r.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        r.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">main</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        main.test1();</span><br><span class="line">        main.test2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">Test</span></span><br><span class="line"><span class="comment">Main</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>先借书里的一句话来说明一下this的指向：在lambda表达式中，this的使用并没有任何特殊之处。lambda表达式的作用域嵌套在test2方法中，与出现在这个方法中的其他位置一样，lambda表达式中this的含义并没有发生变化。</p>
<p>对于这个实际上很好理解，<font color=blue>lambda表达式中的this出现在任何地方都跟哪个地方本来的this是一样的，并没有因为lambda而发生不同。</font>这实际上也从另外的角度说明了lambda表达式仅仅只是传递了一段代码过去，而没有做其他处理。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序 &amp; 插入排序</title>
    <url>/posts/21500/</url>
    <content><![CDATA[<p>具体的选择排序和插入排序的代码我已经放<a href="https://github.com/wangruipeng-wrp/algorithm-and-data-structure/tree/master/src/Sort">github</a>上了，本文不会针对具体的代码实现展开讨论。更多的是想聊一些在学习这两个算法过程中的自身一些心态的变化。</p>
<span id="more"></span>

<p>作为铺垫，还是简单讲一下插入排序和选择排序</p>
<blockquote>
<p><strong>选择排序：</strong><br>每次都找出一个最小的元素按照顺序排好</p>
</blockquote>
<blockquote>
<p><strong>插入排序：</strong><br>首先假装第一个元素是有序的，然后每次从无序的数组中拿出一个元素插入到有序的数组里面去</p>
</blockquote>
<p>我在学习这两个算法的时候是先学的选择排序，再学的插入排序。在还没有深入理解的情况下，<font color=Blue>我其实想当然的认为选择排序算法的性能就一定是要优于插入排序算法的。</font></p>
<p>我这么想的原因其实也非常简单，选择排序每次循环在做的事情仅仅只是比较两个元素的大小，直到最后找出最小的哪个元素，最后再交换两个元素就可以完成一轮排序，是通过一种比较的方式来实现排序这样的功能。</p>
<p>反过来看插入排序呢，在一开始需要保存待插入的元素，然后再往前一个个的比较，如果比较的元素比待插入的元素要大，那么就覆盖掉他后面的哪个元素。</p>
<p>这么粗浅的看，同样的乱序数组，插入排序和选择排序所使用的比较的次数在极端的情况下（也就是倒序数组的情况下）是相等的。</p>
<p>而选择排序呢，每次比较完成之后仅仅需要一次交换位置的操作即可完成本轮的排序，但是反观插入排序呢，每一次都需要有一个覆盖掉后面元素的动作，直到找到正确的位置插入了才可以完成本轮的排序。</p>
<p>这么一个想法出现在我脑海里之后，我几乎是断定的选择排序在性能上是要优于插入排序的。</p>
<p><font color=Blue>但是，如果现在是一个完全有序的数组来进行排序的呢，或者说是一个近乎有序的数组在排序呢？</font></p>
<p>这个时候选择排序还是必须每次都比较剩下的元素找到最小的哪一个，唯一的不同是交换元素位置的操作变少了。</p>
<p>再看看插入排序呢，每次都只需要比较一下前面的一个元素就好了，交换位置的操作同样变少了。但是有序的情况下，插入排序有着一个非常巨大的优势就是比较的操作也变的很少。</p>
<p><font color=red>于是，当对一个完全有序或者是近乎有序的数组排序时，插入排序的性能是要优于选择排序的。</font></p>
<p>上面是对于选择排序和插入排序在前几天学习的过程中自己对于两者性能之间的一些看法。</p>
<hr>
<p>实际上不仅仅是在这个例子中，在平时中我很多时候也总是会太果断的认为一个事情，直到举一个反例出来之后被啪啪打脸。</p>
<p>对于这样子的情况说的好听一些我认为是对于自己逻辑思维能力的一种莫名的自信，说的直白一些的话实际上是自己的一种无知造成了这样莫名的自信。</p>
<p>我认为这并不是一个好的习惯，今天在这里留下这样的一篇博客，作为一个见证：<br><font color=Blue>希望自己在今后能保持谦虚，保持好学，一点一点的变成一个厉害的人：）</font></p>
<hr>
<p>大家加油：）</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>选择排序</tag>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/posts/54363/</url>
    <content><![CDATA[<p>原型模式简单来说就是以一个已经创建好的对象为原型，使用二进制流的方式复制这个对象。</p>
<span id="more"></span>

<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p><strong>借《设计模式之禅》这本书中一个例子来简述一下原型模式：</strong></p>
<p>先来想想一个业务场景，现在有一家银行想要对它的储户发送一封广告邮件，银行的储户比较多，大概几百万上千万个储户。每个储户发送一封邮件，其中邮件的内容都是一样的，不一样的是邮件的收件人邮箱，收件人称谓等一些属性不同，其他的属性都大同小异。其中将相同的部分抽取成一个邮件模板类。</p>
<p><strong>模板类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Template</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="string">&quot;xxx银行国庆大酬宾！！！&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;把你的钱全部存到我们银行，我们帮你花掉它&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>邮件类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mail</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String addresseeAddress;</span><br><span class="line">    <span class="keyword">private</span> String addresseeName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = Template.subject;</span><br><span class="line">        <span class="built_in">this</span>.content = Template.content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>客户端：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Mail</span> <span class="variable">mail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mail</span>();</span><br><span class="line">        <span class="comment">// 发送一百万封邮件</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1_000_000</span>; i++) &#123;</span><br><span class="line">            mail.setAddresseeAddress(randomAddresseeAddress());</span><br><span class="line">            mail.setAddresseeName(randomAddresseeName());</span><br><span class="line">            sendMail(mail);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码实际上已经能够基本的实现我们想要的功能了，当然这得要有个非常非常重要的前提，那就是这个项目的甲方是一个比较将就的甲方。</p>
<p>看看上面的代码有什么问题，实际上没什么问题，就是慢了点，如果遇到这种百万级别千万级别的发送邮件的场景，使用单线程慢慢发的话可能得发一天甚至还不止。像这样的业务场景是必须使用多线程来发送邮件的，但是如果跟上面一样多个线程公用同一个mail对象的话那线程就不安全了。当然你可以选择创建多个mail对象来提供给每个线程，但是这真的大可不必，<strong>原型模式</strong>就是专门为了解决这样的业务场景而生的。</p>
<p><strong>使用原型模式来改造一下上面邮件类的代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mail</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String addresseeAddress;</span><br><span class="line">    <span class="keyword">private</span> String addresseeName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = Template.subject;</span><br><span class="line">        <span class="built_in">this</span>.content = Template.content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>对应的客户端实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="type">Mail</span> <span class="variable">mail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mail</span>();</span><br><span class="line">    <span class="comment">// 发送一百万封邮件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1_000_000</span>; i++) &#123;</span><br><span class="line">        <span class="type">Mail</span> <span class="variable">cloneMail</span> <span class="operator">=</span> (Mail) mail.clone();</span><br><span class="line">        cloneMail.setAddresseeAddress(randomAddresseeAddress());</span><br><span class="line">        cloneMail.setAddresseeName(randomAddresseeName());</span><br><span class="line">        sendMail(mail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与原来的不同之处就是Mail类实现了覆盖了Object方法中的clone方法，客户端不再使用同一个对象发送邮件，而是通过clone方法获取一个新的对象。之所以不让客户端自己创建一个新对象是因为我们现在演示使用的Mail对象非常简单，如果是在真实的业务场景中，创建一个Mail邮件对象一定是一个相当复杂的过程，创建一个这样的对象对于计算机资源的开销也是非常大的。而现在我们需要创建的是百万甚至是千万级别的这样的对象，这对于资源的开销是相当巨大的。</p>
<p><strong>小结原型模式的适用场景：</strong></p>
<ul>
<li>类初始化需要消耗较多的资源，例如：计算资源、硬件资源等</li>
<li>创建对象的过程非常繁琐，需要准备较多的访问权限，或者是大量的数据</li>
<li>一个对象会提供给其他对象访问，而且各个调用者可能都会修改其中的值</li>
</ul>
<blockquote>
<p>在实际的项目开发中原型模式很少单独出现，一般是和工厂模式一起出现，通过原型模式创建一个对象再由工厂模式将这个对象提供给调用者。</p>
</blockquote>
<h1 id="浅克隆和深克隆"><a href="#浅克隆和深克隆" class="headerlink" title="浅克隆和深克隆"></a>浅克隆和深克隆</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Prototype</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; arrayList;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Prototype</span><span class="params">(ArrayList&lt;String&gt; arrayList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arrayList = arrayList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    arrayList.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    arrayList.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Prototype</span> <span class="variable">prototypeTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prototype</span>(arrayList);</span><br><span class="line">    <span class="type">Prototype</span> <span class="variable">cloneTest</span> <span class="operator">=</span> (Prototype) prototypeTest.clone();</span><br><span class="line"></span><br><span class="line">    cloneTest.getArrayList().add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(prototypeTest.getArrayList());</span><br><span class="line">    System.out.println(cloneTest.getArrayList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行main方法后输出：</span><br><span class="line">[A, B, C]</span><br><span class="line">[A, B, C]</span><br></pre></td></tr></table></figure>

<p>通过上面的这个例子已经可以可以了解到clone方法仅仅只是克隆了对象的引用而已，而不是克隆了整个对象。通过clone方法得到的对象跟原来的对象中的引用数据类型都是指向同一片内存空间。</p>
<blockquote>
<p>clone方法相当于仅仅只是将这个对象栈内存中的数据复制一份存到一个新的引用类型的变量中而已。具体的栈内存和堆内存的关系在<a href="https://www.wrp.cool/posts/24923/">【JavaScript】数据类型</a>一文中有详细介绍。</p>
</blockquote>
<p>由于对克隆只是克隆了引用对象的地址而已，并没有深入去克隆这个对象中的引用，所以这种克隆方式称之为浅克隆。如果要实现对引用的克隆则需要修改clone方法，使其不仅克隆引用对象的地址，还能够克隆一个新的引用对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="type">Prototype</span> <span class="variable">prototype</span> <span class="operator">=</span> (Prototype) <span class="built_in">super</span>.clone();</span><br><span class="line">    <span class="comment">// 克隆引用对象</span></span><br><span class="line">    prototype.arrayList = (ArrayList&lt;String&gt;) <span class="built_in">this</span>.arrayList.clone();</span><br><span class="line">    <span class="keyword">return</span> prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对每个需要深拷贝的对象再进行一次单独的克隆即可完成深克隆，此时原型对象和克隆对象之间分别享有两个不同的ArrayList对象，完成了对ArrayList对象的深克隆。</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/posts/29125/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>单例模式从名称上就很好理解：一个对象保证在内存中只有一个实例。<br>当然，如果是多线程的话也要保证多个线程在运行的过程当中这个实例只会被创建一次。</p>
<p>单例模式的实现也有两种，懒汉式和饿汉式。从名字上就很好区分，懒汉式就是延迟创建单例对象的一种方式，饿汉式就是即刻创建单例对象的方式。两种实现方式本文都说到。</p>
<span id="more"></span>

<h1 id="单线程中的单例模式"><a href="#单线程中的单例模式" class="headerlink" title="单线程中的单例模式"></a>单线程中的单例模式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazeSingleInstance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">LazeSingleInstance</span> <span class="variable">lazeSingleInstance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazeSingleInstance</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazeSingleInstance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lazeSingleInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            lazeSingleInstance = <span class="keyword">new</span> <span class="title class_">LazeSingleInstance</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazeSingleInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单线程中的单例模式就只是这样子而已，非常简单。设计一个私有的构造函数是为了不让在外部创建这个类的实例，当然对外也需要提供一个可以获取类实例的方法，这也是单例模式中核心的方法，接下来也将围绕这个方法展开讨论。</p>
<p>这也是单例模式中最简单的实现，真正的难点在于多线程中如何保证多个线程运行过程中只创建一个实例。</p>
<h1 id="多线程中的单例模式"><a href="#多线程中的单例模式" class="headerlink" title="多线程中的单例模式"></a>多线程中的单例模式</h1><p>首先复现一个单例模式中可能出现的线程不安全问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LazeSingleInstance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lazeSingleInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">        lazeSingleInstance = <span class="keyword">new</span> <span class="title class_">LazeSingleInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lazeSingleInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>先介绍一下Java中new一个对象的过程都发生了什么事情：</strong><br>第一步：为这个对象分配内存。<br>第二步：初始化这个对象，也就是初始化对象里面的一些值。<br>第三步：将对象的地址赋值给创建这个对象的变量。</p>
</blockquote>
<p>在上面的这段代码当中，我们假设线程A执行到了第3行的第一步或者是第二步，而这时候刚刚好线程B执行到了第2行，由于线程A还没有为这个对象赋值，所以此时这个对象仍然是null的，那么线程B一样会执行到第三行代码。在这个过程当中，lazeSingleCase对象被创建了两次，违背了单例模式的设计原则。也就是发生了线程不安全的问题。</p>
<p>感兴趣的同学可以去实际的使用两个线程debug一下这段代码。<br>具体的多线程debug应该怎么操作可以参考<a href="https://blog.wrp.cool/posts/29198/">【碎笔02】IDEA多线程调试</a>。</p>
<h2 id="第一次演进：使用-synchronized-关键字解决线程安全的问题。"><a href="#第一次演进：使用-synchronized-关键字解决线程安全的问题。" class="headerlink" title="第一次演进：使用 synchronized 关键字解决线程安全的问题。"></a>第一次演进：使用 synchronized 关键字解决线程安全的问题。</h2><p>具体的 synchronized 关键字的用法可以参考<a href="https://blog.wrp.cool/posts/10492/">【Java并发】Synchronized关键字</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazeSingleInstance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lazeSingleInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">        lazeSingleInstance = <span class="keyword">new</span> <span class="title class_">LazeSingleInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lazeSingleInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 getInstance() 方法上加了 synchronized 关键字之后保证了同一时间内只有一个线程能够执行方法内的代码，这样就解决了上述的线程不安全的问题。</p>
<p>但是 synchronized 关键字是加在 static 修饰的方法上的，这意味着锁住了这个类的class文件，这锁的范围太广了，消耗的资源太多。<br>这显然不是一个好的办法。</p>
<h2 id="第二次演进：将-synchronized-关键字移动至方法内部"><a href="#第二次演进：将-synchronized-关键字移动至方法内部" class="headerlink" title="第二次演进：将 synchronized 关键字移动至方法内部"></a>第二次演进：将 synchronized 关键字移动至方法内部</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LazeSingleInstance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (LazeSingleInstance.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lazeSingleInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            lazeSingleInstance = <span class="keyword">new</span> <span class="title class_">LazeSingleInstance</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lazeSingleInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以类锁的形式将创建单例对象的代码锁起来，这也保证了同一段时间内只有一个线程能够执行到创建对象的代码，也同样能够实现单例模式。<br>比起上面将 synchronized 直接加在方法上还得跟其他的加了 LazeSingleInstance.class 类锁的代码去竞争锁的情况在性能上已经是提升了很多了。</p>
<p><strong>思考一个问题：</strong><br>每个调用 getInstance() 方法的线程都得先等待拿到了锁才能够执行，懒汉式单例模式在仅仅只是在第一次调用这个对象时候才需要去创建这个对象，而现在每次都需要去判断对象是否存在，这显然是不合理的。</p>
<h2 id="第三次演进：双重检查锁"><a href="#第三次演进：双重检查锁" class="headerlink" title="第三次演进：双重检查锁"></a>第三次演进：双重检查锁</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LazeSingleInstance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lazeSingleInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LazeSingleInstance.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lazeSingleInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">                lazeSingleInstance = <span class="keyword">new</span> <span class="title class_">LazeSingleInstance</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lazeSingleInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有兴趣的同学建议先自己分析一下上面的这段代码，这个也是一个比较取巧的一个设计了。</p>
<p>在外面加多一层 if 的判断，这样就不用每次调用 getInstance() 方法就得去等待 synchronized 锁了。<br>至此，双重检查锁也就设计完毕了。</p>
<blockquote>
<p><strong>介绍一个指令重排序的问题</strong><br>jvm 为了能够让 Java 的执行效率能够提高一些，在上面的 new 一个对象的过程，其中的第二步和第三步是有可能会颠倒过来的。也就是先为对象赋上地址值，再初始化这个对象。</p>
<p>看到这里的同学建议思考一个问题：双重检查锁中如果在创建对象的时候发生了指令重排序的问题，可能会导致什么情况。</p>
</blockquote>
<p><strong>答案揭晓：</strong><br>如果是在创建对象的时候先为对象赋上地址值，这个时候对象就已经不是 null 了，那么如果在还没有初始化的情况下，另外一个线程走到了第一个 if 的判断就会直接返回一个还没有初始化的对象。</p>
<h2 id="第四次演进：使用-volatile-关键字"><a href="#第四次演进：使用-volatile-关键字" class="headerlink" title="第四次演进：使用 volatile 关键字"></a>第四次演进：使用 volatile 关键字</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazeSingleInstance lazeSingleInstance;</span><br></pre></td></tr></table></figure>
<p>将这个单例对象使用 volatile 关键字去修饰即可解决指令重排序的问题。具体的 volatile 关键字的作用不久会聊到。<br>在这里先了解到 volatile 关键字可以限制在创建这个对象的时候禁止指令重排序即可。</p>
<h2 id="另外一种解决指令重排序的办法：使用静态内部类实现单例模式"><a href="#另外一种解决指令重排序的办法：使用静态内部类实现单例模式" class="headerlink" title="另外一种解决指令重排序的办法：使用静态内部类实现单例模式"></a>另外一种解决指令重排序的办法：使用静态内部类实现单例模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazeSingleInstance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazeSingleInstance</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">LazeSingleInstance</span> <span class="variable">lazeSingleInstance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LazeSingleInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazeSingleInstance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.lazeSingleInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这其实也是另外的一种实现单例模式的方式。<br>由于Java中每个类对应唯一的Class文件，所以类的静态属性实际上只会随着类的加载而加载，之后就再也不会去创建这个对象了，也就实现了单例模式。<br>Java中类的加载肯定是只有唯一一次的，所以不管在创建这个类的时候有没有发生指令重排序，这个过程对外都是不可见的。也就解决了指令重排序的问题。</p>
<p>上面所说的单例模式都是懒汉式单例模式，可以看到单例对象都是在第一次调用的时候才会去创建的，是一个延迟加载的机制。<br>下面就来讲一下饿汉式单例模式。</p>
<h1 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleInstance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">SingleInstance</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleInstance</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleInstance</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>饿汉式单例模式实现起来也是比较简单，仅需要在类的初始化的时候直接创建单例对象即可。当然私有的构造函数和提供一个对外访问单例对象的接口还是必须要有的。</p>
<hr>
<p><strong>懒汉式和饿汉式的区别和各自的优缺点：</strong></p>
<ol>
<li>饿汉式中不存在线程安全问题，因为饿汉式随着类的加载而创建单例对象。</li>
<li>懒汉式相比与饿汉式更加能够把资源更好的利用起来，如果一个单例对象在一开始就创建出来但是长期不去使用的话，一直驻留在内存中肯定是要比使用到再去创建要耗费掉一些内存空间的。</li>
<li>当然相比之下我感觉使用静态内部类来实现的单例模式是一种比较好的方式。</li>
</ol>
<hr>
<h1 id="通过反射破坏单例模式"><a href="#通过反射破坏单例模式" class="headerlink" title="通过反射破坏单例模式"></a>通过反射破坏单例模式</h1><p>关于一些反射的知识在<a href="https://blog.wrp.cool/posts/25346/">【Java基础】反射</a>这篇文章中已经说的很详细了，这方面不了解的同学可以再补补习。</p>
<blockquote>
<p>具体的反射如何破坏单例模式的代码这里不再去实现，只做一些原理讲解。不管是懒汉式单例模式还是饿汉式单例模式，都必须得要有一个私有的构造方法，这是为了防止从外部直接new出来单例对象。但这怎么说呢，防君子不防小人吧，如果是通过反射的话很容易能够创建一个新的单例对象出来。而懒汉式单例模式对于反射攻击则是完全没有办法防御的，饿汉式单例模式还能够通过在构造方法做一个判断去防止放射攻击。</p>
</blockquote>
<p><strong>演示一下饿汉式单例模式防止反射攻击：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleInstance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SingleInstance</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleInstance</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;禁止使用反射创建对象！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的就是饿汉式防止反射攻击的一种方式，在私有构造方法中判断一下单例对象是否为空，由于饿汉式单例模式是在类加载时直接创建的单例对象，所以一旦通过反射调用私有构造方法的话肯定会抛出异常结束程序运行。</p>
<p>但是没有绝对安全的系统，即使是这样，单例模式还是不够安全的。</p>
<h1 id="使用枚举类防止防止反射攻击"><a href="#使用枚举类防止防止反射攻击" class="headerlink" title="使用枚举类防止防止反射攻击"></a>使用枚举类防止防止反射攻击</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleInstance</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    EnumSingleInstance() &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> EnumSingleInstance.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是通过一个Enum类来实现的单例模式，这也是《Effective Java》这本书中推荐的实现单例的方式。这种实现单例的方式可以有效的防止反射和对象的序列化和反序列化对单例模式造成的破坏。具体的原因呢，笔者现在也还是不大明白，先在这里留个坑吧，以后再补好了。</p>
<p>关于单例模式其实很多学习Java的同学在刚接触Java不久，大概是在学完面向对象之后，应该都会实现一下懒汉式单例模式和饿汉式单例模式。在哪个时候来看单例模式实际上是很简单的一个设计模式，但是单例模式中关于多线程的处理，还有关于Java对象序列化与反序列化的处理，以及如何防止反射破坏单例模式。这些可就一点都不简单了，也说明了越学越深入了吧。</p>
<p>本来还想聊一下单例模式关于Java对象的序列化与反序列化的，但是我自己暂时也还是没学到这一部分，所以呢就也是留个坑在这里吧，等着以后学到了再来补。有兴趣的同学也可以点击文末的“欢迎打扰”一起交流学习。</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
        <tag>创建型</tag>
        <tag>单例模式</tag>
        <tag>懒汉式单例模式</tag>
        <tag>饿汉式单例模式</tag>
        <tag>双重检查锁</tag>
        <tag>指令重排序</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/posts/25434/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先来看一下百度百科关于建造者模式的描述。（<a href="https://baike.baidu.com/item/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/3229729?fr=aladdin">建造者模式，百度百科</a>）</p>
<p><strong>实用范围：</strong><br>1、当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。<br>2、当构造过程必须允许被构造的对象有不同表示时。</p>
<p><strong>建造者模式中的4个角色：</strong><br>1、Builder：为创建一个产品对象的各个部件指定抽象接口。<br>2、ConcreteBuilder：实现Builder的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，并提供一个检索产品的接口。<br>3、Director：构造一个使用Builder接口的对象。<br>4、Product：表示被构造的复杂对象。ConcreteBuilder创建该产品的内部表示并定义它的装配过程，包含定义组成部件的类，包括将这些部件装配成最终产品的接口。</p>
<hr>
<blockquote>
<p>以上是百度百科中关于建造者模式的一些描述，下面说一些我自己的理解。</p>
</blockquote>
<span id="more"></span>

<p><strong>实用范围：</strong><br>1、创建对象部分的代码必须与使用到这个对象的代码解耦。<br>2、一个对象必须有多种不同的装配方式，这不仅仅是简单的参数不同。</p>
<p><strong>建造者模式中的4个角色：</strong><br>1、Product（产品）：要创建的对象，是一个具体的实体类。<br>2、Builder（建造者）：根据创建对象的过程实际抽象出来的接口。<br>3、ConcreteBuilder（具体建造者）：实现builder接口，实际创建对象的类。<br>4、Director（导演）：在完成上面的三个对象的工作之后交由Director类来创建对象，由此达到创建对象的过程与实际使用对象的代码解耦的目的。</p>
<h1 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h1><p>这里实际以创建一个手机对象为例子来用代码描述一下建造者模式</p>
<p><strong>手机类</strong>，对应的是Product角色：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123; <span class="built_in">this</span>.brand = brand; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum</span><span class="params">(String num)</span> &#123; <span class="built_in">this</span>.num = num; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> brand + <span class="string">&quot;Phone&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, num=&#x27;&quot;</span> + num + <span class="string">&quot;&#x27;&#125;&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>由创建手机的过程抽象出来的抽象类</strong>，对应的是Builder角色：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PhoneBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">builderPhoneName</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">builderPhoneNum</span><span class="params">(String num)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Phone <span class="title function_">makePhone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>两个实际创建手机类的创建者</strong>，分别创建华为手机和小米手机，对应的是ConcreteBuilder角色：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HUAWEIPhoneBuilder</span> <span class="keyword">extends</span> <span class="title class_">PhoneBuilder</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HUAWEIPhoneBuilder</span><span class="params">()</span> &#123; <span class="built_in">this</span>.phone.setBrand(<span class="string">&quot;HUAWEI&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">builderPhoneName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.phone.setName(name); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">builderPhoneNum</span><span class="params">(String num)</span> &#123; <span class="built_in">this</span>.phone.setNum(num); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">makePhone</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.phone; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MIPhoneBuilder</span> <span class="keyword">extends</span> <span class="title class_">PhoneBuilder</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MIPhoneBuilder</span><span class="params">()</span> &#123; <span class="built_in">this</span>.phone.setBrand(<span class="string">&quot;MI&quot;</span>); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">builderPhoneName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.phone.setName(name); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">builderPhoneNum</span><span class="params">(String num)</span> &#123; <span class="built_in">this</span>.phone.setNum(num); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">makePhone</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.phone; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>创建手机的类</strong>，对应的是Director角色：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneDirector</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PhoneBuilder phoneBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PhoneDirector</span><span class="params">(PhoneBuilder phoneBuilder)</span> &#123; <span class="built_in">this</span>.phoneBuilder = phoneBuilder; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">makePhone</span><span class="params">(String name, String num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phoneBuilder.builderPhoneName(name);</span><br><span class="line">        <span class="built_in">this</span>.phoneBuilder.builderPhoneNum(num);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.phoneBuilder.makePhone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>以上准备工作完成，接下来测试一下效果怎么样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PhoneDirector</span> <span class="variable">HUAWEIDirector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneDirector</span>(<span class="keyword">new</span> <span class="title class_">HUAWEIPhoneBuilder</span>());</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">HUAWEIPhone</span> <span class="operator">=</span> HUAWEIDirector.makePhone(<span class="string">&quot;P30&quot;</span>, <span class="string">&quot;135 0000 0000&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PhoneDirector</span> <span class="variable">MIDirector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneDirector</span>(<span class="keyword">new</span> <span class="title class_">MIPhoneBuilder</span>());</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">MIPhone</span> <span class="operator">=</span> MIDirector.makePhone(<span class="string">&quot;MI11&quot;</span>, <span class="string">&quot;135 1111 1111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(HUAWEIPhone);</span><br><span class="line">        System.out.println(MIPhone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HUAWEIPhone&#123;name=&#x27;P30&#x27;, num=&#x27;135 0000 0000&#x27;&#125;</span><br><span class="line">MIPhone&#123;name=&#x27;MI11&#x27;, num=&#x27;135 1111 1111&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>类图：</strong>（为了能够更好的看清楚这个结构，这个类图中省略了小米手机类）<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210418103856.png" alt="20210418103856"></p>
<p><strong>小结：</strong>（以下两个小点分别对应百度百科实用范围中的两个小点）</p>
<ol>
<li>测试类在使用手机对象时完全没有涉及到创建手机的过程，将创建手机过程与测试类的使用是解耦的。</li>
<li>如果我们需要的对象是一个其他的表示的话，比如我们需要把华为手机换成小米手机，只需要把HUAWEIPhoneBuilder换成MIPhoneBuilder即可。</li>
</ol>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>思考一个问题：如果实际开发中不需要将创建对象的代码与实际使用这个对象的代码分离开呢？也就是仅仅只是需要有多种不同的装配对象的方式。</p>
<p>还是上面的这个例子，将创建对象的逻辑与对象本身绑定在一起，仅仅只剩下一个Product角色。<br>这里假设只是需要一个华为手机。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(HUAWEIPhoneBuilder huaweiPhoneBuilder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = huaweiPhoneBuilder.brand;</span><br><span class="line">        <span class="built_in">this</span>.name = huaweiPhoneBuilder.name;</span><br><span class="line">        <span class="built_in">this</span>.num = huaweiPhoneBuilder.num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> brand + <span class="string">&quot;Phone&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, num=&#x27;&quot;</span> + num + <span class="string">&quot;&#x27;&#125;&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原来的 ConcreteBuilder 具体创建者角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HUAWEIPhoneBuilder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String brand;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String num;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认创建的手机品牌</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">HUAWEIPhoneBuilder</span><span class="params">()</span> &#123; <span class="built_in">this</span>.brand = <span class="string">&quot;HUAWEI&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> HUAWEIPhoneBuilder <span class="title function_">buildName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> HUAWEIPhoneBuilder <span class="title function_">buildNum</span><span class="params">(String num)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.num = num;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Phone <span class="title function_">build</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="built_in">this</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">HUAWEIPhone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>.HUAWEIPhoneBuilder().buildName(<span class="string">&quot;P30&quot;</span>).buildNum(<span class="string">&quot;135 0000 0000&quot;</span>).build();</span><br><span class="line">        System.out.println(HUAWEIPhone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HUAWEIPhone&#123;name=&#x27;P30&#x27;, num=&#x27;135 0000 0000&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>类图：</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210418105741.png" alt="20210418105741"></p>
<p><strong>小结：</strong></p>
<ol>
<li>将创建对象的过程与这个对象绑定在一起，以一种链式调用的方式来解决在不同的业务场景下同一个对象的不同的装配方式。</li>
<li>但同时使用这个对象的代码与创建对象的代码也就耦合了。</li>
</ol>
<hr>
<p>上面只需创建华为手机的例子仅仅只是对于前面的一个扩展，这并不能够很好的帮助我们理解什么是对象的不同装配方式，以及如何去使用。<br>下面举一个更加形象的例子来帮助大家去理解建造者模式，比如我现在需要一个只有加法和减法的计算器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> result;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getResult</span><span class="params">()</span> &#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入基础操作数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calculator</span><span class="params">(<span class="type">int</span> result)</span> &#123; <span class="built_in">this</span>.result = result; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Calculator <span class="title function_">add</span><span class="params">(<span class="type">int</span> addNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result += addNum;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Calculator <span class="title function_">sub</span><span class="params">(<span class="type">int</span> subNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result -= subNum;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>(<span class="number">10</span>).add(<span class="number">10</span>).sub(<span class="number">5</span>).getResult();</span><br><span class="line">        System.out.println(<span class="string">&quot;result：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result：15</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
        <tag>创建型</tag>
        <tag>建造者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】反射</title>
    <url>/posts/25346/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先来看一下百度百科中对于Java反射的定义，<a href="https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990?fr=aladdin">JAVA反射机制，百度百科</a></p>
<blockquote>
<p>Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。反射被视为动态语言的关键。</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>Java反射机制主要提供了以下功能： 在运行时判断任意一个对象所属的类；在运行时构造任意一个类的对象；在运行时判断任意一个类所具有的成员变量和方法；在运行时调用任意一个对象的方法；生成动态代理。</p>
</blockquote>
<blockquote>
<p>有时候我们说某个语言具有很强的动态性，有时候我们会区分动态和静态的不同技术与作法。我们朗朗上口动态绑定（dynamic binding）、动态链接（dynamic linking）、动态加载（dynamic loading）等。然而“动态”一词其实没有绝对而普遍适用的严格定义，有时候甚至像面向对象当初被导入编程领域一样，一人一把号，各吹各的调。</p>
</blockquote>
<blockquote>
<p>一般而言，开发者社群说到动态语言，大致认同的一个定义是：“程序运行时，允许改变程序结构或变量类型，这种语言称为动态语言”。从这个观点看，Perl，Python，Ruby是动态语言，C++，Java，C#不是动态语言。</p>
</blockquote>
<blockquote>
<p>尽管在这样的定义与分类下Java不是动态语言，它却有着一个非常突出的动态相关机制：Reflection。这个字的意思是“反射、映象、倒影”，用在Java身上指的是我们可以于运行时加载、探知、使用编译期间完全未知的classes。换句话说，Java程序可以加载一个运行时才得知名称的class，获悉其完整构造（但不包括methods定义），并生成其对象实体、或对其fields设值、或唤起其methods。这种“看透class”的能力（the ability of the program to examine itself）被称为introspection（内省、内观、反省）。Reflection和introspection是常被并提的两个术语。</p>
</blockquote>
<p>上面这几段话出自百度百科，由此可以看出，Java反射机制的重要性。由于反射机制的存在使得Java语言变身成为一门准动态语言。很多主流框架中也是大量的使用了反射技术，像是我们说的Spring就是基于反射 + 配置 + 工厂的形式实现的。</p>
<h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>想要了解反射机制，首先来了解一个类<code>java.lang.Class</code>反射机制中最重要的一个类，Class类（描述类的类）。</p>
<p><strong>Java中的类：</strong>可以继承某个类，可以实现某一些接口，可以在类中定义类的属性，方法，和构造器。</p>
<p>由此，Class类（描述类的类）主要就是描述了类继承了哪个父类，实现了那些接口，定义了那些方法和属性，以及类中的构造器。</p>
<p><strong>小结：</strong>类的声明、类中的属性和方法、类的构造器是 <code>Class</code> 类主要的描述对象。</p>
<hr>
<p>既然Class类是描述类的类，那么就表明了Class类也是一个Java类，也必须遵守Java中关于类的规范，这一点不会变。</p>
<p>来分析一下Class类，首先看一下构造函数。<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200921203210.png" alt="20200921203210"><br>这是jdk1.8中Class类的构造函数，这是一个私有化的构造函数，意味着在外界是不能直接创建Class类的实例的。</p>
<p>实际上，Class类的实例也并不是创建出来的，Class类的实例是JVM在加载每个class字节码文件时自动生成的实例。</p>
<p>每个Class类对应的都是被JVM所加载的一个个class文件，相同的，每个class文件也都有一个唯一与之对应的Class实例。</p>
<h1 id="如何获取Class类的实例"><a href="#如何获取Class类的实例" class="headerlink" title="如何获取Class类的实例"></a>如何获取Class类的实例</h1><p>这里将通过一个User类来演示四种获取Class实例的方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.wrp.reflex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 1.类名.class</span></span><br><span class="line">        Class&lt;User&gt; userClass1 = User.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.实例.getClass()</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">userClass2</span> <span class="operator">=</span> user.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.Class.forName(&quot;全限定类名&quot;)</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">userClass3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;cool.wrp.reflex.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> user.getClass().getClassLoader();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">userClass4</span>  <span class="operator">=</span> classLoader.loadClass(<span class="string">&quot;cool.wrp.reflex.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(userClass1.hashCode());</span><br><span class="line">        System.out.println(userClass2.hashCode());</span><br><span class="line">        System.out.println(userClass3.hashCode());</span><br><span class="line">        System.out.println(userClass4.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行main方法可以发现，四个Class实例的hashCode都是相同的，这证明了每个class字节码文件都有且仅有唯一一个与之对应的Class实例。</p>
<p>以上的四种方式，我们在实际开发中应该尽可能的使用第一种方式去获得Class类的实例，因为这种方式的效率是最高的。</p>
<h1 id="Class类是怎么描述类的"><a href="#Class类是怎么描述类的" class="headerlink" title="Class类是怎么描述类的"></a>Class类是怎么描述类的</h1><p style="text-indent:2em">
在这里引用 <b>Java核心技术卷一 5.7.4</b> 中的内容来讲述Class类是怎么描述类的。
</p>

<p style="text-indent:2em">
在 java.lang.reflect 包中有三个类 Firld、Method 和 Construct 分别用于描述类的字段、方法和构造器。这三个类都有一个叫做 getName 的方法，用来返回字段、方法或构造器的名称。Field 类还有一个 getType 方法，用来描述字段类型的一个对象，这个对象的类型同样是Class。Method 和 Constructor 类有报告参数类型的方法，Method类还有一个报告返回类型的方法。这三个类都有一个名为 getModifiers 的方法，它将返回一个整数， 用不同 0/1 位描述所使用的修饰符，如 public 和 static。另外，还可以利用 java.lang.refkect 包中的 Modifier 类的静态方法分析 getModifiers 返回的这个整数，例如，可以使用 Modifier 类中的 isPublic、isPrivate 或 isFinal 判断方法或构造器是 public、private 还是 final。我们需要做的就是在 getModifiers 返回的整数上调用 Modifier 类中适当的方法，另外，还可以利用 Modifier.toString 方法将修饰符打印出来。
</p>

<p style="text-indent:2em">
Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回这个类支持的 <b>公共</b> 字段、方法和构造器的数组，其中包括超类的公共成员。Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstrors方法将分别返回类中声明的全部字段、方法和构造器的数组，其中包括私有成员、包成员和受保护成员，但不包括超类的成员。
</p>

<hr>
<p><strong>来看一个书中的例子加深对这段话的理解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read class name from user input</span></span><br><span class="line">    System.out.println(<span class="string">&quot;class name:&quot;</span>);</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print class name and super class name (if != Object)</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">supercl</span> <span class="operator">=</span> cl.getSuperclass();</span><br><span class="line">    <span class="type">String</span> <span class="variable">modifiers</span> <span class="operator">=</span> Modifier.toString(cl.getModifiers());</span><br><span class="line">    <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>)</span><br><span class="line">        System.out.print(modifiers + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;class &quot;</span> + className);</span><br><span class="line">    <span class="keyword">if</span> (supercl != <span class="literal">null</span> &amp;&amp; supercl != Object.class)</span><br><span class="line">        System.out.print(<span class="string">&quot; extends &quot;</span> + supercl.getName());</span><br><span class="line"></span><br><span class="line">    System.out.print(<span class="string">&quot;\n&#123;\n&quot;</span>);</span><br><span class="line">    printConstructors(cl);</span><br><span class="line">    System.out.println();</span><br><span class="line">    printMethods(cl);</span><br><span class="line">    System.out.println();</span><br><span class="line">    printFields(cl);</span><br><span class="line">    System.out.println(<span class="string">&quot;\n&#125;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单分析一下以上的代码，首先是一个接收用户在控制台的输入，通过scanner对象读取用户从控制台输入的一个全限定类名。之后通过 Class.forName 的形式去获取到用户输入类名对应的Class类对象。获取到Class对象之后再去获取父类和修饰符。</p>
<p>如果需要判断类使用了什么修饰符可以使用 <code>Modifier.isPublic(cl.getModifiers())</code> 来判断类是否被 public 所修饰。以此类推，判断是否被 private 所修饰则使用 <code>isPrivate</code>，是否 final 则 <code>isFinal</code>等等。</p>
<p>另外可以使用 <code>getInterfaces()</code> 方法去获取到一个类所实现的接口有哪些。由于Java是支持多实现的，所以该方法实际上返回的是一个泛型为Class类型的数组，用来描述类所实现的接口。</p>
<blockquote>
<p>以上是Class对象如何描述一个Java类声明的内容，接下来分析Class对象是如何去描述类的构造器、方法和属性的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prints all constructors of a class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printConstructors</span><span class="params">(Class cl)</span> &#123;</span><br><span class="line">    Constructor[] constructors = cl.getDeclaredConstructors();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Constructor c : constructors) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> c.getName();</span><br><span class="line">        System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">modifiers</span> <span class="operator">=</span> Modifier.toString(c.getModifiers());</span><br><span class="line">        <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.print(name + <span class="string">&quot;(&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print parameter type</span></span><br><span class="line">        Class[] paramTypes = c.getParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; paramTypes.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>) System.out.print(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            System.out.print(paramTypes[j].getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prints all method of a class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMethods</span><span class="params">(Class cl)</span> &#123;</span><br><span class="line">    Method[] methods = cl.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">retType</span> <span class="operator">=</span> m.getReturnType();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> m.getName();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="comment">// print modifiers, return type and method name</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">modifiers</span> <span class="operator">=</span> Modifier.toString(m.getModifiers());</span><br><span class="line">        <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.print(retType.getName() + <span class="string">&quot; &quot;</span> + name + <span class="string">&quot;(&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print parameter types</span></span><br><span class="line">        Class[] paramTypes = m.getParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; paramTypes.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>) System.out.print(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            System.out.print(paramTypes[j].getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prints all fields of a class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printFields</span><span class="params">(Class cl)</span> &#123;</span><br><span class="line">    Field[] fields = cl.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> f.getType();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> f.getName();</span><br><span class="line">        System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">modifiers</span> <span class="operator">=</span> Modifier.toString(f.getModifiers());</span><br><span class="line">        <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println(type.getName() + <span class="string">&quot; &quot;</span> + name + <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有兴趣的同学可以执行一遍以上的代码，可以更清楚的展示Class对象是如何去描述一个类的。</p>
<hr>
<p>书中的这个例子已经是很详细的讲明白了Class类是如何去描述一个类的，但这里还有一点补充，就是<strong>Class类是如何去描述类中的注解的</strong>。</p>
<p>我们使用 <a href="https://blog.wrp.cool/posts/28807/">【Java基础】</a> 注解一文开头的注解例子做演示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(value = &quot;MyAnnotation&#x27;s value&quot;, name = &quot;MyAnnotation&#x27;s name&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TargetClass</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mainn</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; cl = TargetClass.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取注解对象</span></span><br><span class="line">        <span class="type">MyAnnotation</span> <span class="variable">myAnnotation</span> <span class="operator">=</span> cl.getAnnotation(MyAnnotation.class);</span><br><span class="line">        <span class="comment">// 打印注解中的内容</span></span><br><span class="line">        System.out.println(myAnnotation.value());</span><br><span class="line">        System.out.println(myAnnotation.name());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行main方法：<br><code>MyAnnotation&#39;s value</code><br><code>MyAnnotation&#39;s name</code></p>
</blockquote>
<blockquote>
<p>同样的 <code>Constructor、Method、Field</code> 对象也有 <code>getAnnotation</code> 方法。</p>
</blockquote>
<h1 id="Class类是怎么操作类的"><a href="#Class类是怎么操作类的" class="headerlink" title="Class类是怎么操作类的"></a>Class类是怎么操作类的</h1><p>操作类也是分别对应着Java中对类的操作，首先是类的实例化，然后可以<strong>设置类的属性、获取类的属性、调用类的方法</strong>。而属性和方法又分为<strong>公共、私有和静态</strong></p>
<h3 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h3><p>通过反射实例化的类也是需要调用构造器的，构造方法分为有参构造器和无参构造器。</p>
<p>使用反射实例化一个类有两种方式，一个是调用<strong>Class对象的newInstance()方法</strong>，另一个是调用<strong>Constructor对象的newInstance()方法</strong>。</p>
<p><strong>实验环境</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TargetClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TargetClass</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TargetClass</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Class 对象的 newInstance() 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TargetClass.class.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;main方法运行完毕&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>运行main方法抛出空指针异常</code></p>
<p><strong>Constructor 对象的 newInstance() 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; cl = TargetClass.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造器</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        cl.getDeclaredConstructor().newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造器</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        cl.getDeclaredConstructor(String.class).newInstance(<span class="string">&quot;我是有参构造器实例化的对象&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;main方法运行完毕&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行main方法<br><code>抛出由java.lang.NullPointerException引起的java.lang.reflect.InvocationTargetException</code><br>打印：<code>我是有参构造器实例化的对象</code><br>打印：<code>main方法运行完毕</code></p>
</blockquote>
<p><strong>小结：</strong></p>
<ol>
<li><strong>Class 对象的 newInstance() 方法</strong>无法调用有参构造函数，只能调用无参构造器</li>
<li><strong>Class 对象的 newInstance() 方法</strong>无法捕获构造器中的异常，而<strong>Constructor 对象的 newInstance() 方法</strong>会将构造器中的异常封装成 <code>java.lang.reflect.InvocationTargetException</code> 异常</li>
<li>建议使用<strong>Constructor 对象的 newInstance() 方法</strong></li>
</ol>
<hr>
<blockquote>
<p>在这里首先引入一个简单的概念，<strong>显示参数</strong>和<strong>隐式参数</strong>。在这里先简单的理解为调用属性的对象。</p>
</blockquote>
<p><strong>显示参数：</strong>在方法中明确定义的参数为显示参数</p>
<p><strong>隐式参数：</strong>未在方法是定义的，但的确又动态影响到程序运行的“参数”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如以上代码 <code>user</code> 对象为隐式参数，实际传入的 <code>&quot;张三&quot;</code> 字符串为显示参数。</p>
<hr>
<h3 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h3><p><strong>实验环境</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TargetClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String pubAttr;</span><br><span class="line">    <span class="keyword">static</span> String staAttr;</span><br><span class="line">    <span class="keyword">private</span> String priAttr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; cl = TargetClass.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化一个对象作为隐式参数</span></span><br><span class="line">        <span class="type">TargetClass</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetClass</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">pubAttr</span> <span class="operator">=</span> cl.getDeclaredField(<span class="string">&quot;pubAttr&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">staAttr</span> <span class="operator">=</span> cl.getDeclaredField(<span class="string">&quot;staAttr&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">priAttr</span> <span class="operator">=</span> cl.getDeclaredField(<span class="string">&quot;priAttr&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>公共属性</strong></p>
<blockquote>
<p>实际上，Java中的非静态属性都是挂载在对应的对象上的。反射也没有例外，所以我们如果想要通过反射去操作一个属性，我们同样是需要给这个属性一个可以挂载的地方，也就是一个对象，这个对象也就是前文提到的隐式参数。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置公共属性的值</span></span><br><span class="line">pubAttr.set(tc, <span class="string">&quot;我是公共属性&quot;</span>);</span><br><span class="line"><span class="comment">// 获取公共属性的值</span></span><br><span class="line">System.out.println(pubAttr.get(tc));</span><br></pre></td></tr></table></figure>
<p><code>输出：我是公共属性</code></p>
<p>上面的两行代码中的tc就是对应的对象挂载的地方。在这里我将其理解为pubAttr属性的隐式参数。</p>
<p><strong>静态属性</strong></p>
<blockquote>
<p>刚刚说的Java中的非静态属性都是挂载在对象上的，而静态属性与Class对象一样是存储在方法区中的。所以不需要挂载的对象，在传参数的时候直接传一个null对象即可。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置静态属性的值</span></span><br><span class="line">staAttr.set(<span class="literal">null</span>, <span class="string">&quot;我是静态属性&quot;</span>);</span><br><span class="line"><span class="comment">// 获取静态属性的值</span></span><br><span class="line">System.out.println(staAttr.get(<span class="literal">null</span>));</span><br></pre></td></tr></table></figure>
<p><code>输出：我是静态属性</code></p>
<p><strong>私有属性</strong></p>
<blockquote>
<p>Java中类的私有属性是无法通过外部去设置和获取的，而反射可以改变这一点，这同时也正是反射的强大之处。只需要一行代码设置访问权限即可访问类的私有属性。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 授权访问</span></span><br><span class="line">priAttr.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 设置私有属性的值</span></span><br><span class="line">priAttr.set(tc, <span class="string">&quot;我是私有属性&quot;</span>);</span><br><span class="line"><span class="comment">// 获取私有属性的值</span></span><br><span class="line">System.out.println(priAttr.get(tc));</span><br></pre></td></tr></table></figure>
<p><code>输出：我是私有属性</code></p>
<h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p>操作方法和操作属性实际上差不多，也都分共有、私有、静态方法。不同的是，在获取Method对象时需要指定参数列表，执行Method方法时也需要传入对应方法的参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TargetClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pubMethod</span><span class="params">(String name)</span> &#123; System.out.println(<span class="string">&quot;我是&quot;</span> + name); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staMethod</span><span class="params">(String name)</span> &#123; System.out.println(<span class="string">&quot;我是&quot;</span> + name); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">priMethod</span><span class="params">(String name)</span> &#123; System.out.println(<span class="string">&quot;我是&quot;</span> + name); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflex</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        Class&lt;?&gt; cl = TargetClass.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">TargetClass</span> <span class="variable">tc</span> <span class="operator">=</span> (TargetClass) cl.newInstance();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取公共方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">pubMethod</span> <span class="operator">=</span> cl.getDeclaredMethod(<span class="string">&quot;pubMethod&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 执行公共方法</span></span><br><span class="line">        pubMethod.invoke(tc, <span class="string">&quot;公共方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取静态方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">staMethod</span> <span class="operator">=</span> cl.getDeclaredMethod(<span class="string">&quot;staMethod&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 执行静态方法</span></span><br><span class="line">        staMethod.invoke(<span class="literal">null</span>, <span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取私有方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">priMethod</span> <span class="operator">=</span> cl.getDeclaredMethod(<span class="string">&quot;priMethod&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 私有方法授权</span></span><br><span class="line">        priMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 执行私有方法</span></span><br><span class="line">        priMethod.invoke(tc, <span class="string">&quot;私有方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】注解</title>
    <url>/posts/28807/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;我的注解&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;name&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是Java自定义注解的格式，其中的四个注解就是元注解，也就是我们接下注解部分来的重点。</p>
<span id="more"></span>

<h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><p>普通的注解就是用来修饰例如变量、方法和类的。而元注解是用来修饰注解的，是修饰注解的注解。下面的四个注解就是元注解。</p>
<p><strong>@Target</strong><br>目标的意思，表示的是注解可以修饰的目标。参数是一个<code>java.lang.annotation.ElementType</code>类型的数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;</span></span><br><span class="line"><span class="meta">        ElementType.TYPE,               // 类、接口、枚举类</span></span><br><span class="line"><span class="meta">        ElementType.FIELD,              // 成员变量、枚举常量</span></span><br><span class="line"><span class="meta">        ElementType.METHOD,             // 成员方法</span></span><br><span class="line"><span class="meta">        ElementType.PARAMETER,          // 方法参数</span></span><br><span class="line"><span class="meta">        ElementType.CONSTRUCTOR,        // 构造方法</span></span><br><span class="line"><span class="meta">        ElementType.LOCAL_VARIABLE,     // 局部变量</span></span><br><span class="line"><span class="meta">        ElementType.ANNOTATION_TYPE,    // 注解类</span></span><br><span class="line"><span class="meta">        ElementType.PACKAGE,            // 包</span></span><br><span class="line"><span class="meta">        ElementType.TYPE_PARAMETER,     // 类型参数，jdk1.8新增</span></span><br><span class="line"><span class="meta">        ElementType.TYPE_USE            // 使用类型的任何地方，jdk1.8新增</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Retention</strong><br>有点类似于生命周期的意思，表示的是注解在程序中作用的范围，参数是<code>java.lang.annotation.RetentionPolicy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span>      <span class="comment">// 源文件保留</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span>       <span class="comment">// 编译后保留</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>     <span class="comment">// 运行时保留</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Inherited</strong><br>Inherited注解的作用是：使被它修饰的注解具有继承性（如果某个类使用了被@Inherited修饰的注解，则其子类将自动具有该注解）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyInheritedAnnotation &#123; </span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyInheritedAnnotation(name=&quot;parent&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Class&lt;Child&gt; child = Child.class;</span><br><span class="line">		<span class="type">MyInheritedAnnotation</span> <span class="variable">annotation</span> <span class="operator">=</span> child.getAnnotation(MyInheritedAnnotation.class);</span><br><span class="line">		System.out.println(annotation.name());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行main方法打印结果：<code>parent</code></p>
<p><strong>@Documented</strong><br>Documented注解的作用是：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。</p>
<blockquote>
<p>以上内容参考：<a href="https://blog.csdn.net/pengjunlee/article/details/79683621#meta-annotation%EF%BC%88%E5%85%83%E6%B3%A8%E8%A7%A3%EF%BC%89">JAVA核心知识点–元注解详解</a></p>
</blockquote>
<p><strong>彩蛋：</strong><br>将名称定义成value的值在使用时是可以省略value属性不写的。<br>例如上面定义的<code>MyAnnotation</code>注解，在设置值时<code>value</code>属性是可以省略属性名称的，而<code>name</code>属性则不可以省略属性名称。</p>
<p><code>@MyAnnotation(&quot;value&quot;)</code> 表示指定了value的值<br><code>@MyAnnotation(name = &quot;name&quot;)</code> 表示指定了name的值<br><code>@MyAnnotation(value = &quot;value&quot;, name = &quot;name&quot;)</code> 表示指定了value和name的值，如果指定了多个值则属性名不可以省略</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>元注解</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring】依赖注入</title>
    <url>/posts/47506/</url>
    <content><![CDATA[<p><em>依赖注入（Dependency Injection简称DI）</em><br><strong>依赖：</strong>指Bean对象的创建依赖于IOC容器，Bean对象的依赖资源。<br><strong>注入：</strong>指Bean对象所依赖的资源，由容器来设置和装配。</p>
<span id="more"></span>

<h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><p>构造器注入这里与上文<a href="http://blog.wrp.cool/posts/17371/">【Spring】创建对象</a> 中「通过构造方法创建对象」相同，这里不再赘述。</p>
<h3 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h3><h4 id="基本数据类型和字符串注入"><a href="#基本数据类型和字符串注入" class="headerlink" title="基本数据类型和字符串注入"></a>基本数据类型和字符串注入</h4><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200831232348.png" alt="20200831232348"></p>
<h4 id="java-util-Properties类注入"><a href="#java-util-Properties类注入" class="headerlink" title="java.util.Properties类注入"></a>java.util.Properties类注入</h4><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200831232859.png" alt="20200831232859"></p>
<h4 id="注入Bean"><a href="#注入Bean" class="headerlink" title="注入Bean"></a>注入Bean</h4><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200901203712.png" alt="20200901203712"></p>
<blockquote>
<p>注意上面加了颜色的这句话<code>但是销毁回调允许它参与请求作用域的生命周期。</code><br>这句话的意思是，当Bean被销毁时，这个Bean所注入的其他的Bean并不会被一同销毁，也就是会继续驻留在内存中。如果我们要销毁这个Bean，需要进一步的销毁操作。差不多就像是闭包的意思。</p>
</blockquote>
<h4 id="集合类型的注入"><a href="#集合类型的注入" class="headerlink" title="集合类型的注入"></a>集合类型的注入</h4><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200901205115.png" alt="20200901205115"></p>
<h4 id="注入空字符串"><a href="#注入空字符串" class="headerlink" title="注入空字符串"></a>注入空字符串</h4><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200901214249.png" alt="20200901214249"></p>
<h4 id="注入null"><a href="#注入null" class="headerlink" title="注入null"></a>注入null</h4><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200901214315.png" alt="20200901214315"></p>
<h3 id="p名称空间注入"><a href="#p名称空间注入" class="headerlink" title="p名称空间注入"></a>p名称空间注入</h3><h4 id="普通属性"><a href="#普通属性" class="headerlink" title="普通属性"></a>普通属性</h4><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200901214537.png" alt="20200901214537"></p>
<h4 id="其他bean引用"><a href="#其他bean引用" class="headerlink" title="其他bean引用"></a>其他bean引用</h4><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200901214554.png" alt="20200901214554"></p>
<h3 id="c名称空间注入"><a href="#c名称空间注入" class="headerlink" title="c名称空间注入"></a>c名称空间注入</h3><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200901214656.png" alt="20200901214656"></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>DI</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring】创建对象</title>
    <url>/posts/17371/</url>
    <content><![CDATA[<p>上一篇文章 <a href="http://blog.wrp.cool/posts/5741/">【Spring】IOC推导</a> 讲到了Spring会帮我们创建好对象存在IOC容器中，当需要使用的时候只需要去IOC容器中取即可。<br>这篇文章就说一下Spring中创建对象的几种方式。</p>
<span id="more"></span>

<h1 id="通过构造方法创建对象"><a href="#通过构造方法创建对象" class="headerlink" title="通过构造方法创建对象"></a>通过构造方法创建对象</h1><p>通过构造方法创建对象是Spring中最普通的一种创建对象的方式了，通过调用类的构造方法去创建这个对象。这种方式创建对象只需要在配置文件中配置即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认调用无参构造 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cool.wrp.ioc.User&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下标的形式调用有参构造 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cool.wrp.ioc.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;user2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 参数类型调用有参构造 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cool.wrp.ioc.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;user3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 参数名调用有参构造 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cool.wrp.ioc.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;user4&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="通过静态工厂方法创建对象"><a href="#通过静态工厂方法创建对象" class="headerlink" title="通过静态工厂方法创建对象"></a>通过静态工厂方法创建对象</h1><p>自己编写一个创造类的静态工厂类，然后将这个静态工厂类注册到Spring中去，再告诉Spring要通过这其中的哪个静态方法去创建我们想要的对象，这样子Spring就可以根据我们想要的方式去创建对象了。<br>这样一来是以自己定义的工厂去创建我们想要的类，我们可以在这个类创建类的方法中自由控制创建流程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 教师类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 此处由于篇幅限制省略全参构造方法和toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 此处由于篇幅限制省略全参构造方法和toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Teacher类的静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Teacher <span class="title function_">getTeacherInstance</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">// 针对创建Teacher类的扩展</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Student类的静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Student <span class="title function_">getStudentInstance</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">// 针对创建Student类的扩展</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 教师类的工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cool.wrp.createObject.PersonFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getTeacherInstance&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 学生类的工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cool.wrp.createObject.PersonFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getStudentInstance&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过静态工厂创建Teacher类</span></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;teacherFactory&quot;</span>, Teacher.class);</span><br><span class="line">        System.out.println(teacher);</span><br><span class="line">        <span class="comment">// 通过静态工厂创建Student类</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;studentFactory&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>运行测试类，成功输出</code></p>
<h1 id="使用实例工厂方法实例化"><a href="#使用实例工厂方法实例化" class="headerlink" title="使用实例工厂方法实例化"></a>使用实例工厂方法实例化</h1><p>实例工厂相比起静态工厂就是工厂类中创建对象的方法不是静态的，只是普通的成员方法。这样子不能直接调用创建类的静态方法，就必须要在配置文件中注册一下工厂类然后再通过工厂类去调用工厂创建对象的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 教师类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 此处由于篇幅限制省略全参构造方法和toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 此处由于篇幅限制省略全参构造方法和toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Teacher类的静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Teacher <span class="title function_">getTeacherInstance</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Student类的静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getStudentInstance</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 教师类的工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherFactory&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;personFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getTeacherInstance&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 学生类的工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFactory&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;personFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getStudentInstance&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册工厂类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;personFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cool.wrp.createObject.PersonFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过静态工厂创建Teacher类</span></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;teacherFactory&quot;</span>, Teacher.class);</span><br><span class="line">        System.out.println(teacher);</span><br><span class="line">        <span class="comment">// 通过静态工厂创建Student类</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;studentFactory&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>运行测试类，成功输出</code></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IOC</tag>
        <tag>创建对象</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring】Bean的自动装配</title>
    <url>/posts/43228/</url>
    <content><![CDATA[<p>自动装配是使用spring满足bean依赖的一种方法<br>spring会在应用上下文中为某个bean寻找其依赖的bean。<br><em>以上内容出自b站（<a href="https://www.bilibili.com/video/BV1WE411d7Dv?p=3">狂神说Java</a>）</em></p>
<span id="more"></span>

<p><strong>实验环境搭建</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宠物猫和宠物狗类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;吃鱼&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;吃骨头&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person类，拥有Cat和Dog</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;    </span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">getCat</span><span class="params">()</span> &#123; <span class="keyword">return</span> cat; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCat</span><span class="params">(Cat cat)</span> &#123; <span class="built_in">this</span>.cat = cat; &#125;</span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123; <span class="keyword">return</span> dog; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123; <span class="built_in">this</span>.dog = dog; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;person&quot;</span>, Person.class);</span><br><span class="line">        person.getCat().eat();</span><br><span class="line">        person.getDog().eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="配置文件方式自动装配"><a href="#配置文件方式自动装配" class="headerlink" title="配置文件方式自动装配"></a>配置文件方式自动装配</h1><h4 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处使用byName方式自动注入依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>运行测试类成功输出</code></p>
<p><strong>小结：</strong></p>
<ol>
<li>将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。</li>
<li>去spring容器中寻找是否有此字符串名称id或者是此字符串名称name的对象，自动注入到该属性中。</li>
</ol>
<h4 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;spring.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;spring.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处使用byType方式自动注入属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>运行测试类成功输出</code></p>
<p><strong>小结：</strong></p>
<ol>
<li>自动匹配set方法的参数类型，并自动注入。</li>
<li>如果set方法中存在多个参数，则无法注入。</li>
</ol>
<h1 id="注解方式自动装配"><a href="#注解方式自动装配" class="headerlink" title="注解方式自动装配"></a>注解方式自动装配</h1><p>Spring官网开启注解支持的方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        扩展：另外的开启注解支持的方式</span></span><br><span class="line"><span class="comment">        &lt;bean class =&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.Person&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><blockquote>
<p><code>@Autowired</code>默认使用的注解方式是ByType方式进行注入，如果需要根据名称进行注入的话需要搭配<code>@Qualifier</code>注解一起使用。<code>@Autowired</code>注解其中还有一个布尔值的属性<code>required</code>可以指定是否必须注入。默认值是true必须注入，如果置为false则表示可以非必须注入：<code>(required = false)</code></p>
</blockquote>
<p>将<code>@Autowired</code>注解写在类的成员变量、set方法或者构造器上即可实现自动注入。<br>演示怎么将<code>@Autowired</code>注解在成员变量、set方法、构造器上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 构造器 */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Cat cat, Dog dog)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    <span class="built_in">this</span>.dog = dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 成员变量 */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* set方法 */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCat</span><span class="params">(Dog dog)</span> &#123; <span class="built_in">this</span>.dog = dog; &#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Cat cat)</span> &#123; <span class="built_in">this</span>.cat = cat; &#125;</span><br></pre></td></tr></table></figure>
<p><code>以上三种方式运行测试类均可成功输入</code></p>
<p><strong>实际上，Spring官方建议我们使用构造器的方式注入依赖，而不是成员变量注入。</strong></p>
<ol>
<li><p><strong>成员变量注入的方式不能为final修饰的成员变量注入依赖。</strong></p>
</li>
<li><p><strong>IOC容器的解耦。</strong><br>当我们使用IOC容器创建对象时意味着我们把创建对象的这个操作交给了IOC容器，也就是所谓的控制反转。<br>但是如果我们需要脱离IOC容器来创建这个对象呢？<br>答案是如果使用的是成员变量注入的方式则脱离IOC容器之后我们无法创建这个对象。<br>由于是成员变量注入，而成员变量对外又是不可见的，只能通过IOC容器去利用反射机制将依赖注入，所以一旦脱离了IOC容器之后这个类几乎不可用，这直接导致了类与IOC容器的高度耦合。</p>
</li>
<li><p><strong>使用构造器注入的方式能够更好的帮助我们遵守单一职责原则。</strong><br>如果一个类中的依赖过于庞大，那么使用构造器注入的方式参数也会变得很多，而参数变多则是一个很明显的提示，我们需要考虑优化这个类了。</p>
</li>
</ol>
<p>使用set方法注入依赖的话则是一个可选的依赖注入，如果需要这个依赖则注入进来。不需要就不要管它。这种注入方式是一种非必须注入的方式，相对的构造器注入则是一种强制注入的方式了。</p>
<p>在实际的开发中，很多时候都是强制注入的，也就是更需要构造器注入的方式来注入变量。但是如果我们每个类都去维护一个构造方法的话每个构造方法又会带有很多参数，这明显不方便，这里可以使用<code>lombok</code>来维护这个构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span> <span class="comment">// 自动生成构造方法的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UsersMapper usersMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里会自动生成一个构造方法注入所有的被final修饰的变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ol>
<li>尽量不要使用成员变量的方式注入依赖。</li>
<li>根据具体的业务场景选择构造器注入或是set方法方式的注入</li>
</ol>
<h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><p>注意：上文提到的另外开启注解的方式不支持@Resource注解。</p>
<ol>
<li>@Resource如有指定的name属性，先按name属性以byName方式查找装配</li>
<li>其次再使用默认的byName方式进行装配</li>
<li>如果以上都不成功，则按byType的方式自动装配</li>
<li>都不成功，则报异常</li>
</ol>
<p><code>@Resource</code>注解也是可以应用在成员变量、构造器、set方法上的，相比起<code>@Autowired</code>注解，是jdk自带的注解而不是Spring提供的，这其中的一个好处是使得程序在依赖注入方面与Spring框架解耦，但我个人觉得并不是很必要。另外一个就是上面提到的注入方式的不同，<code>@Autowired</code>是byType方式而<code>@Resource</code>是先使用byName方式，byName方式注入失败再使用byType方式。还有新版本的jdk已经不再支持<code>@Resource</code>注解了，故了解即可。</p>
<h4 id="Component、-Repository、-Service、-Controller"><a href="#Component、-Repository、-Service、-Controller" class="headerlink" title="@Component、@Repository、@Service、@Controller"></a>@Component、@Repository、@Service、@Controller</h4><p>这些注解是为了让我们更加进一步的简化xml文件中的配置而存在的，将这些注解应用在类上，则可以将该类交由IOC容器去管理。相当于在xml文件中定义了这个类的bean节点。<br>默认使用的id是类名的小驼峰写法，自定义id则只需要指定value属性即可。四个注解的功能都是相同的，之所以有四个只是为了区分开各个类的层级。<code>@Repository</code>、<code>@Service</code>、<code>@Controller</code>这三个注解分别对应MVC三层设计中的<code>dao</code>、<code>service</code>、<code>controller</code>，另外的<code>@Component</code>注解则是使用在一些其他的类中，例如工具类。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Bean</tag>
        <tag>自动装配</tag>
        <tag>注解开发</tag>
      </tags>
  </entry>
  <entry>
    <title>【Spring】IOC理论推导</title>
    <url>/posts/5741/</url>
    <content><![CDATA[<p>控制反转IOC（Inversion of Control)，是一种设计思想，DI（依赖注入）是实现IOC的一种方法，也有人认为DI只是IOC的另一种说法。没有IOC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。<br><em>以上内容出自b站（<a href="https://www.bilibili.com/video/BV1WE411d7Dv?p=3">狂神说Java</a>）</em></p>
<span id="more"></span>

<hr>
<p><strong>演示传统开发模式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserDao</span> &#123; </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlUserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;从MySQL数据库中取出的User对象&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleUserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;从Oracle数据库中取出来的User对象&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123; </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">IUserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MysqlUserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123; </span><br><span class="line">        userDao.getUser(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IUserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>小结：</strong><br>传统的开发模式中，各个类之间的耦合度过高，如果在service层中要调用dao层的接口，必须在代码中new一个dao层接口的实现类才可以使用。<br>但是以这样的方式去编写代码一旦需要切换dao层的实现则必须去修改service层的代码，去修改接口的实现类才可以。<br>如果现在需要修改一个dao层的实现类，但是这个实现类在service层中很多地方都去new了的话，修改就会变得非常麻烦。不符合开闭原则的设计思想，也大大提高了代码之间的耦合度。</p>
<blockquote>
<p>此处其实可以使用在上一篇博客 <a href="http://blog.wrp.cool/posts/34268/">【创建型设计模式】工厂模式</a> 中所讲述的工厂模式解决，但本文重点在于IOC，关于工厂模式的内容则不详细展开。</p>
</blockquote>
<hr>
<p><strong>演示IOC开发模式</strong> <em>（此处dao层模式使用传统开发模式中的dao层）</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(IUserDao userDao)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.userDao = userDao; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">         userDao.getUser(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IUserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        userService.setUserDao(<span class="keyword">new</span> <span class="title class_">MysqlUserDaoImpl</span>());</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>小结：</strong><br>IOC开发模式已经从根本上去解决了传统开发模式中的问题，传统开发模式中任何对象都是依赖于程序去控制创建，但是使用了IOC模式进行开发之后，依赖的对象不再需要程序去创建，而是交由用户去自定义。换句话说，service只是提供一个调用处理逻辑的接口出去给用户，而具体要处理的对象则交由用户去创建，从根本上解耦了。</p>
<hr>
<h1 id="Spring中的IOC"><a href="#Spring中的IOC" class="headerlink" title="Spring中的IOC"></a>Spring中的IOC</h1><p>前文已经说过IOC是一种思想而不是一种具体的实现，Spring就是一种IOC的具体实现。</p>
<p><strong>演示Spring IOC</strong> <em>（此处dao层模式使用传统开发模式中的dao层）</em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册UserDao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cool.wrp.ioc.OracleUserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建spring上下文对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">IUserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (IUserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IUserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上演示的就是一个简单的Spring应用。</p>
<p>Spring是以一种配置加工厂方式来实现IOC，这在Spring中有一个专业的名词叫做IOC容器。Spring的IOC容器通过配置文件去读取要创建的bean。之后通过上下文对象的<code>getBean()</code>方法去获取到我们想要的bean对象。实际上应该将Spring理解为一个巨大的工厂。<br>以上将对象的创建完全交由Spring负责，在客户端中也不需要去传入实际的对象。所谓的控制反转就是将创建对象的这一步动作交给第三方去完成。不需要在程序中去创建对象，也不需要用户去创建对象，而是通过Spring的工厂创建完成之后我们自己根据需要去取出对象来使用。控制就是控制对象的创建，反转就是将控制对象的创建这一步骤反转给Spring。</p>
<h1 id="Bnan的作用域"><a href="#Bnan的作用域" class="headerlink" title="Bnan的作用域"></a>Bnan的作用域</h1><p>Spring官网对Bean作用域的描述<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200901215755.png" alt="20200901215755"></p>
<blockquote>
<p>这里我们来聊聊singleton和prototype，单例和原型。另外的几种作用域等以后有用到再研究</p>
</blockquote>
<p>Spring中Bean默认的作用域范围就是单例的，也就是在整个IOC容器中只有一个Bean实例存在，相对应的原型模式就是在IOC容器中存在多个Bean实例的。单例的Bean在创建上下文时就创建了，然后每次去获取的时候都是获取的同一个，而原型的Bean则是当需要用到再去创建，每次需要都会去创建一个新的Bean。</p>
<p><strong>演示单例和原型</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;singletonStu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cool.wrp.createObject.Student&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;prototypeStu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cool.wrp.createObject.Student&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);<span class="comment">// 创建singletonStu</span></span><br><span class="line">        <span class="comment">// 演示单例</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;singletonStu&quot;</span>, Student.class);<span class="comment">// 取出singletonStu</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;singletonStu&quot;</span>, Student.class);<span class="comment">// 取出singletonStu</span></span><br><span class="line">        System.out.println(stu1 == stu2);<span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 演示原型</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu3</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;prototypeStu&quot;</span>, Student.class);<span class="comment">// 创建singletonStu</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu4</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;prototypeStu&quot;</span>, Student.class);<span class="comment">// 创建singletonStu</span></span><br><span class="line">        System.out.println(stu3 == stu4);<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IOC</tag>
        <tag>控制反转</tag>
        <tag>Bean的作用域</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/posts/34268/</url>
    <content><![CDATA[<p><strong>百度百科中对创建型模式的定义：</strong><br>创建型模式旨在将系统与它的对象创建、结合、表示的方式分离。这些设计模式在对象创建的类型、主体、方式、时间等方面提高了系统的灵活性。（<a href="https://baike.baidu.com/item/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/22912595?fr=aladdin">百度百科</a>）</p>
<p><strong>个人理解：</strong><br>某些业务场景中，需要重复的创建相同对象去完成业务逻辑。一旦需要切换成另外的对象的话则需要修改大量代码。而使用创建型设计模式（例如工厂模式）则仅需要修改一处即可。即工厂中创建对象的地方。</p>
<p><strong>本文将讲述的创建型的设计模式有：</strong><br>简单工厂模式、工厂方法模式、抽象工厂模式</p>
<span id="more"></span>

<h1 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h1><p>定义：由一个工厂对象决定创建出哪一种产品的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手机类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">extends</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用苹果手机打电话&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MI</span> <span class="keyword">extends</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用小米手机打电话&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手机工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title function_">getPhone</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;apple&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;mi&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MI</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>客户端不使用工厂类时创建对应的手机</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">        apple.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类图：<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200814233625.png" alt="20200814233625"></p>
<p> <strong>小结：</strong><br> 客户端如果在很多地方需要使用到手机类，那么每个地方都必须去new对应的手机类。如果有一天业务逻辑发生变化，需要换一款手机，那么就得在很多地方都去重新new新的手机类。这将会变得非常麻烦，不符合低耦合的设计思想</p>
</li>
<li><p><strong>客户端使用手机工厂类创建对应的手机</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">apple</span> <span class="operator">=</span> PhoneFactory.getPhone(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (apple != <span class="literal">null</span>) &#123;</span><br><span class="line">            apple.create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类图：<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200814233841.png" alt="20200814233841"></p>
<p> <strong>小结：</strong><br> 使用工厂模式可以直接在工厂类中去修改对应的实例，而不需要在每个创建实例的地方都去修改。如果需要修改对应的手机实例则只需要在工厂类中去替换掉对应的实例即可。</p>
<p> <strong>举例：</strong><br> 需求：将原来的苹果手机换成最新的苹果手机。使用工厂模式之后只需要去创建一个最新的苹果手机类继承手机类，再去修改手机工厂类中的实例即可。</p>
</li>
</ul>
<p><strong>缺点：</strong>工厂类职责过于繁重，一旦创建新的手机则需要修改工厂类。违反了开闭原则</p>
<p><strong>改进：</strong>在工厂类中使用反射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手机工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title function_">getPhone</span><span class="params">(Class c)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Phone = (Phone) Class.forName(c.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> PhoneFactory.getPhone(Apple.class);</span><br><span class="line">        <span class="keyword">if</span> (phone != <span class="literal">null</span>) &#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>暂停一会，介绍两个简单的概念。产品等级和产品家族</p>
<blockquote>
<p><strong>产品等级：</strong>产品等级指的是相同类型的产品。<br>比如，我们使用的手机有小米手机、华为手机、苹果手机这些都是同一产品等级。<br><strong>产品家族：</strong>产品家族指的是不同产品等级构成的一组产品。<br>比如，上面的这些手机厂商不仅生产手机还生产电脑，那么小米手机和小米电脑构成一个产品家族，华为手机和华为电脑构成一个产品家族，苹果手机和苹果电脑构成一个产品家族</p>
</blockquote>
<hr>
<h1 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h1><p>定义：工厂方法模式（FACTORY METHOD）是一种常用的类创建型设计模式，此模式的核心精神是封装类中变化的部分，提取其中个性化善变的部分为独立类，通过依赖注入以达到解耦、复用和方便后期维护拓展的目的。它的核心结构有四个角色，分别是抽象工厂；具体工厂；抽象产品；具体产品。（<a href="https://baike.baidu.com/item/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/2361103?fr=aladdin">百度百科</a>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象手机类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手机具体实现类 - 完成手机具体功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">extends</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用苹果手机打电话&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MI</span> <span class="keyword">extends</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用小米手机打电话&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PhoneFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Phone <span class="title function_">getPhone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象工厂实现类 - 创建具体的手机对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleFactory</span> <span class="keyword">extends</span> <span class="title class_">PhoneFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MIFactory</span> <span class="keyword">extends</span> <span class="title class_">PhoneFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MI</span>(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PhoneFactory</span> <span class="variable">phoneFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppleFactory</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> phoneFactory.getPhone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类图：<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200814235206.png" alt="20200814235206"></p>
<p><strong>小结：</strong></p>
<ol>
<li>如果是需要切换具体的实例时只需要在客户端中修改具体的工厂的实例 <code>PhoneFactory phoneFactory = new AppleFactory();</code> 也就是这行代码，修改实现的 <code>AppleFactory()</code> 为新的工厂。</li>
<li>工厂方法模式可以很容易实现对产品等级的扩展，比如现在要新增一个华为手机，只要创建一个华为手机类继承<code>Phone</code>由这个类来实现具体的华为手机功能，再创建一个华为手机的工厂类继承<code>PhoneFactory</code>，实现具体的创建华为手机的工作。扩展产品等级只需要这两步就可以完成了。</li>
<li>如果引入的产品等级过多，则会产生大量的类，不便于阅读代码。</li>
</ol>
<blockquote>
<p>需求：创建一款新的手机HUAWEI，并将原有的苹果手机换成华为手机</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 华为手机类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HUAWEI</span> <span class="keyword">extends</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用华为手机打电话&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 华为手机的工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HUAWEIFactory</span> <span class="keyword">extends</span> <span class="title class_">PhoneFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HUAWEI</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PhoneFactory</span> <span class="variable">phoneFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HUAWEIFactory</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> phoneFactory.getPhone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h1><p>定义：抽象工厂是一种常见的设计模式。此模式为一个产品家族提供了统一的创建接口。当需要这个产品家族的某一系列的时候，可以从抽象工厂中选出相对系的系列来创建一个具体的工厂类别。（<a href="https://baike.baidu.com/item/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/5686668?fr=aladdin">百度百科</a>）</p>
<blockquote>
<p>需求：引入一个新的产品等级（电脑）与原有的手机组合成产品家族，实现对产品家族的扩展</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 产品家族中的各个产品等级抽象类和实现 //</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 电脑抽象类 - 产品等级为电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">calculation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手机抽象类 - 产品等级为手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 华为实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HUAWEIComputer</span> <span class="keyword">extends</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculation</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用华为电脑计算&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HUAWEIPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用华为手机打电话&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小米实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MIComputer</span> <span class="keyword">extends</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculation</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用小米电脑计算&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MIPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用小米手机打电话&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顶层电子产品抽象工厂 - 将以下产品家族统称为电子产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ElectronicProductFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Phone <span class="title function_">getPhone</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title function_">getComputer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体的实现工厂 - 实现的是产品家族工厂（比如：华为产品家族、小米产品家族）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HUAWEIFactory</span> <span class="keyword">extends</span> <span class="title class_">ElectronicProductFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HUAWEIPhone</span>(); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">getComputer</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HUAWEIComputer</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MIFactory</span> <span class="keyword">extends</span> <span class="title class_">ElectronicProductFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MIPhone</span>(); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">getComputer</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MIComputer</span>(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ElectronicProductFactory</span> <span class="variable">electronicProductFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MIFactory</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">miPhone</span> <span class="operator">=</span> electronicProductFactory.getPhone();</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">miComputer</span> <span class="operator">=</span> electronicProductFactory.getComputer();</span><br><span class="line">        miPhone.call();</span><br><span class="line">        miComputer.calculation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类图：<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200815223416.png" alt="20200815223416"></p>
<blockquote>
<p>需求：引入新的苹果产品家族，将客户端的小米产品更换为苹果产品</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 苹果工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleFactory</span> <span class="keyword">extends</span> <span class="title class_">ElectronicProductFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApplePhone</span>(); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">getComputer</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppleComputer</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 苹果产品等级实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleComputer</span> <span class="keyword">extends</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculation</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用苹果电脑计算&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplePhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;使用苹果手机打电话&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ElectronicProductFactory</span> <span class="variable">electronicProductFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppleFactory</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">miPhone</span> <span class="operator">=</span> electronicProductFactory.getPhone();</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">miComputer</span> <span class="operator">=</span> electronicProductFactory.getComputer();</span><br><span class="line">        miPhone.call();</span><br><span class="line">        miComputer.calculation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>小结：</strong></p>
<ol>
<li>抽象工厂针对于共产方法的扩展更方便了产品家族的扩展，如果是在工厂方法中将产品等级组合成产品家族的话需要修改大量的代码，有兴趣的同学可以试试使用工厂方法去将产品等级组合成产品家族。而使用抽象工厂扩展产品家族的话就变得很方便，新增新的产品家族和产品家族工厂即可。</li>
<li>如果在抽象工厂内部的产品家族中要实现对产品等级的扩展则会非常麻烦，需要修改大量的代码，而使用工厂方法去扩展产品等级则非常简单。</li>
</ol>
<p>总结：<br>针对产品等级和产品家族，工厂方法和抽象工厂各有各的优点和缺点，在真实的开发中需要根据实际的业务场景去选择适合的设计模式去完成相应的需求，切记不要为了使用某一种设计模式而过度的设计自己的代码。<br><u>刚刚好的才是最美</u>，代码如此，人生亦是如此。</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
        <tag>创建型</tag>
        <tag>简单工厂</tag>
        <tag>工厂方法</tag>
        <tag>抽象工厂</tag>
        <tag>产品家族</tag>
        <tag>产品等级</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】链表</title>
    <url>/posts/29990/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果上一篇文章实现的动态数组，由于底层任然是使用的静态数组，而不是真正意义上的<strong>动态数据结构</strong>的话。那么本文的链表则肯定是一个真真正正意义上的动态的数据结构了。</p>
<span id="more"></span>
<p>我还记得在读书时老师曾经给我们举过一个非常好的例子用于演示链表和数组在增删改查种各自的优缺点。在这里我把它分享出来给大家</p>
<blockquote>
<p>一个班级假设有50个学生，现在使用数组和链表来分别承载这50个学生。<br>然后模拟两种场景来分别对比这两种数据结构的优缺点<br><strong>数组：</strong>将这50个学生按照顺序排号，从0开始到49（这里模拟的是数组的下标）<br><em><strong>像这样 [0, 1, 2, 3, …, 49]</strong></em><br><strong>链表：</strong>将50个学生叫到操场排好队，每个学生去记住自己后面一个学生，记录排第一的同学（链表头）。<br><em><strong>像这样 (0) -&gt; (1) -&gt; (2) -&gt; (3) -&gt; … -&gt; (49)</strong></em><br>原谅我懒得画图。。。</p>
</blockquote>
<p><strong>场景一：</strong>老师在办公室想要叫某个学生到办公室去（模拟数据的查询）<br><strong>数组：</strong>直接在班级表种去查这个学生对应的序号，根据序号就可以很快速的找到这个学生。<br><strong>链表：</strong>由于没有序号，需要一个个学生去查找，首先找到链表头同学，比较是不是老师叫的学生，如果是则去办公室找老师。如果不是，则去找链表头同学所记住的后面一个同学，再进行对比。如果还不是则再去寻找这个同学记忆的下一个同学之后再进行比对，直到找到这个同学为止。</p>
<p><strong>场景二：</strong>班上来了一个新的插班生，插班生必须安排在班级的第一个位置（模拟数据的添加和删除）<br><strong>数组：</strong>由于每个学生的序号都是按照顺序排好的，所以不能直接插入在第一个学生之前，必须是要占用第一个学生的位置。所以要将全部的学生重新排号，插班生排0号，剩下的学生按照原来的号码依次加1往后排序。<br><strong>链表：</strong>让这个插班生去记住第一个同学也就是原理啊的链表头，再成为新的链表头。其他的学生完全不受影响。</p>
<p>通过以上两个场景的展现可以很清晰的看出来链表和数组各自的优缺点在哪里。链表增删快，而数组查询快。</p>
<h1 id="设计节点类"><a href="#设计节点类" class="headerlink" title="设计节点类"></a>设计节点类</h1><p>链表中的数据实际上是一个个的节点，在Java中使用一个节点类（Node）来表示。在节点类中有两个变量，一个是当前节点的值，另一个是指向下一个节点的指针。<br>由此每个节点中都有一个指向下一个节点的指针，最后一个节点指向下一个节点的指针就置为空。以此一节一节的链接起来，也就成了链表。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">// 节点本身的值（支持泛型）</span></span><br><span class="line">    <span class="keyword">public</span> E e;</span><br><span class="line">    <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E e, Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.e = e;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E e)</span> &#123; <span class="built_in">this</span>(e, <span class="literal">null</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123; <span class="built_in">this</span>(<span class="literal">null</span>, <span class="literal">null</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> e.toString(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="设计链表的成员变量和构造方法"><a href="#设计链表的成员变量和构造方法" class="headerlink" title="设计链表的成员变量和构造方法"></a>设计链表的成员变量和构造方法</h1><p>我们先来考虑一下怎么去设计链表类中的成员变量再来看看怎么设计构造函数</p>
<p>首先我们需要一个变量可以表示当前链表中共有多少个节点，也就是链表的大小。size变量是没跑了。<br>另外回顾一下刚刚的例子，在哪个班级中如果老师需要找到一个班级中的某个确定的学生时，第一个找的其实是链表头同学，根据链表头去一个个找下去直到找到为止。<br>所以在我们设计的链表类中需要一个头节点的指针，定义一个<strong>Node变量</strong>作为指针。</p>
<p>刚刚的例子中场景二来一个插班生我们将插班生插在了第一个位置。直接让插班生去记住原来的链表头再将链表头指向插班生。设想一下，如果是插入在链表的中间呢？<br>比如插入在第二个学生的位置。需要插班生去记住原来的第二个同学，再让原来的第一个同学把记忆的第二个同学换成插班生同学。也就是说如果是插入在中间的元素要多一步让前面的同学去记插班生同学，而插入在第一个则不需要。</p>
<p>针对上面的情况我们可以设置一个虚拟的头节点来解决这个问题。这个虚拟的节点来指向我们链表中真正的第一个节点，对外呢，屏蔽这个节点的存在。故此我们将上面决定要定义的<strong>Node变量</strong>改成<strong>dummyHead</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="keyword">private</span> Node dummyHead; <span class="comment">// 虚拟头节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">    dummyHead = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方便用户传入一个数组将其转换成链表的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">(E[] arrayE)</span> &#123;</span><br><span class="line">    dummyHead = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    size = arrayE.length;</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arrayE.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        cur.next = <span class="keyword">new</span> <span class="title class_">Node</span>(arrayE[i], cur.next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计两个方便使用的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123; <span class="type">return</span> <span class="variable">size</span> <span class="operator">=</span>= <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>

<h1 id="链表中插入元素"><a href="#链表中插入元素" class="headerlink" title="链表中插入元素"></a>链表中插入元素</h1><p>我们来研究一下前面的例子是怎么在一个班级中插入插班生的。</p>
<blockquote>
<p>首先，得要有一个插班生，这个不用想肯定是必须的，好了，插入功能核心代码的<strong>第一步</strong>也就出来了。<br>然后我们得要去找到插班生要插入的位置，在这里呢我们虚拟一个index（下标）的概念出来，方便用户指定要插入的位置，核心功能的<strong>第二步</strong>也就出来了。<br>找到位置也有插班生之后的问题就是要把插班生插入到班级里面去啦，这个事情要怎么做呢。<br>比方说我现在是要插入到第二个位置去，那么我需要先让插班生去记忆原来的第二个位置的同学，这也是<strong>第三步</strong>。<br>然后让第一个同学不要去记原来的第二个同学了，换成是插班生同学，<strong>第四步</strong>。<br>到此为止，这个插入的动作就完成了。</p>
</blockquote>
<p>将上面的各个步骤以程序的方式重新梳理一遍<br>第一步：创建一个新的节点 <code>new Node()</code><br>第二步：使用一个for循环找到要插入位置的前一个节点和后一个节点<br>第三步：将第一步创建出来的节点的<code>next</code>指针指向第二步找出来的后一个节点<br>第四步：将第二步找出来的前一个节点的<code>next</code>指针指向第一步创建的节点</p>
<p>将上面的逻辑组织一下换成Java语言</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 下标的校验，不属于插入的核心代码</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;index &quot;</span> + index + <span class="string">&quot; 不合法, 当前size = &quot;</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一步</span></span><br><span class="line">    Node node= <span class="keyword">new</span> <span class="title class_">Node</span>(e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步：</span></span><br><span class="line">    <span class="comment">// 使用一个prev变量去作为一个中间量去寻找要插入的节点位置</span></span><br><span class="line">    <span class="comment">// 这里的prev就是前一个节点，由于还没有插入，所以prev.next就是要插入的后一个节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        prev = prev.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步</span></span><br><span class="line">    node.next = prev.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第四步</span></span><br><span class="line">    prev.next = node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护一下size变量</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上便是添加操作的方法，但这还不是最好。</p>
<p>上面的代码虽说是完成了这个添加动作的逻辑，也能够顺顺利利的运行起来，但这还不够优雅。<br>实际上我们可以将第一步、第三步和第四步合并成一行代码<br>创建一个新的节点直接将<code>prev.next</code>赋值给新节点的<code>next</code>，再直接赋值给<code>prev.next</code>。<br>像下面这个样子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;index &quot;</span> + index + <span class="string">&quot; 不合法, 当前size = &quot;</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        prev = prev.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原来的第一步、第二步和第四步</span></span><br><span class="line">    prev.next = <span class="keyword">new</span> <span class="title class_">Node</span>(e, prev.next);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>插一句题外话<br>其实编写程序，就是像上面这样子一步一步去考虑出这个程序核心代码的步骤。<br>然后再把这个简单的按照程序逻辑梳理一遍，再开始实际编码。也恰恰是这两步才是最关键的，而不是编码，有了梳理完的逻辑实际编码起来码随心动倒还是个挺舒服的过程。<br>最后再审视一遍自己写出来的代码，看看有没有地方可以改进，可以写的更加的优雅一些</p>
</blockquote>
<hr>
<h1 id="删除链表中的元素"><a href="#删除链表中的元素" class="headerlink" title="删除链表中的元素"></a>删除链表中的元素</h1><p>我们来换个方式写删除操作，在前面的添加操作中我们设置了一个虚拟的index表示的是下标，作用是方便用户操作。在删除的这一小节我们不使用这个index我们假设用户能够直到自己要删除的元素，直接传入待删除元素，然后程序将其删除即可。</p>
<p>删除元素实际上就是添加元素的逆向操作，找到待删除节点的前一个节点，将这个节点直接指向待删除元素的后一个节点即可删除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="comment">// 找到要删除元素的前一个元素</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">    <span class="keyword">while</span>(!prev.next.e.equals(e)) &#123;</span><br><span class="line">        prev = prev.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将要删除元素前一个元素的指针直接指向要删除元素的后一个元素</span></span><br><span class="line">    prev.next = prev.next.next;</span><br><span class="line"></span><br><span class="line">    size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将上面的代码使用递归的方式写出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    remove(e, dummyHead);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E e, Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.next.e.equlas(e)) &#123;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">        size --;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    remove(e, node.next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上链表这样的数据结构天然的适合递归，在很多场合都可以使用递归去操作一个链表。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Java</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】动态数组</title>
    <url>/posts/714/</url>
    <content><![CDATA[<p>本文将讲述一个动态数组的实现过程，由于动态数组其实是一种比较简单的数据结构。所以本文将会以代码展示为主，当然，难点也是会重点讲述。</p>
<span id="more"></span>

<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><blockquote>
<p>将要实现一个Array类来承载动态数组这种数据结构。动态数组的底层也是使用Java中的静态数组去实现的，之所以动态是因为这其中可以自动的扩容和扩容和缩容的操作。</p>
</blockquote>
<ol>
<li>准备一个静态的数组和一个记录动态数组大小的变量<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> E[] data;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure></li>
<li>准备构造方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Array</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    data = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Array</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>设计一些方便用户的方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取数组中元素的个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组的容量</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回数组是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">size</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
准备工作结束。</li>
</ol>
<h1 id="二、设计扩容和缩容的方法"><a href="#二、设计扩容和缩容的方法" class="headerlink" title="二、设计扩容和缩容的方法"></a>二、设计扩容和缩容的方法</h1><p>Java中的数组一旦被初始化之后就再也无法改变它的容量了，所以我们只能够是通过创建一个新的数组，在新数组中开辟出我们想要的空间，然后再将原来的数组全部搬到这个新数组中，以此来实现动态数组。严谨一些的话这并不是真正意义上的动态数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现动态的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> capacity 新数组的容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建新数组</span></span><br><span class="line">    E[] newData = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将元素复制到新数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        newData[i] = data[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将data指向新数组</span></span><br><span class="line">    data = newData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、添加元素"><a href="#三、添加元素" class="headerlink" title="三、添加元素"></a>三、添加元素</h1><p>向数组中的任意位置添加元素，需要将这个位置之后的所有元素都往后挪动一个位置，来腾出这个位置以供新的元素添加进来。<br>重点就是在于这个「挪」的实现，我们需要从最后一个元素开始一个个的往后挪一位，这样才不会覆盖到原有的元素。</p>
<blockquote>
<p>注意：在添加元素的时候我们是有可能会超出现有数组的边界的，不进行处理的话就会抛出下标越界的异常。<br>动态数组就是为了解决这个问题而存在的，自动的判断是否需要扩容操作，为用户屏蔽掉下标越界的问题，用户只管插入而不需要担心容量问题。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数组中的任意位置添加元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 任意位置的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e 要添加的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组下标 &quot;</span> + index + <span class="string">&quot; 不合法, 当前size = &quot;</span> + size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否需要进行扩容操作</span></span><br><span class="line">    <span class="keyword">if</span> (size == data.length) </span><br><span class="line">        resize(data.length * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挪动元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size; i &gt; index; i--) </span><br><span class="line">        data[i] = data[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入元素，维护size变量</span></span><br><span class="line">    data[index] = e;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设计两个方便用户操作的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向所有元素后添加一个新元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(E e)</span> &#123; add(size, e); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向所有元素前添加一个新元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(E e)</span> &#123; add(<span class="number">0</span>, e); &#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、删除元素"><a href="#四、删除元素" class="headerlink" title="四、删除元素"></a>四、删除元素</h1><p>这其实跟添加元素是一样的，只是反过来而已。删除数组中任意位置的元素，需要将这个位置之后的所有元素都往前挪动一个位置。一个个的覆盖掉前面的元素。<br>在这里需要从要删除元素的后一位开始挪，一直往后挪到最后一位元素。</p>
<blockquote>
<p>注意：在删除元素时，如果数组中剩下的空间太多了，这时我们需要触发缩容操作，以免造成太多内存的浪费。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除数组中的任意元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 要删除元素的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E 删除的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组下标 &quot;</span> + index + <span class="string">&quot; 不合法, 当前size = &quot;</span> + size);</span><br><span class="line">    </span><br><span class="line">    <span class="type">E</span> <span class="variable">removeE</span> <span class="operator">=</span> data[index];</span><br><span class="line">    <span class="comment">// 挪动元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        data[i] = data[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="comment">// 判断是否缩容</span></span><br><span class="line">    <span class="keyword">if</span> (size == data.length / <span class="number">4</span> &amp;&amp; data.length / <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        resize(data.length / <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> removeE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在扩容的时候是扩容成原来数组的两倍的大小，但是缩容时确实缩容成数组的四分之一大小。<br>这是为了防止用户在添加删除元素时刚好是在原来数组容量大小的附近进行的，则不断的会去触发扩容和缩容的操作，而这会更多的消耗资源。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于动态数组，以上的几个方法就是其中最主要的方法了，其他的一些例如查询元素和修改元素相对而言比较简单，也没什么好说的，本文也就省略不提。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Java</tag>
        <tag>动态数组</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java并发】多线程异常处理器</title>
    <url>/posts/29598/</url>
    <content><![CDATA[<p>我们平时在处理异常的时候，如果是主线程抛出了一个未处理的异常，那么我们可以轻松的使用 <code>try-catch</code> 捕获这个异常。但是如果这个异常是在子线程中抛出的，那么主线程实际上对于子线程的异常是不敏感的，虽然可以正常的抛出，但是却很难去发现。就算是在主线程中使用 <code>try-catch</code> 去捕获子线程的异常那也是没用的，因为 <code>try-catch</code> 只会捕获本线程中的异常。</p>
<span id="more"></span>
<p>简单对比一下主线程和子线程之间抛异常的不同之处：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;我是子线程抛出来的异常&quot;</span>);</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;我是主线程抛出来的异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行上面的代码就可以清晰的展现这个问题。我们使用一个for循环来模拟程序的正常执行过程，这其中，子线程的异常大概是在控制台打印到500的时候抛出来，但这完全不会影响到主线程的正常执行，但是主线程的异常却每次都准确的在程序打印到5000的时候去抛出来，然后程序终止运行。如果是在真实的开发环境中，子线程抛出来的异常并不会被主线程捕获并处理，而在茫茫的日志文件中，我们想要去发现子线程的异常，简直是大海捞针。今天的主题就是要来说一说如何去处理子线程中的异常。</p>
<p>演示「主线程」<strong>无法捕获</strong>「子线程」中的异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Test</span>(),<span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Test</span>(),<span class="string">&quot;线程2&quot;</span>).start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Test</span>(),<span class="string">&quot;线程3&quot;</span>).start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Test</span>(),<span class="string">&quot;线程4&quot;</span>).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;捕获了异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;子线程抛出的异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面演示的在主线程中使用 <code>try-catch</code> 去捕获异常也是无法处理的，但是把 <code>try-catch</code> 放到子线程中去就可以处理这个异常了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;我是子线程抛出来的异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeExeception e) &#123;</span><br><span class="line">            <span class="comment">// 处理异常逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;我是主线程抛出来的异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像上面这样在子线程中使用 <code>try-catch</code> 去捕获异常这是解决问题的办法之一。这也不可避免的带来一个弊端，那就是我们需要在每个run方法中都手动的去编写 <code>try-catch</code> 来处理异常，而且我们也不知道具体可能出现什么类型的异常。我们有更好的办法——UncaughtExceptionHandler</p>
<h1 id="Thread类中的接口UncaughtExceptionHandler"><a href="#Thread类中的接口UncaughtExceptionHandler" class="headerlink" title="Thread类中的接口UncaughtExceptionHandler"></a>Thread类中的接口UncaughtExceptionHandler</h1><p>java.lang 包中有一个ThreadGroup的类实现了这个接口，这里就简单的称之为线程的异常处理器。我们来看看这处理了什么内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口中仅定义了这一个方法，以下是实现类</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过接口的参数我们大致可以猜出，当子线程中抛出异常时，将会通过某种方式（个人猜测是反射）回调这个方法</span></span><br><span class="line"><span class="comment">    也清晰明了的告诉了我们是哪个线程抛出的哪个异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        parent 的定义：private final ThreadGroup parent;</span></span><br><span class="line"><span class="comment">        首先检查是否存在一个父线程的这个异常处理器，如果存在则调用父线程的异常处理器进行处理，这里是一个递归的操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">        parent.uncaughtException(t, e);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            当调用完毕发现并没有一个可以处理异常的处理器之后</span></span><br><span class="line"><span class="comment">            尝试获取全局的异常处理器“这里的 ueh”</span></span><br><span class="line"><span class="comment">            如果存在一个全局的异常处理器，则使用这个处理器处理异常</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Thread.<span class="type">UncaughtExceptionHandler</span> <span class="variable">ueh</span> <span class="operator">=</span></span><br><span class="line">            Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line">        <span class="keyword">if</span> (ueh != <span class="literal">null</span>) &#123;</span><br><span class="line">            ueh.uncaughtException(t, e);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> ThreadDeath)) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                不存在的情况，直接将异常的堆栈信息打印出来</span></span><br><span class="line"><span class="comment">                也就是本文开头子线程中抛出的“我是子线程抛出来的异常”</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            System.err.print(<span class="string">&quot;Exception in thread \&quot;&quot;</span></span><br><span class="line">                            + t.getName() + <span class="string">&quot;\&quot; &quot;</span>);</span><br><span class="line">            e.printStackTrace(System.err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看完这个线程处理器之后来看看要如何实现这个线程处理器</p>
<ul>
<li><p>首先我们需要编写一个类实现 Thread.UncaughtExceptionHandler 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">Thread</span>.UncaughtExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyUncaughtExceptionHandler</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;已经成功捕获了异常。抛出异常的线程是：&quot;</span> + t.getName() + <span class="string">&quot;。抛出的异常是：&quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>其次我们需要将自己编写的异常处理器织入到主线程中，让它自动去处理子线程的异常。（这里使用开篇中「演示主线程中无法捕获子线程中的异常」的例子并作对比）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> <span class="title class_">MyUncaughtExceptionHandler</span>(<span class="string">&quot;线程异常处理器&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Test</span>(),<span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Test</span>(),<span class="string">&quot;线程2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Test</span>(),<span class="string">&quot;线程3&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Test</span>(),<span class="string">&quot;线程4&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;子线程抛出的异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main方法执行结果</span></span><br><span class="line">线程异常处理器已经成功捕获了异常。抛出异常的线程是：线程<span class="number">1</span>。抛出的异常是：java.lang.RuntimeException: 子线程抛出的异常</span><br><span class="line">线程异常处理器已经成功捕获了异常。抛出异常的线程是：线程<span class="number">2</span>。抛出的异常是：java.lang.RuntimeException: 子线程抛出的异常</span><br><span class="line">线程异常处理器已经成功捕获了异常。抛出异常的线程是：线程<span class="number">3</span>。抛出的异常是：java.lang.RuntimeException: 子线程抛出的异常</span><br><span class="line">线程异常处理器已经成功捕获了异常。抛出异常的线程是：线程<span class="number">4</span>。抛出的异常是：java.lang.RuntimeException: 子线程抛出的异常</span><br></pre></td></tr></table></figure>

<p>  至此，多线程异常处理器介绍完毕。</p>
</li>
</ul>
<hr>
<blockquote>
<p>插一句题外话，我认为本文的例子中很形象的向我们展示了线程的工作过程。线程在执行期间是互相不打扰的，各自干着各自的事情，这期间并不会互相影响。就像是一个团队在协同工作一样，每个人都是一个独立的线程，各自在完成自己的工作，并不会互相打扰。每个线程领取到自己的任务（run方法）之后，等待开始执行（调用start方法）。之后便是一直闷头干下去，直到把工作做完（run方法执行完毕）</p>
</blockquote>
]]></content>
      <categories>
        <category>线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>线程</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java并发】join()方法</title>
    <url>/posts/50308/</url>
    <content><![CDATA[<blockquote>
<p>join方法的主要作用是同步。在主线程中去创建并启动一个线程，再调用这个线程的join方法之后，会使得两个线程原本是并行关系变成串行关系，也就是主线程将会等待子线程执行完毕之后再继续执行。</p>
</blockquote>
<span id="more"></span>
<p>注意：join方法可以传入一个long类型的参数，表示过了多少毫秒之后两个线程将由串行关系再次转变成并行关系。但如果传入的参数是0的话，表示的是永久等待，也就是主线程将会等待直到子线程执行完毕之后再次执行，相当于不传参数的join方法。</p>
<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Test</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Test</span>());</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;所有子线程执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main方法执行结果</span></span><br><span class="line">子线程Thread-<span class="number">1</span>执行完毕</span><br><span class="line">子线程Thread-<span class="number">0</span>执行完毕</span><br><span class="line">所有子线程执行完毕</span><br></pre></td></tr></table></figure>
<p>上面的代码如果将两个线程执行join方法的那行代码注释掉，则执行结果为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">所有子线程执行完毕</span><br><span class="line">子线程Thread-<span class="number">0</span>执行完毕</span><br><span class="line">子线程Thread-<span class="number">1</span>执行完毕</span><br></pre></td></tr></table></figure>
<p>很明显，join方法的调用会使得主线程去等待子线程执行完毕之后再重新执行代码。</p>
<h1 id="join期间被中断"><a href="#join期间被中断" class="headerlink" title="join期间被中断"></a>join期间被中断</h1><p>一个有意思的问题：</p>
<blockquote>
<p>如果主线程调用子线程的join方法后，在子线程执行的期间，有interrupt通知进入了，怎么办？</p>
</blockquote>
<p>针对上面的问题，我再重申一下本文开篇关于join方法作用的介绍。「<strong>主线程将会等待调用了join方法的子线程执行完毕后再继续执行</strong>」<br>实际上，是主线程在等待子线程执行完毕，也就是说陷入阻塞状态的是主线程而不是子线程。<br>所以关于上面的问题如果有interrupt通知进入了主线程将会抛出一个InterruptedException来响应这个interrupt通知。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Thread</span> <span class="variable">mainThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        mainThread.interrupt();</span><br><span class="line">    &#125;);</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        thread.join();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程被中断了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main方法执行结果</span></span><br><span class="line">main线程被中断了</span><br></pre></td></tr></table></figure>
<p>启动一个子线程并调用join方法，这时主线程就在等待子线程的执行完毕，然后子线程去中断了主线程。也就是中断了一个正在<strong>因join方法陷入阻塞</strong>的线程，那么此时我们中断的是这个陷入阻塞的线程，而不是正在执行的子线程。</p>
<h1 id="join期间的线程状态"><a href="#join期间的线程状态" class="headerlink" title="join期间的线程状态"></a>join期间的线程状态</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Thread</span> <span class="variable">mainThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        System.out.println(mainThread.getState());</span><br><span class="line">        System.out.println(Thread.currentThread().getState());</span><br><span class="line">    &#125;);</span><br><span class="line">    thread.start();</span><br><span class="line">    thread.join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main方法执行结果</span></span><br><span class="line">WAITING</span><br><span class="line">RUNNABLE</span><br></pre></td></tr></table></figure>
<p>在子线程中去打印主线程和子线程各自的状态，明显调用了join方法的主线程被阻塞了是WAITING状态，而正在运行的子线程则是RUNNABLE状态。</p>
<h1 id="join方法分析"><a href="#join方法分析" class="headerlink" title="join方法分析"></a>join方法分析</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面是Thread类中的join方法源码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    join(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="type">long</span> millis)</span></span><br><span class="line"><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此可知，join方法实际上还是调用了wait方法的。如果没有传入时间参数，则是调用了<code>wait(0)</code>这个方法，代表永久等待，直到被唤醒。<br>有意思的是这其中并没有看到notify或者是notifyAll方法，也就是并没有线程去唤醒这个等待子线程执行完毕的主线程，但是当子线程执行完毕之后，这确确实实被唤醒了。<br>我们知道，主线程被唤醒的条件是子线程执行完毕，又知道线程执行完毕只有两种情况，一是run方法运行结束，二是抛出了运行时异常。<br>至此，答案水落石出，当线程执行完毕时，将会去执行notifyAll方法唤醒其他的线程。</p>
<blockquote>
<p>注意：我们并不提倡使用Thread类的实例作为synchronized的锁对象原因也是在此，因为这可能会破坏原有的wait-notify结构。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>IDEA多线程调试</title>
    <url>/posts/29198/</url>
    <content><![CDATA[<blockquote>
<p>记录点滴，分享世界。Hello World！：） </p>
</blockquote>
<span id="more"></span>

<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200710230014.png" alt="20200710230014"></p>
<ol>
<li><strong>在以上代码断点处点击鼠标右键</strong></li>
</ol>
<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200710230202.png" alt="20200710230202"></p>
<ol start="2">
<li><p><strong>选择 Thread 后点击 Done</strong><br>All 在进入断点后会将整个 JVM 虚拟机停下来<br>Thread 仅会停止进入断点的线程</p>
</li>
<li><p><strong>接着选择 debug 模式启动 main 方法</strong><br>进入断点后的 debug 窗口如下<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200710230742.png" alt="20200710230742">在 frames 标签中可以通过下拉列表选择要执行的线程，接着就像平时一样一步一步的让代码走下去就可以啦</p>
</li>
<li><p><strong>查看线程状态</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20200710232211.png" alt="20200710232211"><br>首先点击到 Tread 类中的 run 方法里面去，再点击 Debugger Console 标签栏最右边的像一个计算器一样的哪个按钮，弹出一个 Evaluate 框出来可以调用当前线程的一些方法，其中 <code>getState()</code> 方法就可以查看线程状态啦</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>IDEA 使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java线程练习】两个线程交替打印0~100</title>
    <url>/posts/45104/</url>
    <content><![CDATA[<blockquote>
<p>题目：<br>实现两个线程交替打印0~100，其中一个线程专门打印奇数，另一个线程专门打印偶数。</p>
</blockquote>
<blockquote>
<p><strong>分析题目：</strong><br>题目关键字：<strong>两个线程</strong>、<strong>交替</strong>、<strong>0~100</strong>、<strong>专门打印奇数</strong>、<strong>专门打印偶数</strong></p>
</blockquote>
<span id="more"></span>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li>首先创建两个线程</li>
<li>交替打印证明线程之间需要协同配合、考虑 synchronized、wait-notify</li>
</ol>
<h1 id="使用-sychronized"><a href="#使用-sychronized" class="headerlink" title="使用 sychronized"></a>使用 sychronized</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 打印奇数的线程</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;奇数&quot;</span>).start();</span><br><span class="line">    <span class="comment">// 打印偶数的线程</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;偶数&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 synchronized 的方法虽然也是能够完成题目的要求，但是效率上略差一些。<br>main 方法中的逻辑是，先判断是否满足打印 0~100 的要求，如果满足则进入同步代码块中，此时两个线程将会竞争同一把锁 <code>lock</code><br>竞争到锁的线程将判断是否满足打印条件，如果满足则打印，否则直接跳出，紧接着同步代码块执行完毕释放锁，两个线程重新进入竞争锁的步骤<br>如果在这个时候其中一个线程接连多次竞争到锁，但是却因为不满足打印条件而再次直接释放锁，这就是无意义的性能浪费</p>
</blockquote>
<h1 id="使用-wait-notify"><a href="#使用-wait-notify" class="headerlink" title="使用 wait-notify"></a>使用 wait-notify</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="comment">// 获取锁证明是符合打印条件，直接打印</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + count++);</span><br><span class="line">                <span class="comment">// 唤醒另外的线程</span></span><br><span class="line">                lock.notify();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 判断是否打印到最后的数字了，如果还没有则中断，把锁让给另外的线程去打印</span></span><br><span class="line">                    <span class="comment">// 做这层判断是为了预防在打印到最后一个数字时，中断后另外的线程已经执行完毕，而无法唤醒</span></span><br><span class="line">                    <span class="keyword">if</span> (count &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test, <span class="string">&quot;偶数&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test,<span class="string">&quot;奇数&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 wait-notify 不需要去判断是否符合奇偶数的打印条件，而是当拿到锁则证明肯定是符合打印条件的，直接打印<br>打印完唤醒另外的线程准备执行下一次的打印，再中断本线程让渡锁</p>
</blockquote>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>线程</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java并发】wait()、notify()和notifyAll()</title>
    <url>/posts/29010/</url>
    <content><![CDATA[<p><code>wait()、notify()和notifyAll()</code> 这三个方法都是属于 Object 类的方法，这也就意味着在 Java 中的任何对象都可以调用这三个方法。<br>同时这三个方法也是被 「volatile 和 final 修饰的方法」也就是没办法看到源码和重写。<br>Object 作为所有类的基类，其地位不言而喻。而这三个方法能被定义在 Object 中自然也是非常重要的方法，借由这三个方法的配合可以使得多线程可以更好的配合、协同工作。</p>
<span id="more"></span>

<h1 id="方法详解"><a href="#方法详解" class="headerlink" title="方法详解"></a>方法详解</h1><h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><p>想要执行 wait 方法必须要在 synchronized 方法或者是代码块中才可以执行，执行 wait方法会使得当前线程释放掉 monitor 锁，强迫当前线程进入阻塞状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (Object) &#123;</span><br><span class="line">    object.wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想要唤醒当前线程则必须是另外的一个线程去调用了 notiify 并且刚刚好唤醒的是本线程，或者是直接调用 notifyAll。</p>
<blockquote>
<p>假如现在有四个线程在运行，其中线程A、B、C都调用了<code>wait()</code>在等待同一个monitor锁，而线程D持有这个monitor锁。那么如果现在线程D调用了<code>notify()</code>方法，则会随机的从前面的线程A、B、C中去唤醒一个线程，如果调用的是<code>notifyAll()</code>方法的话，则会将线程A、B、C全部唤醒</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Thread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    object.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;再次获取到monitor锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Thread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                object.notify();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;已经执行了 notify 方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread1</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread1</span>();</span><br><span class="line">        <span class="type">Thread2</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread2</span>();</span><br><span class="line">        thread1.start();</span><br><span class="line">        Thread.sleep(<span class="number">5</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main方法运行结果</span></span><br><span class="line">Thread-<span class="number">0</span>开始执行</span><br><span class="line">Thread-<span class="number">1</span>已经执行了 notify 方法</span><br><span class="line">Thread-<span class="number">0</span>再次获取到monitor锁</span><br></pre></td></tr></table></figure>
<p>上面的这段代码就可以说明<code>wait()</code>方法和<code>notify</code>方法的执行过程。<br>首先是Thread-0线程执行<code>wait()</code>方法<strong>释放monitor锁之后</strong>进入等待状态，之后Thread-1线程执行了<code>notify()</code>方法去唤醒了Thread-0线程。<br>此时Thread-0线程已经是被唤醒的状态，但是并没有继续往下执行，这是因为没有获得monitor锁，唤醒Thread-0线程的Thread-1线程还没有释放这把锁。<br>等待Thread-1线程执行完毕也就是打印了「Thread-1已经执行了 notify 方法」这句语句之后，Thread-1线程执行完毕，释放monitor锁之后，Thread-0线程再次获取monitor锁之后开始执行剩余代码。</p>
<p>注意：</p>
<ol>
<li>调用<code>wait()</code>方法的线程会主动释放monitor锁，上面的代码也正是因为Thread-0主动释放掉了monitor锁之后，Thread-1才可以执行</li>
<li>当休息的线程被唤醒时并不是直接执行的，而是需要重新去竞争对应的锁，获取到锁之后才可以执行</li>
</ol>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java并发】Synchronized关键字</title>
    <url>/posts/10492/</url>
    <content><![CDATA[<p><strong>一句话说明 Synchronized 关键字的作用：</strong></p>
<blockquote>
<p>能够保证在 <strong>「同一时刻」</strong> 最多只有 <strong>「一个」</strong> 线程执行该段代码，以达到保证 <strong>「并发安全」</strong> 的效果</p>
</blockquote>
<span id="more"></span>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h4 id="地位"><a href="#地位" class="headerlink" title="地位"></a>地位</h4><ul>
<li>Synchronized 是 Java 的关键字，被 Java 语言原生支持</li>
<li>是最基本的互斥同步手段</li>
<li>并发编程中的必学内容</li>
</ul>
<h4 id="线程不安全的后果"><a href="#线程不安全的后果" class="headerlink" title="线程不安全的后果"></a>线程不安全的后果</h4><p>我们来演示一个“消失的请求”的小例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runnable</span> <span class="keyword">implements</span> <span class="title class_">java</span>.lang.Runnable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; syn(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        <span class="comment">// 两个join方法是为了保证两个线程能够执行完毕</span></span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        <span class="comment">// 介绍一下另一种方式保证两个线程能够执行完毕</span></span><br><span class="line">        <span class="comment">// while (thread1.isAlive() || thread2.isAlive()) &#123; &#125;</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 方法执行结果：178233</span></span><br></pre></td></tr></table></figure>
<p>很明显，如果是两个线程同时在竞争一个资源并且没有加 synchronized 关键字的修饰的话就会出现这样数据错误的情况。<br>实际上，上面代码 <code>i++</code> 的这行语句在执行的时候是有三个步骤的。</p>
<ul>
<li><strong>步骤一：</strong>将 i 的值读到内存中</li>
<li><strong>步骤二：</strong>将 i 的值加1</li>
<li><strong>步骤三：</strong>将 i 的值写回去</li>
</ul>
<p>但是现在有两个线程在同时执行这三个步骤，比如在 <code>i=10</code> 的时候线程 <code>thread1</code> 执行了<strong>步骤一</strong>，此时线程 <code>thread2</code> 也执行了 <strong>步骤一</strong>，那么线程 <code>thread2</code> 拿到的 <code>i</code> 的值也是10，然后这两个线程正常执行<strong>步骤二</strong>和<strong>步骤三</strong>这样子就会导致两个线程同时将 <code>i</code> 的值从 10 加到 11。这就是线程不安全的后果，本文介绍的 Synchronized 关键字的作用就是为了解决这样的问题而存在的。</p>
<h1 id="Synchronized-关键字的用法"><a href="#Synchronized-关键字的用法" class="headerlink" title="Synchronized 关键字的用法"></a>Synchronized 关键字的用法</h1><p>既然上面的例子已经是出现了这样的问题，那么接下来就介绍一下如何使用 Synchronized 关键字来解决类似的问题。将以下几个例子的 syn 方法应用在上面「线程不安全的后果」中即可解决“消失的请求”的问题</p>
<blockquote>
<p>实际上，我们可以将 Synchronized 关键字理解成「<strong>锁</strong>」的概念，当一个线程去获取一些要执行的资源的时候，我们就把这个资源的锁给这个线程，线程拿到锁了便可以执行。这时候如果其他线程也想要获取这个执行资源的话，由于拿不到锁便无法执行，只能是陷入 BLOKCKED 阻塞状态。从而保证了线程安全<br>但是，Java 为 Synchronized 关键字提供了几种不同的加锁的方式，我们可以根据具体的业务场景选择使用不同的方式来加锁。依据使用方式的不同，在这里将其分为 <strong>对象锁</strong> 和 <strong>类锁</strong></p>
</blockquote>
<h3 id="对象锁"><a href="#对象锁" class="headerlink" title="对象锁"></a>对象锁</h3><p>synchronized 修饰普通方法和代码块的形式都称之为对象锁。<br>以下是我的个人理解：</p>
<ul>
<li><strong>代码块</strong><br> 修饰代码块的形式是需要我们为这个代码块去手动的指定一个对象作为锁传进去的，线程想要执行代码块中的代码就必须要拿到这把锁也就是我们指定的对象才可以执行。</li>
<li><strong>普通方法</strong><br> 我认为普通方法和代码块的形式实际上原理相同，Java 中我们在调用普通方法时是这样的：<code>Object.method()</code> 是通过类对象去调用的方法，这里的类对象实际上就是传入的锁，如果是通过相同的对象去调用这个方法，那么就需要拿到这个对象作为的锁才可以调用这个方法，在这里也就是将这个对象作为了锁，因此将 synchronized 关键字的这种方式分类在对象锁之下。</li>
</ul>
<h5 id="同步代码块形式"><a href="#同步代码块形式" class="headerlink" title="同步代码块形式"></a>同步代码块形式</h5><p>同步代码块的形式就是直接把 synchronized 关键字加在代码块上，并且指定一个对象作为锁。这样当线程访问代码块时就可以拿到这个对象作为锁，其他线程再想访问就拿不到这个对象了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syn</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main 方法执行结果：20000</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>扩展：一个方法中可以有多个同步代码块，并且使用不同的锁对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syn</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock1) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  lock1 开始执行&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  lock1 执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock2) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  lock2 开始执行&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  lock2 执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line">Thread-<span class="number">0</span>  lock1 开始执行</span><br><span class="line">Thread-<span class="number">0</span>  lock1 执行完毕</span><br><span class="line">Thread-<span class="number">0</span>  lock2 开始执行</span><br><span class="line">Thread-<span class="number">1</span>  lock1 开始执行</span><br><span class="line">Thread-<span class="number">0</span>  lock2 执行完毕</span><br><span class="line">Thread-<span class="number">1</span>  lock1 执行完毕</span><br><span class="line">Thread-<span class="number">1</span>  lock2 开始执行</span><br><span class="line">Thread-<span class="number">1</span>  lock2 执行完毕</span><br></pre></td></tr></table></figure>

<h5 id="普通方法形式"><a href="#普通方法形式" class="headerlink" title="普通方法形式"></a>普通方法形式</h5><p>直接将 synchronized 关键字加在普通方法上（以调用方法的对象作为锁，也就是 <code>this</code> ），这样这个方法就是只能同时被一个线程执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">syn</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 方法执行结果：200000</span></span><br></pre></td></tr></table></figure>

<h3 id="类锁"><a href="#类锁" class="headerlink" title="类锁"></a>类锁</h3><p>synchronized 修饰静态方法和修饰代码块时指定（*.class）对象都称之为类锁<br>以下是我的个人理解：</p>
<ul>
<li><strong>静态方法</strong><br> Java 中一个类的静态方法只会随着类的加载而加载，在创建类对象时是不会加载静态方法的。这意味着一个类的静态方法在内存中只有一份，这与类的实例无关。当 synchronized 修饰了静态方法时，这个静态方法是在同一个时间内是绝对只会有一个线程在执行的。这与修饰普通方法的对象锁不同，对象锁的话是将调用方法的对象作为锁的，如果执行这个对象的方法被阻塞时，可以再新建一个对象去执行这个方法。而修饰静态方法的类锁是不同的，由于静态方法在内存中只有一份，所以<strong>在同一时间段内只能有一个线程执行</strong></li>
<li><em><em>指定（</em>.class）对象</em>*<br> 首先必须明白一个概念，Java 中的类无论被实例化多少次 <code>class</code> 对象都始终只有一个，所以修饰代码块时指定一个 <code>类名.class</code> 的类对象作为锁传入的话，那么由于锁在内存中的唯一性，那么这个代码块也是<strong>在同一时间段内只能有一个线程执行的</strong>。同样的这与对象锁中指定对象的形式不同，指定一个对象作为锁的话，在阻塞时实际上也可以通过重新创建一个对象来执行代码块中的代码。</li>
</ul>
<h5 id="静态方法形式"><a href="#静态方法形式" class="headerlink" title="静态方法形式"></a>静态方法形式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">syn</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 方法执行结果：200000</span></span><br></pre></td></tr></table></figure>

<h5 id="指定（-class）对象的形式"><a href="#指定（-class）对象的形式" class="headerlink" title="指定（*.class）对象的形式"></a>指定（*.class）对象的形式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syn</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Runnable.class) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 方法执行结果：200000</span></span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><blockquote>
<p>synchronized 关键字就是将指定的对象作为锁去保护某一段代码的机制，这个指定的对象可以是普通对象也可以是类对象。根据指定的对象的功能不同可以分为对象锁和类锁，对象锁和类锁的区别就是在内存中，类锁是只有一个的，而对象锁可以创建多个，从而在某种特定的条件下可能在同一个时间段内多个线程都在执行同一个方法。</p>
</blockquote>
<h1 id="多线程访问同步方法的7种情况"><a href="#多线程访问同步方法的7种情况" class="headerlink" title="多线程访问同步方法的7种情况"></a>多线程访问同步方法的7种情况</h1><ol>
<li><p>两个线程同时访问<strong>一个对象</strong>的同步方法<br> 同一个对象同一个锁，先访问先执行，后访问被阻塞</p>
</li>
<li><p>两个线程访问的是<strong>两个对象</strong>的同步方法<br> 两个对象两个锁，两个线程各一个，各自执行，互不干扰</p>
</li>
<li><p>两个线程访问的是 synchronized 的静态方法<br> 静态方法持类锁，两个线程一个锁，先访问先执行，后访问阻塞</p>
</li>
<li><p>同时访问<strong>同步</strong>方法与<strong>非同步</strong>方法<br> 非同步方法的执行并不受同步方法的影响</p>
</li>
<li><p>访问同一个对象的<strong>不同的</strong>普通同步方法<br> 普通同步方法默认以 <code>this</code> 作为锁对象，所以同个对象同个锁，先访问先执行，后访问被阻塞</p>
</li>
<li><p>同时访问<strong>静态</strong> synchronized 和<strong>非静态</strong> synchronized 方法<br> 静态方法用类锁，非静态方法用对象锁，两个线程各一个，各自执行，互不干扰</p>
</li>
<li><p>方法抛出<strong>异常</strong>后，会释放<strong>锁</strong><br> 代码演示：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runnable</span> <span class="keyword">implements</span> <span class="title class_">java</span>.lang.Runnable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;Thread-0&quot;</span>)) &#123;</span><br><span class="line">            method1();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   开始执行&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   开始执行&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 方法执行结果：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread-0   开始执行</span></span><br><span class="line"><span class="comment">// 等待3秒...</span></span><br><span class="line"><span class="comment">Exception in thread &quot;Thread-0&quot; java.lang.RuntimeException</span></span><br><span class="line"><span class="comment">    at createthreads.Runnable.method1(Runnable.java:29)</span></span><br><span class="line"><span class="comment">    at createthreads.Runnable.run(Runnable.java:16)</span></span><br><span class="line"><span class="comment">    at java.lang.Thread.run(Thread.java:748)</span></span><br><span class="line"><span class="comment">Thread-1   开始执行</span></span><br><span class="line"><span class="comment">Thread-1   执行完毕</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h3><ol>
<li>一把锁只能同时被一个线程获取，没有拿到锁的线程必须等待。</li>
<li>每个实例都对应自己的一把锁，不同实例之间互不影响。</li>
<li>锁对象是是 <code>*.class</code> 以及 synchronized 修饰的是 static 方法的时候，所有对象共用一把锁。</li>
<li>无论方法正常执行完毕或者方法抛出异常，都会释放锁。</li>
</ol>
<h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><h3 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h3><ul>
<li><strong>概念</strong>：指的是同一线程的外层函数获取锁之后，内层函数可以直接再次获取该锁。</li>
<li><strong>好处</strong>：避免死锁，提升封装性。</li>
</ul>
<p>可重入的意思是，当前获得锁的线程去再次调用被 synchronized 修饰的方法时，可以把当前已经获得的锁直接传递给该方法。这样的机制的好处是可以避免死锁的发生，也就是当前方法在等待的锁正好是自己已经获得的锁，陷入死循环不断等待。另一个好处是提升封装性，由于可传入的性质，避免了在调用其他方法时的解锁和加锁步骤，简化了并发编程的难度。</p>
<p><strong>示例：三个可重入场景</strong></p>
<blockquote>
<p>递归调用被 synchronized 关键字修饰的方法</p>
</blockquote>
<blockquote>
<p>在 synchronized 方法中调用另外一个 synchronized 方法（必须使用同一个锁）</p>
</blockquote>
<blockquote>
<p>子类 synchronized 方法中调用父类 synchronized 方法</p>
</blockquote>
<h3 id="不可中断"><a href="#不可中断" class="headerlink" title="不可中断"></a>不可中断</h3><p>当线程访问一个拿不到锁的 synchronized 方法时，只能是被阻塞。直到别的线程释放锁为止，如果别的线程永远不释放锁的话，那么就只能永远等待下去。</p>
<hr>
<p>参考：<br><a href="https://www.cnblogs.com/wpf-7/p/9639671.html">https://www.cnblogs.com/wpf-7/p/9639671.html</a></p>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>synchronized</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 安装</title>
    <url>/posts/62048/</url>
    <content><![CDATA[<p>介绍一下 Nginx 的下载、安装以及配置，顺便也做一个记录，以便后续查看。</p>
<span id="more"></span>

<h1 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h1><p>首先需要安装 Nginx 的依赖包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install gcc-c++ pcre pcre-devel slib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Nginx 下载地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p>
<p>介绍一下 Nginx 官网中的版本：</p>
<ul>
<li><strong>Mainline version：</strong>开发版本</li>
<li><strong>Stable version：</strong>最新稳定版本</li>
<li><strong>Legacy versions：</strong>历史版本</li>
<li>在这里推荐大家下载最新稳定版本。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.9.9.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在安装目录下通过 <code>configure</code> 文件进行配置，如果全部使用默认的配置的话可以直接运行 <code>./configure</code>。</p>
<p><strong>配置参数：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
</table>
<ul>
<li>-prefix | 指定 nginx 安装目录</li>
<li>-pid-path | 指向 nginx 的pid</li>
<li>-lock-path | 锁定安装文件，防止而已篡改或者误操作</li>
<li>-error-log | 错误日志</li>
<li>-http-log-path | http 日志</li>
<li>-with-http_gzip_static_module | 启用 gzip 模块，在线实时压缩输出数据流</li>
<li>-http-client-body-temp-path | 设定客户端请求的临时目录</li>
<li>-http-proxy-temp-path | 设定 http 代理临时目录</li>
<li>-http-fastcgi-temp-path | 设定 fastcgi 临时目录</li>
<li>-http-uwsgi-temp-path | 设定 uwsgi 临时目录</li>
<li>-http-scgi-temp-path | 设定 scgil 临时目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--pid-path=/var/run/nginx.pid \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>配置 https 访问则需要在编译时添加 <code>http_v2_module</code> 和 <code>http_ssl_module</code> 这两个模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--pid-path=/var/run/nginx.pid \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_ssl_module</span><br></pre></td></tr></table></figure>

<h2 id="编译-amp-amp-安装"><a href="#编译-amp-amp-安装" class="headerlink" title="编译 &amp;&amp; 安装"></a>编译 &amp;&amp; 安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在安装目录的 <code>sbin</code> 目录下执行 <code>./ngnix</code> 就可以将 Nginx 的服务成功启动起来。</p>
<blockquote>
<p><strong>注意：</strong></p>
</blockquote>
<ol>
<li>如果在配置时是直接运行的 <code>./configure</code> 可能会报 <code>error.log</code> 和 <code>access.log</code> 这两个日志文件找不到，直接按照提示创建这两个文件即可启动 nginx。</li>
<li>如果启动403错误的话，可以查看nginx的启动线程是哪个用户然后在配置文件中修改user的值为改成哪个用户。</li>
</ol>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>编辑 <code>/etc/profile</code> 文件，在最后添加以下代码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:&quot;nginx 的安装目录&quot;/sbin</span><br></pre></td></tr></table></figure>
<p>保存退出后再执行一下 <code>source /etc/profile</code> 使配置生效。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>启动：<code>nginx</code></li>
<li>暴力停止：<code>nginx -s stop</code></li>
<li>平滑停止：<code>nginx -s quit</code></li>
<li>重新加载配置文件：<code>nginx -s reload</code></li>
<li>验证配置文件：<code>nginx -t</code></li>
</ul>
<hr>
<h1 id="yum-源安装"><a href="#yum-源安装" class="headerlink" title="yum 源安装"></a>yum 源安装</h1><ol>
<li><p>添加 nginx 到 yum 源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 yum 来安装 nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用命令<br>启动：<code>systemctl start nginx</code><br>停止：<code>systemctl stop nginx</code><br>重启：<code>systemctl restart nginx</code></p>
</li>
<li><p>开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看 nginx 状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定配置文件启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -c nginx.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>此种方式配置文件目录介绍</p>
</li>
</ol>
<ul>
<li>网站文件存放默认目录：<code>/usr/share/nginx/html</code></li>
<li>网站默认站点配置：<code>/etc/nginx/conf.d/default.conf</code></li>
<li>自定义Nginx站点配置文件存放目录：<code>/etc/nginx/conf.d/</code></li>
<li>nginx 全局配置：<code>/etc/nginx/nginx.conf</code></li>
</ul>
<hr>
<ul>
<li><strong>参考文章：</strong></li>
<li><a href="https://www.huaweicloud.com/articles/090289e5414715ed7e2c5c74f60d63ff.html">CentOS7安装Nginx，全网最快安装教程</a></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java并发】线程生命周期</title>
    <url>/posts/43936/</url>
    <content><![CDATA[<blockquote>
<p>本文将分析 Java 中线程的 <strong>6</strong> 种状态，以及线程的生命周期。</p>
</blockquote>
<span id="more"></span>

<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E7%BA%BF%E7%A8%8B%E7%9A%846%E4%B8%AA%E7%8A%B6%E6%80%81.png" alt="线程的6个状态"></p>
<blockquote>
<p>在这张图片中，包含了线程的所有状态以及每种状态之间的互相转换过程。其中箭头的指向是固定的，单箭头的指向则表明了两个线程的状态是不可逆的，一旦从一端到另一端之后就无法再回去原来的状态。</p>
</blockquote>
<h1 id="图片左边的三种状态"><a href="#图片左边的三种状态" class="headerlink" title="图片左边的三种状态"></a>图片左边的三种状态</h1><ol>
<li><p><strong>新创建（NEW）</strong><br>线程一经创建，也就是去 new 了一个 Thread 类之后，未调用 start 方法之前，这时的线程就是「新创建」的状态</p>
</li>
<li><p><strong>可运行（RUNNABLE）</strong><br>有些地方可能将「可运行」状态称之为「就绪」状态，这两者其实都是「RUNNABLE」状态<br>线程创建完毕之后，调用 start 方法开始，直到 run 方法中的代码执行完毕之前，如果没有其他的操作使得线程状态跑到上图右边的三种状态中去的话，线程将会一直处于「可运行」状态。</p>
<blockquote>
<p>值得注意的是，线程并没有一个「运行」的状态，就算是正在执行 run 方法的线程状态也是「可运行」状态。</p>
</blockquote>
</li>
<li><p><strong>已终止（TERMINATED）</strong><br>当 run 方法的代码执行完毕或者是抛出未处理的异常的时，线程就会处于「已终止」状态中。这个状态也是线程的最终状态，线程一旦进入了这个状态将无法再回到其他的状态中。</p>
</li>
<li><p><strong>代码演示</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新创建</span></span><br><span class="line">    System.out.println(thread.getState());  <span class="comment">// NEW</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 start 方法开始执行</span></span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(thread.getState());  <span class="comment">// RUNNABLE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// run 方法执行中</span></span><br><span class="line">    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">    System.out.println(thread.getState());  <span class="comment">// RUNNABLE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行完毕</span></span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    System.out.println(thread.getState());  <span class="comment">// TERMINATED</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="图片右边的三种状态（阻塞状态）"><a href="#图片右边的三种状态（阻塞状态）" class="headerlink" title="图片右边的三种状态（阻塞状态）"></a>图片右边的三种状态（阻塞状态）</h1><ol>
<li><p><strong>被阻塞（BLOCKED）</strong><br>如果线程执行了一个被 synchronize 关键字修饰的代码块，并且这个代码块还处于其他线程的执行之中，这时调用的线程就会处于阻塞的状态，等待其他线程执行完毕后再执行。<br>等待的这个线程在等待的时间内就是处于 <strong>BLOCKED</strong> 状态。</p>
</li>
<li><p><strong>「等待(WAITING)」和「计时等待(TIMED_WAITING)」</strong><br>当线程阻塞时就会进入等待的状态。其中等待和计时等待非常好理解，有带 time 参数的等待就是计时等待，反之则是等待。</p>
</li>
<li><p><strong>代码演示</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runnable</span> <span class="keyword">implements</span> <span class="title class_">java</span>.lang.Runnable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此处睡眠 5ms 是因为将线程启动后首先是一个 RUNNABLE 的状态</span></span><br><span class="line">        <span class="comment">// 由于我的 CPU 的执行速度太快，thread1 还没有走到 syn 方法就被打印状态了，所以看不到效果</span></span><br><span class="line">        Thread.sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此处的睡眠同上，主要也是一个 CPU 速度过快的问题</span></span><br><span class="line">        Thread.sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(thread1.getState()); <span class="comment">// TIMED_WAITING，因为正在执行 syn 方法中的 sleep(1000)</span></span><br><span class="line">        System.out.println(thread2.getState()); <span class="comment">// BLOCKED，因为 syn 方法正在被 thread1 执行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此处睡眠 1500ms 是为了让 syn 方法执行到 wait() 中</span></span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(thread1.getState()); <span class="comment">// WAITING，因为此时 syn 方法已经执行到 wait() 了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        syn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">syn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>阻塞状态</strong><br>一般习惯而言，将图片右边的三种状态（BLOCKED、WAITING、TIMED_WAITING）都称之为阻塞状态，而不仅仅是 BLOCKED。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程</tag>
        <tag>生命周期</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java并发】停止线程</title>
    <url>/posts/41050/</url>
    <content><![CDATA[<p>正所谓上山容易下山难。我们创建启动一个线程并不是很困难，但是如何正确的停止一个线程就并不是那么简单。因为如果没有正确停止的线程的话，线程将继续消耗计算机的资源，对性能造成严重的损耗。</p>
<span id="more"></span>

<h1 id="一、停止线程原理"><a href="#一、停止线程原理" class="headerlink" title="一、停止线程原理"></a>一、停止线程原理</h1><blockquote>
<p><strong>原理概述：使用 interrupt 来通知线程停止，而不是强制停止线程</strong></p>
</blockquote>
<p>通常线程停止的两种情况：</p>
<ol>
<li>run 方法中的全部代码运行完毕。</li>
<li>线程运行的过程中出现没有捕获的异常。</li>
</ol>
<p>实际上 Java 语言中并没有提供可以让线程安全可靠停止的方法，但是 Java 提供了 interrupt 机制来停止线程。<br><strong>注意：interrupt 机制是一种合作机制而不是强制机制。将 interrupt 看作一种通知的形式我认为更准确一些「用一个线程去通知另外一个线程停止下来」</strong></p>
<p>其实在 Java 语言中，最好的停止线程的方式也是使用 interrupt 这种方式</p>
<p>如果我们想要去停止一个线程最多也就仅能做到去通知这个线程停止，而最终决定要不要停止的权利还是在要停止的线程本身</p>
<p>在我们通知线程停止之后，由被通知停止的线程来响应这个停止通知，再最终决定是否停止，如果线程不想要停止的话，我们是一点办法都没有的，这就是原理概述后半句「而不是强制停止线程」的含义</p>
<blockquote>
<p>这其实可以类比成我们平时在路上驾驶汽车的过程。当红灯亮起来时，实际上也仅能够做到通知路上的汽车停车，然后司机去响应这个红灯，停止汽车。这里的红灯就是通知，司机就是线程。红灯亮起之后，司机可以决定停车等红灯，司机也可以不要停车决定闯红灯，比如正在执行任务的救护车或消防车。</p>
</blockquote>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 循环条件：是否有通知停止线程</span></span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            System.out.println(num++);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务执行完毕，num 的值：&quot;</span> + num);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    thread.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通知线程停止</span></span><br><span class="line">    thread.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、阻塞状态下停止线程"><a href="#二、阻塞状态下停止线程" class="headerlink" title="二、阻塞状态下停止线程"></a>二、阻塞状态下停止线程</h1><blockquote>
<p>关于阻塞状态的描述，可以看 <a href="https://blog.wrp.cool/posts/43936/">线程生命周期</a> 这篇文章</p>
</blockquote>
<p>以下使用 sleep 方法来使线程进入阻塞状态</p>
<ol>
<li><p><strong>迭代中 sleep</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                System.out.println(num++);</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;任务执行完毕，num 的值：&quot;</span> + num);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    thread.start();</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知线程停止</span></span><br><span class="line">    thread.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 循环条件中并没有判断是否有停止线程，这是因为当<strong>线程处于 sleep 状态时会自动的检测是否有停止线程的通知</strong>。</p>
</li>
<li><p><strong>迭代中捕获异常</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(num++);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务执行完毕，num 的值：&quot;</span> + num);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    thread.start();</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知线程停止</span></span><br><span class="line">    thread.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  异常被捕获后线程并没有停止，这并不是因为我们在异常处理中“响应”了通知，而是因为在 <strong>sleep 状态中会自动清除停止线程的通知</strong></p>
</li>
</ol>
<p><strong>综上：在 sleep 状态中线程会自动检测是否有 <code>interrupt</code> 通知，如果有 <code>interrupt</code> 通知，响应的方式是抛出一个 <code>InterruptedException</code> 异常，并清除这个通知。</strong></p>
<h1 id="三、实际编码中的阻塞状态下该如何响应-interrupt"><a href="#三、实际编码中的阻塞状态下该如何响应-interrupt" class="headerlink" title="三、实际编码中的阻塞状态下该如何响应 interrupt"></a>三、实际编码中的阻塞状态下该如何响应 interrupt</h1><p>实际编码的过程中，大多数时候在 run 方法内部是需要去调用一些外部的方法的。那么如果是在这些被调用的外部方法中有 sleep 这个动作的话，我们在 run 方法中是并不知道线程在什么情况下会 sleep 的。所以当我们编写一些需要 sleep 的方法时，一定要注意不能够把 interrupt 通知给自己 <strong>“消化”</strong> 掉，应该要通过一些办法将这个 interrupt 通知反映给 run 方法。比如：传递中断和恢复中断</p>
<h3 id="传递中断（推荐）"><a href="#传递中断（推荐）" class="headerlink" title="传递中断（推荐）"></a>传递中断（推荐）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            startSleep();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// 处理 Interrupt 通知</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    thread.start();</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知线程停止</span></span><br><span class="line">    thread.interrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 InterruptException 抛出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startSleep</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 startSleep 方法中，让线程进入 sleep 状态，并将 InterruptException 异常抛出在方法声明中传递给上一级的方法去处理。这样一旦 run 方法调用了 startSleep 就必须去处理 InterruptException 异常。而如果在 sleep 过程中有 Interrupt 通知出现，那么 run 方法的编写者就可以在 catch 语句中去处理这个 Interrupt 通知。</p>
</blockquote>
<h3 id="恢复中断"><a href="#恢复中断" class="headerlink" title="恢复中断"></a>恢复中断</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 响应通知</span></span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            System.out.println(num++);</span><br><span class="line">            startSleep();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行完毕，num = &quot;</span> + num);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    thread.start();</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知线程停止</span></span><br><span class="line">    thread.interrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startSleep</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// 恢复中断</span></span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在某些特定的业务场景中，我们可能必须去处理 InterruptedException 异常。那么就必须要在 catch 块中去再次发出 Interrupt 通知，恢复这个通知。让 run 方法的编写者可以正确的处理 Interrupt 通知。</p>
</blockquote>
<h1 id="四、彩蛋：介绍-sleep-方法的优雅写法"><a href="#四、彩蛋：介绍-sleep-方法的优雅写法" class="headerlink" title="四、彩蛋：介绍 sleep 方法的优雅写法"></a>四、彩蛋：介绍 sleep 方法的优雅写法</h1><p>以上讲了那么多的关于 sleep 方法的内容，那么看来一个 sleep 方法的一个优雅的写法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.HOURS.sleep(<span class="number">1</span>);   <span class="comment">// 休眠1个小时</span></span><br><span class="line">        TimeUnit.MINUTES.sleep(<span class="number">1</span>); <span class="comment">// 休眠1分钟</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 休眠1秒钟</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上使用 TimeUnit 类中的 sleep 方法可以让代码看起来更加舒服。直接休眠对应单位的时间，而不是去手动的计算要休眠的毫秒数。</p>
]]></content>
      <categories>
        <category>线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java并发】启动线程</title>
    <url>/posts/25097/</url>
    <content><![CDATA[<blockquote>
<p>本文将会介绍 Java 中如何正确的启动线程。以及对比一下 start 方法和 run 方法的区别</p>
</blockquote>
<span id="more"></span>

<p><strong>首先直接抛出启动线程的正确姿势：start 方法！！！</strong></p>
<h1 id="start-方法"><a href="#start-方法" class="headerlink" title="start 方法"></a>start 方法</h1><h4 id="含义（启动新线程）"><a href="#含义（启动新线程）" class="headerlink" title="含义（启动新线程）"></a>含义（启动新线程）</h4><p>当我们创建完一个线程调用了 start 方法时，这个线程并<strong>不会直接执行</strong>，而是<strong>等待执行</strong>，也就是进入了<strong>就绪</strong>状态。</p>
<p>实际上调用 start 方法的这个动作仅仅只是去通知了 JVM 「我有一个线程已经准备好执行了，你有空的话帮我执行一下」</p>
<p>至于这个线程将要在什么时刻运行，这并不是我们能够决定的，这得由 CPU 的线程调度器去决定。</p>
<blockquote>
<p>注意：start 方法的调用过程是「一个父线程去调用一个已经创建的子线程的 start 方法」所以 start 方法的执行实际上是会牵扯到父子两个线程的。</p>
</blockquote>
<h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">         * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">         * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">////////////////////</span></span><br><span class="line">        <span class="comment">// 1. 检查线程状态 //</span></span><br><span class="line">        <span class="comment">////////////////////</span></span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">         * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">         * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">        <span class="comment">////////////////////</span></span><br><span class="line">        <span class="comment">// 2. 添加到线程组 //</span></span><br><span class="line">        <span class="comment">////////////////////</span></span><br><span class="line">        group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">////////////////////</span></span><br><span class="line">        <span class="comment">// 3. 调用start0  //</span></span><br><span class="line">        <span class="comment">////////////////////</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start0();</span><br><span class="line">            started = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                  it will be passed up the call stack */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="start-方法和-run-方法"><a href="#start-方法和-run-方法" class="headerlink" title="start 方法和 run 方法"></a>start 方法和 run 方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line"></span><br><span class="line">    thread.run();</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="comment">// Thread-0</span></span><br></pre></td></tr></table></figure>
<p>以上的代码已经很明确的向我们展示了不同之处了，start 方法是开启一个新的线程去执行代码，而 run 方法还是在本线程之中去执行的，并没有开启新的线程。</p>
<p>实际上 strat 方法和 run 方法从根本上来说就是不同的。start 方法是线程体系中的方法，而 run 方法并不属于线程体系，只是一个执行单元，这两者有着根本上的区别。</p>
<p>执行单元和线程体系本质上并没有太大的关系。线程体系指的是一个线程的创建、启动、死亡等各种状态，而执行单元指的是我们编写的要让这个线程去执行的代码。在程序的设计中这两者应该是解耦的，这也是我们推荐使用「实现 Runnable 接口」的方式去实现一个线程的原因之一。</p>
]]></content>
      <categories>
        <category>线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>【ES6】扩展知识</title>
    <url>/posts/18551/</url>
    <content><![CDATA[<blockquote>
<p>本文将介绍一些关于ES6的比较基础的比较零碎的知识。</p>
</blockquote>
<span id="more"></span>

<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>模板字符串在字符串拼接方面比起以前要方便很多。模板字符串的语法是一对反引号 ( &#96;&#96; ) </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    age : <span class="number">20</span>,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">say1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我叫 &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;，今年 &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27; 岁了&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">say2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫 <span class="subst">$&#123; <span class="variable language_">this</span>.name &#125;</span>，今年 <span class="subst">$&#123; <span class="variable language_">this</span>.age &#125;</span> 岁了`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">say1</span>();</span><br><span class="line">obj.<span class="title function_">say2</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上 say1 和 say2 方法打印的效果完全相同</span></span><br></pre></td></tr></table></figure>
<p>顺带说一下 ES6 中一个比较有用的字符串的方法 includes 方法。判断字符串中是否包含了其他字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;o W&#x27;</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="for-of-循环"><a href="#for-of-循环" class="headerlink" title="for-of 循环"></a>for-of 循环</h1><p>for-of 循环类似于 Java 中的 foreach 循环。来看代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// zhangsan lisi wangwu</span></span><br></pre></td></tr></table></figure>
<p>也可以用来遍历字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> str) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Hello World!</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="unicode表示法"><a href="#unicode表示法" class="headerlink" title="unicode表示法"></a>unicode表示法</h1><p>ES6 之前 unicode 码点仅可以表示的范围是（0000 - ffff）超出这个范围的将无法表示例如 emoji 表情。ES6 中表示 unicode 的语法是 <code>\u&#123;码点&#125;</code>，这样就可以表示超出范围的码点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\u&#123;1f436&#125;&#x27;</span>); <span class="comment">// 🐶</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>箭头函数的标志是一个箭头 <code>=&gt;</code> 就是这个样子，箭头函数可以简化函数的书写过程，使得代码更加简洁。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add1</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> add2 = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add1</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">add2</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add1 和 add2 执行的效果相同</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>小提示：如果只有一个参数的情况下是可以不用加括弧的哦</p>
</blockquote>
<p>上面的代码中仅仅只是执行一行代码而已，如果需要执行多行代码，那么需要像下面这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add1</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    a += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> add2 = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    a += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add1</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">add2</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样，add1 和 add2 执行效果相同</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>小技巧：如果我们需要执行一个有返回值的函数但是又不需要函数的返回值，可以在箭头函数的函数体前加 void</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">pop</span> = arr =&gt; <span class="keyword">void</span> arr.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pop</span>(arr));  <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);  <span class="comment">// 1,2 </span></span><br></pre></td></tr></table></figure>

<h2 id="区别普通函数"><a href="#区别普通函数" class="headerlink" title="区别普通函数"></a>区别普通函数</h2><ol>
<li><p>没有 arguments 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">log</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 报错：arguments is not defined</span></span><br></pre></td></tr></table></figure>
<p>小技巧：如果需要使用 arguments 对象可以使用 <code>...参数名</code> 的方式来代替，这里的 <code>...</code> 指的是函数的剩余参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">log</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 输出 [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>没有专属的 this 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="title function_">say1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">say2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">say1</span>(); <span class="comment">// obj 对象</span></span><br><span class="line">obj.<span class="title function_">say2</span>(); <span class="comment">// window 对象</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以将箭头函数的 this 理解为上一级环境中的 this</p>
</blockquote>
<p> 小技巧：在开发中经常需要去在回调函数中去调用上一级的 this 对象，在这种情况下我们要先将上一级的 this 对象保留下来，例如：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用计时器模拟回调函数</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            _this.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(_this.<span class="property">age</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">getAge</span>(); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<p>上面的代码如果使用箭头函数可以省略掉 <code>let _this = this</code> 的这一步</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 使用计时器模拟回调函数</span></span><br><span class="line">        <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">getAge</span>(); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="对象的简洁表示法"><a href="#对象的简洁表示法" class="headerlink" title="对象的简洁表示法"></a>对象的简洁表示法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用简洁表示法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUserInfo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="keyword">const</span> age = <span class="number">20</span>,</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: name,</span><br><span class="line">        <span class="attr">age</span>: age,</span><br><span class="line">        <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用简洁表示法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUserInfo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="keyword">const</span> age = <span class="number">20</span>,</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="对象的新方法和新属性"><a href="#对象的新方法和新属性" class="headerlink" title="对象的新方法和新属性"></a>对象的新方法和新属性</h1><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h2><blockquote>
<p>用来判断两个对象是否相同，与之前的判断主要有以下两个区别</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>));     <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span> === -<span class="number">0</span>);             <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>);           <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><blockquote>
<p>用来合并对象。注意：合并时仅仅是浅拷贝合并，也就是仅拷贝对象在栈内存中的地址。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;, &#123;<span class="attr">b</span>:<span class="number">2</span>&#125;, &#123;<span class="attr">c</span>:<span class="number">3</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);  <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅拷贝例子：</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(obj1, &#123;<span class="attr">b</span>:<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);  <span class="comment">// &#123;a:100, b:2&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-keys、Object-values、Object-entries"><a href="#Object-keys、Object-values、Object-entries" class="headerlink" title="Object.keys、Object.values、Object.entries"></a>Object.keys、Object.values、Object.entries</h2><blockquote>
<p>用来取出对象中的键和值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">e</span>: <span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj));      <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj));    <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj));   <span class="comment">// [[&#x27;a&#x27;,1], [&#x27;b&#x27;,2], [&#x27;c&#x27;,3], [&#x27;d&#x27;,4], [&#x27;e&#x27;,5]]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java并发】创建线程</title>
    <url>/posts/9740/</url>
    <content><![CDATA[<blockquote>
<p>本文将介绍Java中创建线程的两种方式，以及两种方式的优缺点的比较。</p>
</blockquote>
<span id="more"></span>

<h1 id="一、实现线程的两种方式"><a href="#一、实现线程的两种方式" class="headerlink" title="一、实现线程的两种方式"></a>一、实现线程的两种方式</h1><p>在 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html">Oracle官方文档</a> 中，明确说明了Java实现线程的方式就只有两种。一种是 <strong>实现 Runnable 接口</strong>，另一种是 <strong>继承 Thread 类</strong></p>
<ol>
<li><p><strong>实现 Runnable 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableStyle</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">RunnableStyle</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程中要做的事情</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用 Runnable 方式实现线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>继承 Thread 类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStyle</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadStyle</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程中要做的事情</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用 Thread 方式创建线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="二、两种实现方式的比较"><a href="#二、两种实现方式的比较" class="headerlink" title="二、两种实现方式的比较"></a>二、两种实现方式的比较</h1><p>通常情况下我们需要去创建一个线程的时候会选择实现<strong>Runnable 接口</strong>的方式，事实上 「实现 Runnable 接口」 的方式确实优于 「继承 Thread 类」 的方式。</p>
<ol>
<li><p><strong>程序架构的角度</strong><br>创建线程的工作和线程要做的工作应该是分开的，也就是解耦的。<strong>实现 Runnable 接口</strong> 的方式就将线程要执行的代码也就是 <code>run</code> 方法里面的内容以及创建线程的机制也就是 <code>Thread</code> 类进行分离了，从而解耦。而 <strong>继承 Thread 类</strong> 的方式就没有做到这一点。</p>
</li>
<li><p><strong>执行效率的角度</strong><br>使用 <strong>继承 Thread 类</strong> 的方式去创建线程每次新建一个任务时都要去创建一个新的线程，而创建线程的消耗是比较大的。<strong>实现 Runnable 接口</strong> 的方式可以让我们在后续利用一些线程池之类的工具，减少对资源的损耗。</p>
</li>
<li><p><strong>代码设计的角度</strong><br>由于 Java 是不支持多继承的，实现接口的方式肯定是优于继承类的方式。</p>
</li>
</ol>
<h1 id="三、run-方法源码"><a href="#三、run-方法源码" class="headerlink" title="三、run 方法源码"></a>三、run 方法源码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// target 为实现 Runnable 接口传入的 Runnable 对象</span></span><br></pre></td></tr></table></figure>
<p>以上便是 Thread 类中 run 方法的全部代码，非常的精简。如果在构造 Thread 类时传入了 Runnable 对象则执行 Runnable 对象的 run 方法，如果没有传入 Runnable 对象则什么都不做。</p>
<p>恰恰也是这三行代码为 Thread 类提供了两种创建线程执行单元的方式，也就是我们上面一直在讨论的方式。实际上两种创建线程的方式在执行具体的新线程中的代码时都是调用的 Thread 类的 run 方法，新线程要实现的功能也是在 run 方法中去编写的。</p>
<p><strong>「实现 Runnable 接口」</strong>的方式也是在 run 方法中调用了在 Runnable 接口中定义的 run 方法，而并不是直接去调用了 Runnable 接口的 run 方法。</p>
<p><strong>「继承 Thread 类」</strong>的方式则是通过重写 Thread 类中的 run 方法，在 run 方法中去编写要实现的功能，覆盖掉 Thread 类中的 run 方法，从而使得在调用时执行我们自己编写的新线程的执行单元。</p>
<h1 id="思考题：如果同时使用两种方式会怎么样"><a href="#思考题：如果同时使用两种方式会怎么样" class="headerlink" title="思考题：如果同时使用两种方式会怎么样"></a>思考题：如果同时使用两种方式会怎么样</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;实现 Runnable 接口创建的线程&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;继承 Thread 类创建的线程&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// 继承 Thread 类创建的线程</span></span><br></pre></td></tr></table></figure>
<p>如果已经对 run 方法的源码理解透彻的话，那么这道题是没有任何难度的。</p>
<p>「实现 Runnable 接口」的方式是的执行单元是需要在 Thread 的 run 方法去调用的，但是我们已经重写了 Thread 中的 run 方法，自然无从去调用 Runnable 对象的执行单元了，也就不会被执行。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>实现线程的方式只有两种，分别是「实现 Runnable 接口」和「继承 Thread 类」</li>
<li>准确的讲，创建线程的方式只有一种那就是构造 Thread 类，而 Thread 类中提供了两种实现线程的执行单元的方式<ul>
<li>方式一：实现 Runnable 接口的 run 方法，并把 Runnable 实例传给 Thread 类</li>
<li>方式二：重写 Thread 的 run 方法</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>【ES6】解构赋值</title>
    <url>/posts/53099/</url>
    <content><![CDATA[<blockquote>
<p>解构赋值语法是一个 JavaScript 表达式，这使得可以将 <strong>值从数组</strong> 或 <strong>属性从对象</strong> 提取到不同变量中。</p>
</blockquote>
<span id="more"></span>

<h1 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h1><p>数组的解构赋值是有序的，将会按照顺序去匹配</p>
<h4 id="简单的解构赋值"><a href="#简单的解构赋值" class="headerlink" title="简单的解构赋值"></a>简单的解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> [a, b, c, d] = arr</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量 a b c d 的值将会对应上数组中的 1 2 3 4</span></span><br></pre></td></tr></table></figure>
<p>在 ES6 之前，「解构赋值」还没出现的时候，想要实现以上功能只能够一个个的去定义 <code>a b c d</code> 这四个变量。因此，「解构赋值」的出现就是为了简化一些代码的编写，实现更加高效的开发。</p>
<h4 id="数组嵌套的解构赋值"><a href="#数组嵌套的解构赋值" class="headerlink" title="数组嵌套的解构赋值"></a>数组嵌套的解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, [<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span><span class="string">&#x27;g&#x27;</span>]]]</span><br><span class="line"><span class="keyword">let</span> [, , [, , [, , g]]] = arr</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量 g 将对应 arr 中的字符 g</span></span><br></pre></td></tr></table></figure>

<h4 id="扩展运算符："><a href="#扩展运算符：" class="headerlink" title="扩展运算符： ..."></a>扩展运算符： <code>...</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr4 = [...arr1, ...arr2, ...arr3]</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr4 = [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// 注意：arr4 将是一个一维数组而不是二维数组</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> [a, b, ...c] = arr</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量 c 将对应数组中 c 之后的所有值组成的新数组</span></span><br><span class="line"><span class="comment">// 注意：这种写法扩展运算符必须放在最后一位</span></span><br></pre></td></tr></table></figure>

<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> [a, b = <span class="number">2</span>, c, d] = arr</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量 a b c d 将对应成[1, 2, 3, undefined]</span></span><br><span class="line"><span class="comment">// 没有匹配到的值将会默认为 undefined，匹配到 undefined 将会自动赋为默认值</span></span><br></pre></td></tr></table></figure>

<h4 id="数组解构赋值的使用"><a href="#数组解构赋值的使用" class="headerlink" title="数组解构赋值的使用"></a>数组解构赋值的使用</h4><ol>
<li><p><strong>交换变量</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"></span><br><span class="line"><span class="comment">// a = 10</span></span><br><span class="line"><span class="comment">// b = 20</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>接收函数中的数组返回值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;请求成功&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [status, data, msg] = <span class="title function_">getUserInfo</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h1 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h1><p>对象的解构赋值是无序的，将直接按照属性名称去匹配</p>
<h4 id="简单的解构赋值-1"><a href="#简单的解构赋值-1" class="headerlink" title="简单的解构赋值"></a>简单的解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = obj</span><br><span class="line"></span><br><span class="line"><span class="comment">// name : &#x27;zhangsan&#x27;</span></span><br><span class="line"><span class="comment">// age : 18</span></span><br><span class="line"><span class="comment">// 按照属性名称匹配对应的值</span></span><br></pre></td></tr></table></figure>

<h4 id="对象与数组嵌套的解构赋值"><a href="#对象与数组嵌套的解构赋值" class="headerlink" title="对象与数组嵌套的解构赋值"></a>对象与数组嵌套的解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [&#123;</span><br><span class="line">        <span class="attr">hobbyName</span>: <span class="string">&#x27;听歌&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">hobbyName</span>: <span class="string">&#x27;看电影&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    <span class="attr">hobby</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123; <span class="attr">hobbyName</span>: name1 &#125;,</span><br><span class="line">        &#123; <span class="attr">hobbyName</span>: name2 &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125; = obj</span><br><span class="line"></span><br><span class="line"><span class="comment">// name1: &#x27;听歌&#x27;</span></span><br><span class="line"><span class="comment">// name2: &#x27;看电影&#x27;</span></span><br></pre></td></tr></table></figure>
<p>注意：<code>hobby</code> 后的“:”跟着的是 <code>obj</code> 对象中的 <code>hobby</code> 数组，<code>hobbyName</code> 后的“:”跟着的是为了区分两个同名的 <code>hobbyName</code> 所起的别名</p>
<h4 id="扩展运算符：-1"><a href="#扩展运算符：-1" class="headerlink" title="扩展运算符：..."></a>扩展运算符：<code>...</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name, ...obj1&#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 对象中的 age 和 sex 属性将会被封装成 obj1 对象</span></span><br><span class="line"><span class="comment">// 注意：这种方式使用的扩展运算符只能够放在最后一位</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;...obj1, ...obj2, ...obj3&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象 obj 中会有 obj1-3 的全部属性</span></span><br><span class="line"><span class="comment">// 注意：如果存在重名属性，后面的会覆盖掉前面的</span></span><br></pre></td></tr></table></figure>

<h4 id="对已经声明的变量进行解构赋值"><a href="#对已经声明的变量进行解构赋值" class="headerlink" title="对已经声明的变量进行解构赋值"></a>对已经声明的变量进行解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line">(&#123; age &#125; = obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：以上的解构赋值语句如果没有加 () 会被视为是一个作用域而报错</span></span><br></pre></td></tr></table></figure>

<h4 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age = <span class="number">18</span>, sex = <span class="string">&#x27;男&#x27;</span>&#125; = obj</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在匹配时，如果匹配不到对应的属性或者是对应的属性为 undefined 时，将会寻找默认值自动匹配</span></span><br></pre></td></tr></table></figure>

<h4 id="对象解构赋值的使用"><a href="#对象解构赋值的使用" class="headerlink" title="对象解构赋值的使用"></a>对象解构赋值的使用</h4><ol>
<li><p><strong>传递乱序参数和设置默认值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用解构赋值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AJAX</span>(<span class="params">option</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: option.<span class="property">url</span>,</span><br><span class="line">        <span class="attr">type</span>: option.<span class="property">type</span> || <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: option.<span class="property">data</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用解构赋值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AJAX</span>(<span class="params"> &#123; url, data, type = <span class="string">&#x27;get&#x27;</span> &#125; </span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">type</span>: type,</span><br><span class="line">        <span class="attr">data</span>: data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">AJAX</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/getUserInfo&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取一个函数中的多个返回值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserInfo</span> (userId) &#123;</span><br><span class="line">    <span class="comment">// ...ajax</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;请求成功&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;status, data, msg&#125; = <span class="title function_">getUserInfo</span>(<span class="number">123</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h1><ol>
<li><p><strong>直接取值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a b c 三个变量将会分别对应字符串 str 的前三个字符</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>扩展运算符：<code>...</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> [a, b, ...c] = str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量 a b 依旧对应前两个字符，变量 c 则对应的是后面的每个字符所组成的数组</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>分割字符串</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> [ ...spStr1 ] = str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码效果等同于：let spStr1 = str.split(&#x27;&#x27;);</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>提取属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> &#123; length &#125; = str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// length = 12</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【ES6】var、let、const</title>
    <url>/posts/37909/</url>
    <content><![CDATA[<blockquote>
<p>let 这个关键字都是在 ES6 中新出现的，作用与 var 是一样的，可以用来声明变量。const 关键字也是在 ES6 中新出现的，不同的是 const 是用来声明常量。</p>
</blockquote>
<span id="more"></span>


<h1 id="let-amp-var"><a href="#let-amp-var" class="headerlink" title="let &amp; var"></a>let &amp; var</h1><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>「块级作用域」这个概念是在 ES6 中新引入的概念，就是一个 <code>&#123;&#125;</code> 「花括号」而已。所有的花括号之内都是一个单独的块级作用域，但是有一种特殊情况不是，那就是在声明对象的时候字面式声明一个对象的时候不是。</p>
<h4 id="let和var的区别"><a href="#let和var的区别" class="headerlink" title="let和var的区别"></a>let和var的区别</h4><ol>
<li><p>let 和 var 最大的区别就是 <strong>let声明的对象只在当前作用域生效</strong><br>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不能重复声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure>
<p>上面的代码将会直接报错</p>
</li>
<li><p>let 不存在「变量提升」<br>使用 var 关键字声明的变量在执行上下文中会有一个变量提升的现象，但是使用 let 声明的变量将不会出现这个现象，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)  <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>暂存死区</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的这段代码将会直接报错。因为 ES6 中单独的作用域内使用 let 或者是 const 声明的变量将会形成一个封闭的作用域，这直接导致重名的变量无法访问到父级作用域的变量，进而报错。</p>
</li>
</ol>
<h1 id="const-常量"><a href="#const-常量" class="headerlink" title="const 常量"></a>const 常量</h1><ol>
<li><p>声明常量<br>const 声明时与 let 声明并没有什么区别，唯一的区别是使用 const 声明常量时需要在声明的同时初始化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> a <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不能修改<br>声明的既然是常量，那么当然是不允许被修改的。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line">a = <span class="number">20</span> <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
<p> <strong>如果声明的是一个引用类型的数据，那么它将可以被修改</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)  <span class="comment">// zhangsan</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)  <span class="comment">// lisi</span></span><br></pre></td></tr></table></figure>
<p>实际上 const 声明的常量仅仅只是「锁定」了<strong>栈内存</strong>中的值，而引用数据类型实际存放的地方是在<strong>堆内存</strong>中的。所以对象类型的值是可以被修改的。</p>
<p> 那么我们既然是声明了一个常量的话当然是不希望这个常量能够被修改，如果是一个对象类型的常量的话，我们必须通过 <code>Object.freeze()</code> 这个方法来「冻结」这个对象类型的常量。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 冻结</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj)</span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// zhangsan</span></span><br></pre></td></tr></table></figure>
<p>在上面这个例子中两次的输出都是 <code>zhangsan</code> 这说明了我们并没有修改到 <code>obj</code> 这个对象，这样子就是声明了一个对象类型的常量表了。</p>
]]></content>
      <categories>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】闭包</title>
    <url>/posts/47023/</url>
    <content><![CDATA[<p>闭包：<strong>「函数」和「函数内部能访问到的变量」（也叫环境）的总和，就是一个闭包。</strong><br>闭包在js面向对象中是一个非常重要的知识点，许多的面向对象的特性都可以通过闭包来体现。</p>
<span id="more"></span>

<h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> local = <span class="string">&#x27;变量&#x27;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(local)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面函数内部的三行代码中，有一个局部变量 <code>local</code>，有一个函数 <code>foo</code> ，<code>foo</code> 里面可以访问到 <code>local</code> 变量。这就是一个闭包，就是这么简单。</p>
<p>其实大家比较熟知的闭包是下面的这种嵌套函数的形式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> local = <span class="number">1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>)&#123;</span><br><span class="line">    local++</span><br><span class="line">    <span class="keyword">return</span> local</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">func</span>()</span><br></pre></td></tr></table></figure>
<p>这里面呢确实有闭包的存在，<code>local</code> 变量和 <code>bar</code> 函数就组成了一个闭包。</p>
<p><strong>那么为什么要嵌套函数呢？</strong></p>
<p>是因为需要局部变量，所以才把 <code>local</code> 放在一个函数里，如果不把 <code>local</code> 放在一个函数里，<code>local</code> 就是一个全局变量了，达不到使用闭包的目的——隐藏变量（等会会讲）。</p>
<p>可能看到「闭包」这个名字，就一定觉得要用什么包起来才行。其实这是翻译问题，闭包的原文是 Closure，跟「包」没有任何关系。</p>
<p>所以函数套函数只是为了造出一个局部变量，<strong>跟闭包无关</strong>。</p>
<p><strong>为什么要 return bar 呢？</strong></p>
<p>因为如果不 <code>return</code>，你就无法使用这个闭包。把 <code>return bar</code> 改成 <code>window.bar = bar</code> 也是一样的，只要让外面可以访问到这个 <code>bar</code> 函数就行了。</p>
<p>所以 <code>return bar</code> 只是为了 <code>bar</code> 能被使用，也<strong>跟闭包无关</strong>。</p>
<hr>
<h1 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h1><p>闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」。</p>
<p>假设我们现在在做一个系统的注册登录功能，在写其中关于「用户年龄」的代码。</p>
<p>如果不使用闭包的话</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">age</span> = <span class="number">18</span> <span class="comment">// 18岁</span></span><br></pre></td></tr></table></figure>

<p>但是这么看起来是非常危险的，因为这将在全局的任何一个地方都可以直接的访问到这个 <code>age</code> 变量，如果不加校验的话，等会要是被修改成 「负数」 怎么办，对吧？</p>
<p>所以，我们不能让别人可以「直接访问」这个 <code>age</code> 变量。</p>
<p>我们需要使用「局部变量」</p>
<p>但是使用了局部变量的话，这个变量的又需要一个全局的作用域。这个时候应该怎么办？</p>
<p>我们可以主动暴露一个访问器（函数），让别人可以「间接访问」</p>
<blockquote>
<p>上面的思考过程其实也就是 闭包 使用函数嵌套形式的由来。</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改年龄，增加1岁</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">addAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        age += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改年龄，减少1岁</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">subLives</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            lives -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没办法再往下修改年龄啦&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>

<p>上面这也是一个闭包的例子。使用闭包之后可以更加规范的去管理我们的变量，这也是闭包的意义。总的来说这就是闭包，闭包也仅此而已。</p>
<hr>
<p>其实写到这里之后，可能由于我是学 Java 出身的，立马就想到了 Java 中实体类的封装。来看一段 Java 代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄必须为正数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简要说明一下上面这段代码：<br>首先声明一个私有化的 <code>age</code> 变量，然后为这个变量提供公有的 <code>get</code> 和 <code>set</code> 方法，可以让外界访问到这个 <code>age</code> 变量。当我们设置这个 <code>age</code> 变量的时候，我们可以在 <code>set</code> 方法中去定义一些规范，保证 <code>age</code> 值的一个正确性。</p>
<p>在我看来，刚刚的闭包的例子与上面的这段 Java 代码实现的是同一个功能。也就是说闭包其实是为了封装变量，只是在这里我们将其称为了隐藏变量，仅此而已。</p>
<blockquote>
<p>参考文章：<br><a href="https://zhuanlan.zhihu.com/p/22486908">「每日一题」JS 中的闭包是什么？</a></p>
</blockquote>
<hr>
<blockquote>
<p>分享一个小经验：<br>编程崇尚的是以简洁优雅为美，<font color=blue>很多时候如果你觉得一个概念很复杂，那么很可能是你理解错了</font></p>
</blockquote>
<p>大家加油：）</p>
]]></content>
      <categories>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>封装</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】创建对象</title>
    <url>/posts/15655/</url>
    <content><![CDATA[<p>这篇博客将会记录一下js中创建对象的几种不同的方式，分别是字面式声明、<code>new</code>关键字声明、构造函数声明、工厂模式声明、原型声明。</p>
<span id="more"></span>

<h1 id="字面式声明"><a href="#字面式声明" class="headerlink" title="字面式声明"></a>字面式声明</h1><p>声明格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接实例化一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用属性和函数</span></span><br><span class="line">obj.<span class="property">name</span>;</span><br><span class="line">obj.<span class="property">age</span>;</span><br><span class="line">obj.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="new关键字声明"><a href="#new关键字声明" class="headerlink" title="new关键字声明"></a>new关键字声明</h1><p><code>Object</code>对象是所有对象的父类，也称为根类、基类、超类。js中的所有对象都是<code>Object</code>对象的延伸，都是<code>Object</code>的子类。</p>
<p>声明格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.属性 = 属性值;</span><br><span class="line">obj.属性 = 属性值;</span><br><span class="line">obj.函数 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">obj</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">obj</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用属性和方法</span></span><br><span class="line">obj.<span class="property">name</span>;</span><br><span class="line">obj.<span class="property">age</span>;</span><br><span class="line">obj.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="工厂模式创建对象"><a href="#工厂模式创建对象" class="headerlink" title="工厂模式创建对象"></a>工厂模式创建对象</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个工厂</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createObj</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    obj.<span class="property">name</span> = name;</span><br><span class="line">    obj.<span class="property">age</span> = age;</span><br><span class="line">    obj.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过工厂实例化对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title function_">createObj</span>(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用属性和函数</span></span><br><span class="line">obj.<span class="property">name</span>;</span><br><span class="line">obj.<span class="property">age</span>;</span><br><span class="line">obj.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="原型模式创建对象"><a href="#原型模式创建对象" class="headerlink" title="原型模式创建对象"></a>原型模式创建对象</h1><p>概述：声明一个空的函数，再利用<code>prototype</code>去定义属性和函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明空函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用prototype去定义属性和函数</span></span><br><span class="line">fn.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">fn.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">fn.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用属性和方法</span></span><br><span class="line">obj.<span class="property">name</span>;</span><br><span class="line">obj.<span class="property">age</span>;</span><br><span class="line">obj.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure>

<p>第二种方式：直接使用一个json对象定义属性和函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明空函数</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用json对象定义属性和函数</span></span><br><span class="line">fn.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用属性和方法</span></span><br><span class="line">obj.<span class="property">name</span>;</span><br><span class="line">obj.<span class="property">age</span>;</span><br><span class="line">obj.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h1><p>混合模式是<strong>构造模式</strong>混合了<strong>原型模式</strong>一起创建的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型添加属性和方法</span></span><br><span class="line"><span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Obj</span>(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用属性和方法</span></span><br><span class="line">obj.<span class="property">name</span>;</span><br><span class="line">obj.<span class="property">age</span>;</span><br><span class="line">obj.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】垃圾回收机制</title>
    <url>/posts/31440/</url>
    <content><![CDATA[<p>JavaScript有自动收集内存中已经废弃的变量的功能，称为<strong>垃圾回收机制</strong></p>
<span id="more"></span>

<p>js中的局部变量仅在函数的执行过程中存在，一旦函数执行完毕之后局部变量则失去了意义，这个时候就需要去释放掉这个变量，回收内存。</p>
<p>上述的这个动作由js的垃圾收集器来完成。</p>
<p>垃圾收集器原理：找出没用的数据、<strong>打上标记</strong>、<strong>释放内存</strong>、<strong>周期性执行</strong>。</p>
<h2 id="标识无用变量的策略"><a href="#标识无用变量的策略" class="headerlink" title="标识无用变量的策略"></a>标识无用变量的策略</h2><h4 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h4><p>当变量进入或者是离开执行环境时，会给变量做上一个标记，周期性的将离开执行环境的变量清除。</p>
<h4 id="引用计数（不常用）"><a href="#引用计数（不常用）" class="headerlink" title="引用计数（不常用）"></a>引用计数（不常用）</h4><p>当一个<strong>堆内存中的对象</strong>被赋值给一个<strong>栈内存中的引用</strong>时，这个对象的计数 +1。<br>如果这个<strong>堆内存中的对象</strong>再次被赋值给一个<strong>栈内存中的引用</strong>时，这个对象的计数再 +1。<br>也就是现在这个对象的计数时2，即两个<strong>栈内存的应用</strong>指向同一个<strong>堆内存的对象</strong>。<br>如果两个<strong>栈内存中的引</strong>用其中一个发生了改变，也就是不再指向这个<strong>堆内存中的对象</strong>了，那么这个<strong>堆内存中的对象</strong>的计数 -1。<br>当这个<strong>堆内存中的对象</strong>的计数 &#x3D;0 的时候，垃圾收集器将释放该对象所占用的内存。</p>
<p><strong>循环引用的问题</strong><br>循环引用就是对象A中包含了一个指向对象B的指针，对象B中包含了一个指向对象A的指针。这样一来两个<strong>堆内存中的对象</strong>的计数都是2，当我们使用完这两个对象之后，垃圾收集器将无法回收这两个变量。需要我们手动的去将这两个对象置为 <code>null</code> 来释放内存。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ObjA</span> = &#123;&#125;;  <span class="comment">// ObjA计数1</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObjB</span> = &#123;&#125;;  <span class="comment">// ObjB计数1</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ObjA</span>.<span class="property">obj</span> = <span class="title class_">ObjB</span>; <span class="comment">// ObjB计数2</span></span><br><span class="line"><span class="title class_">ObjB</span>.<span class="property">obj</span> = <span class="title class_">ObjA</span>; <span class="comment">// ObjA计数2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动释放内存</span></span><br><span class="line"><span class="title class_">ObjA</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="title class_">ObjB</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】执行上下文</title>
    <url>/posts/54687/</url>
    <content><![CDATA[<p>执行上下文是js中很重要的一个概念，每次当js程序去调用一个函数时，就会去创建一个对应的执行上下文。我们可以先将执行上下文理解为当前代码执行的环境，这会产生一个作用域的概念，也就是我的上一篇文章所提到的。js引擎会销毁该函数的执行上下文。js程序在执行时每次遇到函数时都会做这样的操作。</p>
<span id="more"></span>

<h1 id="一、执行上下文生命周期"><a href="#一、执行上下文生命周期" class="headerlink" title="一、执行上下文生命周期"></a>一、执行上下文生命周期</h1><p>首先我们还是来对执行上下文有一个深入的了解，当一个函数被调用时，一个对应的执行上下文就会被创建。而一个执行上下文的生命周期可以分为两个阶段。<strong>创建阶段</strong>和<strong>执行阶段</strong></p>
<ul>
<li><strong>创建阶段</strong><br>在这个阶段中，执行上下文会分别创建<strong>变量对象</strong>，建立<strong>作用域链</strong>，以及确定<strong>this</strong>的指向。这些概念接下来都会仔细的说一下。</li>
<li><strong>执行阶段</strong><br>创建完成之后，开始逐行的执行代码。这个时候会完成变量赋值、函数引用、以及执行其他代码。</li>
</ul>
<h1 id="二、区别执行上下文和变量作用域"><a href="#二、区别执行上下文和变量作用域" class="headerlink" title="二、区别执行上下文和变量作用域"></a>二、区别执行上下文和变量作用域</h1><p>在上一篇文章重提到了一个作用域的概念。作用域与执行上下文都是在函数的中的概念，可能会有点冲突，导致理解起来容易混淆，这里有必要区别一下这两个概念。</p>
<p>执行上下文是在函数调用时才去动态的创建，因为不同的调用可能会是完全不同的参数。而变量作用域则是在函数声明时就确定了，跟函数的调用无关，函数在调用时只会去创建执行上下文。相比较而言，变量作用域更像是一个静态的概念，在函数声明时就确定下来的，函数内部的变量只能存活于这个作用域之中，不管是什么样的变量只要是在函数的内部去声明的，就肯定是跑不出函数的作用域中。（这里插一句：函数的参数也是函数的内部变量，存活于函数的作用域之中）而执行上下文呢则是在调用时才会产生的，甚至是在某种特殊的环境下会产生多个执行上下文，例如闭包。</p>
<p><strong>举个例子吧：</strong></p>
<blockquote>
<p>我们平时开的汽车，当这辆汽车被生产出来的时候，其中的功能就已经是确定的了，比如最高能达到多高的时速、最多能坐几个人、能载重多少重量等等，这相当于是确定了作用域。但是在我们实际的使用的时候由于路面环境的不同、用途不同、司机不同等等的原因导致这辆汽车发挥出来的效果也是不用。这就相当于是每次执行的时候都创建了对应的执行上下文。</p>
<p><strong>上面的例子可能有些不太恰当的地方，仅代表个人的理解</strong></p>
</blockquote>
<h1 id="三、执行上下文栈"><a href="#三、执行上下文栈" class="headerlink" title="三、执行上下文栈"></a>三、执行上下文栈</h1><p>在js中函数的调用是有严格的先后顺序的，在一个js程序中正在执行的函数有且仅有一个，另外的函数想要执行必须等待当前函数执行完毕后按照顺序排队执行。如果是一个函数中包含了另外一个函数的执行的话那么需要在执行到<strong>被包含的函数</strong>中时去执行<strong>被包含的函数</strong>，等待被包含的函数<strong>执行完毕</strong>之后才可以继续接着执行下面的内容。这样的执行顺序天然的符合“<strong>栈</strong>”这种后入先出的数据结构。我们来看一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn函数开始执行&quot;</span>);</span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn函数执行完毕&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2函数开始执行&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2函数执行完毕&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>在上面的这段代码中，js引擎首先创建了一个全局的执行上下文。</strong><br>将这个全局执行上下文压入执行上下文栈中。此时的栈结构：<code>栈底 -&gt; 全局 -&gt; 栈顶</code><br><strong>之后开始执行代码，当执行到第12行调用了<code>fn</code>函数的时候，去创建了一个<code>fn</code>的执行上下文。</strong><br>将<code>fn</code>的执行上下文再压入栈。此时的栈结构：<code>栈底 -&gt; 全局 -&gt; fn -&gt; 栈顶</code><br><strong>开始执行<code>fn</code>函数中的代码。执行到第3行的时候调用了<code>fn2</code>，这个时候会去创建一个<code>fn2</code>的执行上下文。</strong><br>将<code>fn2</code>压入栈。此时的栈结构：<code>栈底 -&gt; 全局 -&gt; fn -&gt; fn2 -&gt; 栈顶</code><br><strong>之后开始执行<code>fn2</code>的内容，当函数<code>fn2</code>执行完毕之后，销毁<code>fn2</code>的执行上下文。</strong><br>销毁执行上下文就是将该上下文弹出栈，此时弹出<code>fn2</code>后的栈结构：<code>栈底 -&gt; 全局 -&gt; fn -&gt; 栈顶</code><br><strong>再继续执行函数<code>fn</code>中剩余的部分，当函数<code>fn</code>执行完毕之后销毁了函数<code>fn</code>的执行上下文。</strong><br>弹出<code>fn</code>，此时的栈结构：<code>栈底 -&gt; 全局 -&gt; 栈顶</code><br><strong>等到关闭浏览器窗口的时候会去销毁全局的执行上下文。</strong><br>此时的栈结构：<code>栈底 -&gt;  -&gt;栈顶</code></p>
</blockquote>
<p>上面的这个例子很形象的阐述了函数调用栈是如何去管理执行上下文的执行顺序的。每次在调用函数的时候会去创建一个执行上下文，并将其压入栈顶。而执行的时候也是只执行位于栈顶的函数，执行完毕后将栈顶的函数弹出栈，再接着执行栈顶的函数。按照这个顺序去执行，到最后就只剩下一个全局的执行上下文，关闭浏览器窗口后把最后一个全局上下文弹出栈，之后调用栈为空，也意味着程序执行完毕。</p>
<h1 id="四、作用域链"><a href="#四、作用域链" class="headerlink" title="四、作用域链"></a>四、作用域链</h1><p><strong>我们先来看一段代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;全局的name&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name1 = <span class="string">&quot;全局的name1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name2 = <span class="string">&quot;全局的name2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;fn的name&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> name1 = <span class="string">&quot;fn的name1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> name =<span class="string">&quot;fn2的name&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name);  <span class="comment">// 输出fn2的name</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name1); <span class="comment">// 输出fn的name1</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name2); <span class="comment">// 输出全局的name2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>
<p>这段代码中，很清晰的向我们展示了什么是作用域链。在函数<code>fn2</code>的内部去输出<code>name</code>这个变量，首先是在当前函数的作用域也就是<code>fn2</code>的执行上下文中去寻找<code>name</code>这个变量，找到了之后直接输出。如果找不到，例如变量<code>name1</code>的这种情况，则会去上一级的作用域中去寻找，也就是函数<code>fn</code>的作用域，找到后再输出。如果还是找不到，例如变量<code>name2</code>的情况，那么就会再到上一级的作用域中去寻找，找到后再输出。一级一级的网上去寻找形成了一个链式的操作，称之为<strong>作用域链</strong>。</p>
<p><strong>分析作用域链的形成</strong></p>
<blockquote>
<p>结合一下前文提到过的函数调用栈的概念，一级一级网上去查找变量的这个过程，其实就是在函数调用栈中去一级一级的往栈底的执行上下文去查找。也就是说作用域链是在函数调用栈中由栈顶的执行上下文去往栈底的执行上下文去一级一级的链起来形成的作用域链。</p>
</blockquote>
<h1 id="五、变量对象（Variable-Object，VO）"><a href="#五、变量对象（Variable-Object，VO）" class="headerlink" title="五、变量对象（Variable Object，VO）"></a>五、变量对象（Variable Object，VO）</h1><p>变量对象无非也是一个对象，对象就是为了承载数据而存在的。所以变量对象就是一些数据的载体，只是这个对象我们并不能够去实际的创建出来，看不见摸不着而已。</p>
<h2 id="变量对象的创建"><a href="#变量对象的创建" class="headerlink" title="变量对象的创建"></a>变量对象的创建</h2><ol>
<li>建立arguments对象。检查当前上下文中的参数，建立该对象下的属性与属性值。</li>
<li>检查当前上下文的函数声明，也就是使用function关键字声明的函数。在变量对象中以函数名建立一个属性，属性值为指向该函数所在内存地址的引用。如果函数名的属性已经存在，那么该属性将会被新的引用所覆盖。</li>
<li>检查当前上下文中的变量声明，每找到一个变量声明，就在变量对象中以变量名建立一个属性，属性值为undefined。如果该变量名的属性已经存在，为了防止同名的函数被修改为undefined，则会直接跳过，原属性值不会被修改。这里牵扯到一个变量提升的概念，面试常考。</li>
</ol>
<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>变量提升这个概念其实很好理解，在一个js程序中，使用<code>var</code>关键字声明的变量会在程序执行时提前去<strong>声明</strong>。仅此而已。我们再来看看js程序是如何去声明一个变量的。<code>var name;</code>这样就声明了一个变量名为<code>name</code>的变量。这么声明一个变量的话，变量的值毫无疑问就是一个<code>undefined</code>。总结一下就是：js引擎将使用<code>var</code>声明的变量赋值为<code>undefined</code>放在了程序开始执行的第一步去做了。这个概念就这么简洁明了的解释清楚了。</p>
<p><strong>变量提升的作用：</strong><br>那为什么js引擎要做这个变量提升的事情呢，这个主要还是为了节约CPU开销去考虑的一个事情，因为声明变量是需要去在内存中开辟出一块空间来存放这个变量的。这个动作是比较耗费CPU资源的一个动作，如果在程序中大量的去执行这个动作的话，毫无疑问会对程序执行的效率造成一定的影响。所以将这一类的操作，全部提前一次性的给他完成了，以这样的方式来提升程序的执行效率。</p>
<p><strong>我们结合一个例子来更加清楚的理解一下这个概念：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>这是一个简单的例子，很好的展现了变量提升这个概念。首先在全局作用域中，js引擎去搜索了所有<code>var</code>声明的变量，然后在当前的这个作用域中提前声明，再逐行执行代码。也就是说上面的这段代码实际上是下面的这个样子的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出undefined</span></span><br><span class="line">a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>这么看来就毫无疑问输出一个<code>undefined</code>了。</p>
<h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p>介绍一个很重要的对象，<code>window</code>对象，这是一个内置的全局对象，之所以说这个对象很重要呢是因为我们所声明的一些全局变量都是这个对象下的属性，我们所写的方法也是这个对象的方法。</p>
<p>我个人其实更愿意将这个<code>window</code>对象理解为一个特殊的<strong>变量对象</strong>（一个全局的变量对象）我们来分析一下变量对象在创建的时候都做了什么和<code>widnow</code>对象都有什么。</p>
<ol>
<li>首先创建变量对象的第一步是：建立arguments对象。检查当前上下文中的参数，建立该对象下的属性与属性值。<br> <code>window</code>对象做为一个全局的对象，并没有参数传递进来，自然也就没有这一步。</li>
<li>然后第二步是：检查当前执行上下文中的函数声明，在变量对象中以函数名建立一个属性，属性值为指向该函数所在内存地址的引用。<br> 这一步在<code>window</code>对象中是有体现的，因为在js程序中声明的全局函数都是可以直接通过<code>window</code>对象去直接<code>.</code>的调用的。而且<code>window</code>对象还为我们内置了许多的方法可以直接调用，不需要自己手动的去写，封装了一些更方便的工具方法。</li>
<li>最后第三步是：检查当前上下文中的变量声明，每找到一个变量声明，就在变量对象中以变量名建立一个属性，属性值为undefined。<br> 我们在声明全局的变量时其实就是在声明一个<code>window</code>对象的属性。</li>
</ol>
<p><strong>来看一些简单的例子：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span> === name); <span class="comment">// 输出true</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">fn</span>(); <span class="comment">// 输出fn</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，定义的全局变量或者是方法，都可以使用<code>windwow</code>去<code>.</code>一下调用出来。甚至是一个没有定义的变量，也可以使用<code>window</code>对象去<code>.</code>出来。在上面作用域的哪个例子中如果使用<code>window</code>对象去调用变量<code>name1</code>的话是不会报错的。我们来看一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name1 = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);   <span class="comment">// 输出zhangsan</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name1</span>);  <span class="comment">//输出undefined</span></span><br><span class="line"><span class="title function_">fn</span>();  <span class="comment">// 输出zhangsan</span></span><br></pre></td></tr></table></figure>
<p>我们再来看一个例子，然后分析一下这个<code>window</code>对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);  <span class="comment">// 输出undefined</span></span><br><span class="line"></span><br><span class="line">conosle.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name1</span>);  <span class="comment">// 输出undefined</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：上面这个例子需要在IE浏览器中运行才会出效果</strong></p>
<blockquote>
<p>以上是我的一些个人看法，如果有不对的地方，还请在评论区直接指出。</p>
</blockquote>
<h2 id="活动对象（Activation-Object，AO）"><a href="#活动对象（Activation-Object，AO）" class="headerlink" title="活动对象（Activation Object，AO）"></a>活动对象（Activation Object，AO）</h2><p>前文提到的变量对象在执行上下文的<strong>创建阶段</strong>被创建出来，但是这个时候我们是没办法去访问变量对象里面的属性的。<br>但是在执行上下文的<strong>创建阶段</strong>结束后进入<strong>执行阶段</strong>时，变量对象会转变成为活动对象。这是就可以访问里面的属性了。<br>所以，实际上变量对象和活动对象是同一个对象，只是处于执行上下文生命周期的不同阶段而已。</p>
<h1 id="六、this关键字"><a href="#六、this关键字" class="headerlink" title="六、this关键字"></a>六、this关键字</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>首先要说明的一点是：<code>this</code>并不是在定义函数的时候确定的，前文提过，一个执行上下文在创建的阶段最重要的三件事之中其中之一就是确定<code>this</code>的指向，所以<code>this</code>是在执行上下文创建的时候才会去指定的。而执行上下文有全局的还有函数的，因此<code>this</code>可以被剖析为全局的<code>this</code>和函数的<code>this</code>。<br>实际上，如果在一个对象中去定义了一个函数的话，其实是将这个函数在堆内存中声明了一下，再去赋值给对象中的属性，所以在调用这个对象的这个函数的属性的时候其实并不一定是在同一个作用域下去调用的，针对不同的作用域，<code>this</code>的指向也就不同。</p>
<p>我们来看一个例子加深理解：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">subObj</span>: &#123;</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">fn</span>(); <span class="comment">// 输出lisi</span></span><br><span class="line">obj.<span class="property">subObj</span>.<span class="title function_">fn</span>() <span class="comment">// 输出undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> say = obj.<span class="property">subObj</span>.<span class="property">fn</span>;</span><br><span class="line"><span class="title function_">say</span>(); <span class="comment">// 输出zhangsan</span></span><br></pre></td></tr></table></figure>
<p>在上面这个例子中，三个<code>this</code>分别指向三个不同的对象。</p>
<p>第一个<code>obj.fn()</code>直接由<code>obj</code>对象调用，指向的是<code>obj</code>对象。</p>
<p>第二个<code>obj.subObj.fn()</code>由<code>obj</code>对象去调用了<code>subObj</code>对象，再由<code>subObj</code>对象去调用了<code>fn</code>方法，所以实际上是<code>subObj</code>对象去调用了<code>fn</code>方法，所处的也就是<code>sub</code>对象的作用域之中，自然指向的也就是<code>sub</code>对象了。</p>
<p>第三个<code>say</code>对象是由<code>obj.subObj.fn</code>对象赋值而来的，而<code>say</code>对象又是处于全局的作用域下，所以在这里虽然是声明了一个<code>obj.subObj.fn</code>对象，但是所处的作用域确实一个全局作用域，指向的也就是全局中的<code>window</code>对象。</p>
<p>上面这个例子很好的诠释了<code>this</code>这个关键字在不同情况下指向的是完全不同的对象。<strong>谨记一点<code>this</code>关键字是在调用时才能够确定指向的</strong>。</p>
<h3 id="全局中的this"><a href="#全局中的this" class="headerlink" title="全局中的this"></a>全局中的this</h3><p>全局中的<code>this</code>对象非常简单，就是指向了上文提到的<code>window</code>对象，也就是说任何在函数外部的<code>this</code>都是指向了<code>window</code>对象。<br>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>) <span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure>
<p>上面这个例子中，直接在全局中比较<code>this</code>对象和<code>window</code>对象，结果为true。充分证明了在全局环境中，<code>this</code>指向的就是<code>window</code>对象。</p>
<h3 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h3><ol>
<li><p><strong>普通函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 输出Window</span></span><br></pre></td></tr></table></figure>
<p>这个很好理解，<code>fn()</code>处于一个全局作用域中由<code>window</code>对象直接调用，所以<code>this</code>指向的是<code>window</code>对象本身。</p>
</li>
<li><p><strong>构造函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>); <span class="comment">// 输出zhangsan</span></span><br></pre></td></tr></table></figure>
<p>任何使用<code>new</code>关键字创建出来的都是一个对象，是一个在<strong>堆内存</strong>中的对象，所以在这里<code>this</code>指的是新创建的这个对象。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】作用域</title>
    <url>/posts/1709/</url>
    <content><![CDATA[<p>js中仅有两种作用域，<strong>全局作用域</strong>和<strong>局部作用域</strong>，<strong>局部作用域</strong>又被称为<strong>函数作用域</strong>。js中没有块级作用域这个概念，块级作用域只在一些其他的语言中才有，比如：Java、C++。作用域的这个概念是由于变量起作用的区域不用才被引出来的，所以作用域又被称为变量作用域。</p>
<!-- more  -->

<h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><p>先简单了解一下全局变量和局部变量。js可以简单的将在函数外部定义的变量称为全局变量，在函数内定义的变量称为局部变量。变量作用域的概念也因此而生，变量作用域实际就是变量产生作用的区域。全局变量在整个js程序中的任何地方都可以去调用，所以全局变量生存在一个全局作用域中。而局部变量只能够在函数内部去调用，出了函数之后就无法再访问到了，因此局部变量只生存在函数的作用域中。</p>
<blockquote>
<p><strong>注意：在函数内部声明变量时一定要使用显式声明，即使用<code>var</code>关键字声明。如果在函数内部隐式声明一个变量的话，实际声明的是一个全局变量</strong></p>
</blockquote>
<p><strong>来看一个例子：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> ()  &#123;</span><br><span class="line">    <span class="keyword">var</span> name1 = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);  <span class="comment">// 输出zhangsan</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name1); <span class="comment">// 输出lisi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 输出zhangsan</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1); <span class="comment">// 报错 name1 is not defined</span></span><br></pre></td></tr></table></figure>
<p>这个例子中变量<code>name</code>是一个全局变量能够在程序的任何地方访问到。而变量<code>name1</code>声明在<code>fn</code>函数内部，是一个局部变量，所以仅仅只能在<code>fn</code>内部访问到。在这个例子中有两个作用域，一个是变量<code>name</code>位于的全局作用域，一个是变量<code>name1</code>位于的局部作用域。但是我们并不能够简单的将局部作用域理解为函数的花括号之内，因为js是没有块级作用域这个概念的，我们应该将其理解为函数的作用域。</p>
]]></content>
      <categories>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】数据类型</title>
    <url>/posts/24923/</url>
    <content><![CDATA[<p>我们所使用的编程语言，不管是js也好或者是其他的一些语言，例如：Java、C++。我们在编写程序的时候实际上都是在对数据进行操作。如果脱离了数据，那么我们编写的程序将变得毫无意义。甚至脱离了数据之后我们将无法编程。由此，数据类型便成了重中之重。</p>
<span id="more"></span>

<h1 id="一、js数据类型简介"><a href="#一、js数据类型简介" class="headerlink" title="一、js数据类型简介"></a>一、js数据类型简介</h1><ol>
<li>js的数据类型主要分为两大类，原始类型（即基本数据类型）和对象类型（即引用数据类型）。</li>
<li>js中的基本数据类型可以分为5种：Number、String、Boolean、Undefined、Null。</li>
<li>js中的引用数据类型也就是对象类型Object，主要是Object、Array、Function这几种。</li>
</ol>
<h1 id="二、基本数据类型和引用数据类型的区别"><a href="#二、基本数据类型和引用数据类型的区别" class="headerlink" title="二、基本数据类型和引用数据类型的区别"></a>二、基本数据类型和引用数据类型的区别</h1><p>首先这里需要先简单的介绍一下堆内存和栈内存。计算机的内存中有堆内存和栈内存，栈内存呢是一个一个排列下去的是有序的，也是固定大小的，像是数组一样；而堆内存呢则刚好是与栈内存相反，堆内存中的数据是无序的，也是不固定大小的。</p>
<h2 id="堆栈内存的优缺点"><a href="#堆栈内存的优缺点" class="headerlink" title="堆栈内存的优缺点"></a>堆栈内存的优缺点</h2><p>栈内存由于是有序的所以在查询数据的时候直接按照排序的序号去查的话是比较快的，但是由于固定大小的原因呢，栈内存无法随心所欲的存储数据。堆内存由于不固定大小，所以在其中存储的数据是比较方便的，也就是想怎么存就怎么存，但是因为堆内存中的数据是无序的，所以在查找的时候就是要比较慢一些。  </p>
<blockquote>
<p>总结：就是栈内存优点是查询快，存储不方便；而堆内存则是存储方便，但查询慢。  </p>
</blockquote>
<p><em>这么说可能还是有点不太形象，举个例子吧。栈内存中的空间呢就像是现实生活中的商品房一样，一个一个的房子都是开发商建好的，每个房子的大小是固定的，每个房子也有对应的门牌号，比如某某单元的几零几这样，查找起来呢是比较方便。堆内存呢就像是一栋一栋的独栋别墅一样，没有一个集中的管理，但是大小不固定，可能是有一块地用来建别墅，我今天打算建个100平米的别墅，明天我就可能扩建到200平米了，甚至是再往上多建几层。</em>    </p>
<p>既然堆内存和栈内存有这样的优缺点，那么何不将两者的优点结合起来，在栈内存中存放指向堆内存中的指针。这样可以即查询快又存储数据方便。这样的数据也就是上面说的引用数据类型。我们待会细说。</p>
<h1 id="三、基本数据类型的特点"><a href="#三、基本数据类型的特点" class="headerlink" title="三、基本数据类型的特点"></a>三、基本数据类型的特点</h1><ol>
<li><p>基本数据类型的赋值仅仅只是简单的值传递：<br>如果需要从一个变量向另一个变量去赋一个基本数据类型的值，那么会将其中基本变量的值生成一个副本再将这个副本的值直接传递过去，而不是引用同一个值。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出18</span></span><br><span class="line">a++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出19</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出18</span></span><br></pre></td></tr></table></figure>
<p>在上述的例子中，一开始先将变量<code>a</code>的值赋给了变量<code>b</code>，这时变量<code>a</code>的值和变量<code>b</code>的值都是18，然后我们再将变量<code>a</code>的值进行<code>++</code>操作，变量<code>a</code>的值变成了19，但是变量<code>b</code>的值任然还是18，由此可见变量<code>a</code>和变量<code>b</code>的值是完全互不相干的，没有关系的。</p>
<p> <em>举个例子吧，就比如我们平时在使用<code>ctrl + c</code>和<code>ctrl + v</code>复制黏贴的时候是一样的，我们复制的文本并不会随着原来文本的改变而改变，同样原来的文本也不会因为被复制的文本的改变而发生任何变化。同理，变量之间的赋值也是一次简单的“<code>ctrl + c</code>和<code>ctrl + v</code>”而已。</em></p>
</li>
<li><p>基本数据类型的值是固定的，无法修改的。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> anotherStr = str.<span class="title function_">replace</span>(<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 输出 string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherStr); <span class="comment">// 输出 tring</span></span><br></pre></td></tr></table></figure>
<p>在上面的这个例子中我们可以看到，字符串<code>str</code>的值一直都是<code>string</code>，尽管我们调用的<code>replace</code>方法将其中的<code>s</code>替换成了空字符串，但是实际上的<code>str</code>的值并没有被修改，任然是<code>string</code>。修改后的值传回来了一个新的变量，这个变量的值才是<code>tring</code>，然而这是一个全新的变量跟原来的<code>str</code>并没有什么关系。</p>
<p> <strong>我们再来看一个例子：</strong></p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 输出zhangsan</span></span><br><span class="line">name = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 输出lisi</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中看起来<code>name</code>的值由“zhangsan”被修改为“lisi”，但其实并不是修改，原来的“zhangsan”还是“zhangsan”，只是被一个新的值“lisi”覆盖掉了而已。</p>
<pre><code>*这么说起来可能不是很形象，举个例子吧。现实生活中我们在画画的时候如果原本的颜色是红色的，但是我们想要将其修改为绿色的话我们是将新的绿色的颜料直接涂抹在原来红色的地方上面，这样在我们看来好像红色被修改为绿色，但红色还是红色只是被覆盖了我们看不到了而已，我们看到的是绿色。在这个例子中也是同理。*
</code></pre>
<h1 id="四、五种基本数据类型详解"><a href="#四、五种基本数据类型详解" class="headerlink" title="四、五种基本数据类型详解"></a>四、五种基本数据类型详解</h1><h2 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h2><p>我们要检测一种基本数据类型时可以使用typeof运算符去检测，其语法是<code>typeof 变量</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);            <span class="comment">// 输出number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;string&#x27;</span>);       <span class="comment">// 输出string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);           <span class="comment">// 输出boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);           <span class="comment">// 输出Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);      <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);   <span class="comment">// 输出function</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：检测null时返回的是一个Object类型，这是因为null类型其实是一个空的对象应用，也就是一个对象但什么都没有。</p>
</blockquote>
<h2 id="Number-数值类型"><a href="#Number-数值类型" class="headerlink" title="Number(数值类型)"></a>Number(数值类型)</h2><p>在一些强语言中，数值类型可能会分为整数和浮点数，再根据占用的长度去再往下继续分为好几种数据类型，比如Java和C。但是在js中数值类型只有一种就是Number，在定义一个数值类型时加不加小数点都是可以的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> number); <span class="comment">// 输出number</span></span><br></pre></td></tr></table></figure>
<p>上面的这个例子中为我们展示了如何去定义一个number类型的变量，以及如何去检测一个number变量。<br>js中如果需要表示一个非常大或者是非常小的数字可以使用科学计数法，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">123e+5</span>;  <span class="comment">// 表示的是 12300000</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">123e-5</span>;  <span class="comment">// 表示的是 0.00123</span></span><br></pre></td></tr></table></figure>
<p>js中表示最大的数值是<code>Number.MAX_VALUE</code>，与之对应的是<code>Numver.MIN_VALUE</code>表示的是js中最小的数值。</p>
<p>js中还有一个非常特殊的数值类型，就是NaN(Not A Number)即非数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）。例如，在其他编程语言中，任何数值除以0都会导致错误，从而停止代码执行。但在JavaScript中，任何数值除以0会返回NaN，因此不会影响其他代码的执行。</p>
<p>NaN有两个非同寻常的点，一个是任何涉及NaN的操作都会返回NaN，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> + <span class="number">1</span>); <span class="comment">// 输出NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> - <span class="number">1</span>); <span class="comment">// 输出NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> * <span class="number">1</span>); <span class="comment">// 输出NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> / <span class="number">1</span>); <span class="comment">// 输出NaN</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：这个特点在多步计算中有可能导致问题，需要特别注意</p>
</blockquote>
<p>另一个是NaN与任何值都不相等，包括NaN本身，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>); <span class="comment">// 输出false</span></span><br></pre></td></tr></table></figure>

<h2 id="String-字符串类型"><a href="#String-字符串类型" class="headerlink" title="String(字符串类型)"></a>String(字符串类型)</h2><p>在js中的字符串类型是需要使用引号引起来的，使用单引号’’或者是双引号””都可以，但是不要混合着用，也不能嵌套使用单双引号。</p>
<p>string类型有些特殊，因为字符串具有可变的大小，所以显然它不能被直接存储在具有固定大小的变量中。由于效率的原因，我们希望JS只复制对字符串的引用，而不是字符串的内容。但是另一方面，字符串在许多方面都和基本类型的表现相似，而字符串是不可变的这一事实（即没法改变一个字符串值的内容），因此可以将字符串看成<strong>行为与基本类型相似的不可变引用类型</strong></p>
<p>如果需要在String类型中输出一些特殊的字符的话可以使用<code>\</code>字符来转义，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我说：\&quot;我想吃西瓜\&quot;&quot;</span>); <span class="comment">// 输出 我说：&quot;我想吃西瓜&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果想输出一个<code>\</code>的话则需要再使用一个<code>\</code>来转义，即<code>\\</code></p>
</blockquote>
<h2 id="Boolean-布尔类型"><a href="#Boolean-布尔类型" class="headerlink" title="Boolean(布尔类型)"></a>Boolean(布尔类型)</h2><p>Boolean类型只有两个值：true表示真和false表示假。<br>虽然Boolean类型的字面值只有两个，但JavaScript中所有类型的值都有与这两个Boolean值等价的值。要将一个值转换为其对应的Boolean值，可以调用类型转换函数Boolean()，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> messageAsBoolean = <span class="title class_">Boolean</span>(message);</span><br></pre></td></tr></table></figure>
<p>在这个例子中，字符串message被转换成了一个Boolean值，该值被保存在messageAsBoolean变量中。可以对任何数据类型的值调用Boolean()函数，而且总会返回一个Boolean值。至于返回的这个值是true还是false，取决于要转换值的数据类型及其实际值。下表给出了各种数据类型及其对象的转换规则。</p>
<table>
<thead>
<tr>
<th align="left">数据类型</th>
<th align="right">转换成true值</th>
<th align="center">转换成false值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Boolean</td>
<td align="right">true</td>
<td align="center">false</td>
</tr>
<tr>
<td align="left">String</td>
<td align="right">任何非空字符串</td>
<td align="center">“”空字符串</td>
</tr>
<tr>
<td align="left">Number</td>
<td align="right">任何非0数值（包括无穷大）</td>
<td align="center">0和NaN</td>
</tr>
<tr>
<td align="left">Object</td>
<td align="right">任何非空对象</td>
<td align="center">null</td>
</tr>
<tr>
<td align="left">Undefined</td>
<td align="right">不适用</td>
<td align="center">Undefined</td>
</tr>
</tbody></table>
<p><strong>ps：如果需要将一个变量转换成对应的布尔值的话，可以使用<code>!!</code>(两个感叹号)操作符转换。例如：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!message);  <span class="comment">// 输出false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!message); <span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure>
<p>使用一个<code>!</code>代表的是取反的操作，即转换为Boolean值之后取的是相反的值，但是再使用多一个<code>!</code>之后呢再将取反的操作再次取反之后就可以得到原来对应的Boolean值</p>
<h2 id="Null-空引用类型"><a href="#Null-空引用类型" class="headerlink" title="Null(空引用类型)"></a>Null(空引用类型)</h2><p>Null类型是只有一个值的特殊数据类型，这个特殊的值就是<code>null</code>代表的是一个空对象，一个空引用。从逻辑角度来看，<code>null</code>值表示一个空对象指针，而这也正是使用<code>typeof</code>操作符检测<code>null</code>时会返回<code>object</code>的原因。</p>
<p>如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为<code>null</code>而不是其他值。这样一来，只要直接检测<code>null</code>值就可以知道相应的变量是否已经保存了一个对象的引用了。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 对obj对象进行的操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Undefined-未定义"><a href="#Undefined-未定义" class="headerlink" title="Undefined(未定义)"></a>Undefined(未定义)</h2><p>Undefined类型只有一个值，即特殊的<code>undefined</code>。在使用<code>var</code>声明变量但未对其加以初始化时，这个变量的值就是<code>undefined</code>。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出undefined</span></span><br></pre></td></tr></table></figure>

<h1 id="五、引用数据类型"><a href="#五、引用数据类型" class="headerlink" title="五、引用数据类型"></a>五、引用数据类型</h1><h2 id="引用数据类型的介绍"><a href="#引用数据类型的介绍" class="headerlink" title="引用数据类型的介绍"></a>引用数据类型的介绍</h2><p>除了上面介绍的基本数据类型之外，其他的就是引用数据类型了。引用类型统称是Objcet，所有的引用数据类型的数据都是继承自Object的。例如：Array（数组）、Date（日期）、Function（函数）等。这些都是引用数据类型，也都是继承自Object。</p>
<h2 id="引用数据类型的特点"><a href="#引用数据类型的特点" class="headerlink" title="引用数据类型的特点"></a>引用数据类型的特点</h2><ol>
<li><p><strong>引用类型的值是可变的</strong></p>
<p> 引用数据类型跟基本数据类型最大的不同就是内存存放位置的不同，上文提过基本数据类型是存放在<strong>栈内存</strong>中的，引用数据类型则是存放在<strong>堆内存</strong>中的。引用数据类型将堆内存中的地址存放在栈内存中，通过变量标识符去取到地址再进行访问。而堆内存的大小并不是固定的，所以引用数据类型的值是可变的。基于这个特点，我们如果想要在一个引用数据类型中取增加或者是删除一些内容的话也都是可以实现的，我们甚至可以在一个引用中去定义另一个引用，我们来看一个例子：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);  <span class="comment">// 输出zhangsan</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);  <span class="comment">// 输出lisi</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);   <span class="comment">// 输出18</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);   <span class="comment">// 输出null</span></span><br><span class="line">obj.<span class="property">printObj</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;---&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">printObj</span>(); <span class="comment">// 输出lisi---null</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>引用数据类型的比较是引用的比较</strong></p>
<p> 我们先来看一个例子：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 == obj2);   <span class="comment">// 输出false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 === obj2);  <span class="comment">// 输出false</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，<code>obj1</code>和<code>obj2</code>都是定义了相同的内容，都是<code>&#123;&#125;</code>，但是在比较的时候js却不认为这是两个相同的对象。原因在于声明这两个对象时，会在堆内存中开辟出两块不同的空间去分别存放这两个变量，然后将堆内存存放这两个对象对应的内存地址再去存在栈内存中去。在比较时并不会去比较两个对象具体的区别，而是在栈内存中将地址取出来之后进行比较，如果地址相同都是指向同一块内存的话才会认为是相同的对象，反之则认为是不同的对象。</p>
<pre><code>我们再来看一个例子：
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>); <span class="comment">// 输出zhangsan</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>); <span class="comment">// 输出zhangsan</span></span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>); <span class="comment">// 输出lisi</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>); <span class="comment">// 输出lisi</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，首先声明了一个对象<code>obj1</code>再将<code>obj1</code>的值赋给<code>obj2</code>，这时其实是将<code>obj1</code>的地址赋给了<code>obj2</code>，也就是说在栈内存中的<code>obj1</code>和<code>obj2</code>的值是相等的，都是保存的相同的地址，指向的是同一块堆内存中的空间。所以不管是改变了<code>obj1</code>还是改变了<code>obj2</code>其实都是在操作的同一块内存空间，做出来的改变也是相同的，另一个指向这个空间的对象也是会跟随着一起改变。</p>
<ol start="3">
<li><strong>instanceof</strong><br>一个对象如果我们需要去检测它是不是属于某个对象的实例的话，我们需要使用<code>instanceof</code>关键字，语法是<code>实例 instanceof 对象</code>表示这个实例是否属于这个对象。例如：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((&#123;&#125;) <span class="keyword">instanceof</span> <span class="title class_">Object</span>);    <span class="comment">// 输出true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(([]) <span class="keyword">instanceof</span> <span class="title class_">Array</span>);     <span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>这里</title>
    <url>/here/index.html</url>
    <content><![CDATA[<ul>
<li>有记录一些我喜欢的句子</li>
<li>有收藏一些常用的链接</li>
<li>还有整理一些笔记</li>
</ul>
<hr>
<center><b>一些我喜欢的句子</b></center>

<ul>
<li>人生最重要的是找到自己的热爱，并坚持。</li>
<li>生命的意义在于不断发现美的过程，就像你发现了这朵花，而我发现了你。</li>
<li>以宁静敬重的心敲出的每一行代码，都会以最优雅的方式留存它的美丽。</li>
<li>人们总是喜欢先入为主地评价别人，却不知背后的逻辑也可以很复杂，不知道自己所知道的真的很少。所以，学习是一辈子的事情。</li>
<li>人这一生应该通过阅读、行走、学习、阅人，逐渐解锁更大的地图，看到更亮的世界。其实在二十多岁时，人最应该做的，就是拓展边界、探索未知、去伪存真、求知发问，打破不属于自己的人设。<br></li>
</ul>
<center><b>一些常用的链接</b></center>

<ul>
<li><a href="https://redis.io/">Redis官网</a>、<a href="https://redis.cn/">Redis中文网</a>、<a href="https://www.runoob.com/redis/redis-tutorial.html">Redis菜鸟教程</a>、<a href="http://download.redis.io/releases/">Redis下载地址（Linux）</a>、<a href="https://github.com/tporadowski/redis/releases">Redis下载地址（Window）</a></li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a>、<a href="https://developer.aliyun.com/mirror">阿里巴巴开源镜像站</a>、<a href="https://docs.spring.io/spring/docs/">Spring官方文档</a>、<a href="https://mvnrepository.com/">Maven仓库</a>、<a href="http://maven.apache.org/download.cgi">Maven 下载</a></li>
<li><a href="https://fontawesome.com/icons">NexT 主题图标</a>、<a href="http://redisdoc.com/">Redis 命令文档</a></li>
</ul>
<br>

<center><b>还有一些笔记</b></center>

<ul>
<li><a href="maven%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE.html">maven 数据源配置</a></li>
<li><a href="SpringBoot%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86.html">Spring Boot 跨域处理</a></li>
<li><a href="Spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA.html">Spring 事务传播行为</a></li>
</ul>
<hr>
<p>大家加油：）</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/about/index.html</url>
    <content><![CDATA[<div class="note success flat"><p><strong>没错，是我了</strong></p>
</div>

<ul>
<li>一个简简单单的小年轻</li>
<li>一个有点小小梦想的小年轻</li>
<li>冲！冲！冲！！！</li>
</ul>
<div class="note success flat"><p><strong>没错，是这个小站了</strong></p>
</div>

<ul>
<li>一个简简单单的博客小站</li>
<li>一个有点小小梦想的博客小站</li>
</ul>
<div class="note success flat"><p><strong>没错，是我微信了</strong></p>
</div>

<p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/6ac9184fb440093a91541cc797ec88e.jpg" alt="6ac9184fb440093a91541cc797ec88e"></p>
<blockquote>
<p>座右铭：以宁静敬重的心敲出的每一行代码，都会以最优雅的方式留存它的美丽。</p>
<p align="right">—— 来自一个温柔、浪漫的年轻人</p>
</blockquote>
<hr>
<p>大家加油：）</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/link/index.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p><strong>友链申请滴注意事项：</strong></p>
<ol>
<li>内容持续更新且可以稳定访问</li>
<li>网页整洁无繁杂广告推广</li>
<li>本站会定期清理无法访问的友链，如果更换了链接信息请至评论区留言，谢谢合作</li>
<li>本站会定期查看双方是否互为友链，如果取消本站友链，本站也会将您的友链移除</li>
<li>将本站的友链添加到您的友链，相关信息如下</li>
<li>按照以下格式在以下评论区留言，待博主为您添上友链</li>
</ol>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">名称：知更博客</span><br><span class="line">头像链接：https://www.wrp.cool/images/avatar.png</span><br><span class="line">主页链接：https://www.wrp.cool</span><br><span class="line">说明信息：知道要更新，知道要进步</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
