<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知更</title>
  
  <subtitle>“知道要更新，知道要进步”</subtitle>
  <link href="https://www.wrp.cool/atom.xml" rel="self"/>
  
  <link href="https://www.wrp.cool/"/>
  <updated>2022-06-12T12:35:24.033Z</updated>
  <id>https://www.wrp.cool/</id>
  
  <author>
    <name>王瑞鹏</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【MySQL实战】深入浅出索引</title>
    <link href="https://www.wrp.cool/posts/42257/"/>
    <id>https://www.wrp.cool/posts/42257/</id>
    <published>2022-06-08T03:13:18.000Z</published>
    <updated>2022-06-12T12:35:24.033Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li><a href="https://time.geekbang.org/column/article/69236">《极客时间-MySQL实战45讲》04 | 深入浅出索引（上）</a></li><li><a href="https://time.geekbang.org/column/article/69636">《极客时间-MySQL实战45讲》05 | 深入浅出索引（下）</a></li><li>笔记整理</li></ul></blockquote><hr><p>首先还是要先了解 <strong>页（Page）</strong> 这个概念，才能更好的理解 InnoDB 中的索引。</p><div class="note success flat"><p><strong>页是什么？</strong></p></div><ul><li><p>页（Page）是 InnoDB 中管理数据的最小单元。</p></li><li><p>聚簇索引中的叶子结点就是一个个的页。</p><blockquote><p><em>插句题外话：</em><br><em>之前初学 MySQL 的时候，由于 DML 操作的都是一行行的数据，所以那时候总是以为 MySQL 中的最小数据单位就是 row。UPDATE 的时候就去磁盘中拿到对应的数据出来，然后 UPDATE 之后再放回去。但现在看来显然不是，MySQL 是先把该行数据所在的页先加载到内存中修改完了再延迟刷回磁盘的。</em></p></blockquote></li></ul><div class="note success flat"><p><strong>页的概览</strong></p></div><p>MySQL 中的数据最终都是存在聚簇索引树的叶子结点中的，也就是页之间其实是双向链表的这么一种数据结构，并且页与页之间也是有序的。在叶子结点中存储用户数据的部分是一种单向链表的结构。</p><p>当我们在查找数据的时候，为了快速判断要查找的数据是否在当前页之中。在页中还会记录页本页用户数据中的最大值和最小值。</p><p>如果所需要的数据就在当前页中，为了避免整个页去查找，MySQL 又在页中加入了另一个区域 Page Directory 目录，里面有很多个槽位（Slots），每一个槽位都指向了一条 User Records 中的记录。每隔几条数据，就会创建一个槽位。在一个完整的页中，每隔6条数据就会有一个 Slot。有了 Page Directory 之后，页内的用户数据就不需要去维护有序性了，直接插入在链表尾部即可。</p><p>Slot 会在新增数据的时候创建和维护，之后就可以对一张页的数据进行<strong>粗略</strong>的二分查找。因为二分查找出来的结果只能是个大概的位置，找到了这个大概的位置之后，还需要回到 User Records 中继续的进行挨个遍历匹配。</p><blockquote><p>粗略画了下页的概览图，如下：</p></blockquote><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/1654781897359.png" alt="1654781897359"></p><blockquote><p><strong>小结：</strong></p><p>MySQL 查找数据的方式，首先是通过索引将数据所在的页先加载到内存中去，之后在内存中尽量的缩小所在数据的范围，再去遍历数据找到最终所需要的数据。</p></blockquote><hr><h1 id="索引的常见模型"><a href="#索引的常见模型" class="headerlink" title="索引的常见模型"></a>索引的常见模型</h1><p>三种常见、也比较简单的数据结构，它们分别是<code>哈希表</code>、<code>有序数组</code>和<code>N叉树</code></p><blockquote><p>你心里要有个概念，数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我们需要先关注它的数据模型，这样才能从理论上分析出这个数据库的适用场景。</p></blockquote><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的键即 key，就可以找到其对应的值即 Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。如果多个 key 值经过哈希函数的换算，出现了同一个值。这种情况称为哈希冲突，一般可以往后拉出来一个链表解决。</p><ul><li><strong>优点：</strong><ul><li>新增数据快，可以直接查询到要添加的位置，直接添加或者添加为链表的尾结点。</li><li>等值查询速度快。</li></ul></li><li><strong>缺点：</strong><ul><li>由于无序，所以哈希索引做区间查询的速度是很慢的。</li></ul></li><li><strong>适用场景：</strong><ul><li>只有等值查询的场景。</li></ul></li></ul><h2 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h2><p>是一种数组按照下标升序或者降序存储数据的结构。</p><ul><li><strong>优点：</strong><ul><li>使用二分法做查询速度很快，时间复杂度是 O(log(N))</li><li>支持区间查询，先用二分法查询到区间最左的元素，再向右遍历直至最又的元素。</li></ul></li><li><strong>缺点：</strong><ul><li>往中间添加一个数据需要往后挪动所有的数据，这个过程很慢，时间复杂度是 O(log(N))</li></ul></li><li><strong>适用场景：</strong><ul><li>有序数组只适用于读多写少的情况。</li></ul></li></ul><h2 id="N叉树"><a href="#N叉树" class="headerlink" title="N叉树"></a>N叉树</h2><p>为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。</p><p>以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。</p><p><strong>InnoDB 引擎中使用的是 B+树 这种N叉树的数据结构作为索引模型。</strong></p><h1 id="InnoDB-的索引模型"><a href="#InnoDB-的索引模型" class="headerlink" title="InnoDB 的索引模型"></a>InnoDB 的索引模型</h1><p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。准确的说应该是存在 B+ 树中的叶子节点中的。每个叶子节点就是开头说的<strong>页（Page）</strong>。</p><p>每一个索引在 InnoDB 里面都对应了一棵 B+ 树。根据叶子节点的内容，索引类型分为主键索引和非主键索引。主键索引的叶子节点存的是整行数据。</p><ul><li>在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</li><li>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</li></ul><div class="note primary flat"><p><strong>基于主键索引和普通索引的查询有什么区别？</strong></p></div><ul><li>如果语句是 select * from T where ID&#x3D;1，即主键查询方式，则只需要搜索 ID 这棵 B+ 树</li><li>如果语句是 select * from T where k&#x3D;5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为<strong>回表</strong>。</li></ul><p>也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p><div class="note primary flat"><p>为什么普通索引的叶子节点上要存放的是 ID，为什么不直接存对应行数据的地址呢？</p></div><ul><li><strong>优点：</strong><br>  减少了页分裂或者页合并时候二级索引的维护工作。</li><li><strong>缺点：</strong><ol><li>二级索引体积可能会变大，因为其中存储了主键信息。</li><li>二级索引的访问需要两次查找，要多一次回表的操作。</li></ol></li></ul><div class="note primary flat"><p>一个老生常谈的话题了，为啥不用 select *，而要把查询的字段全部写出来呢？</p></div><p>select * 是肯定要回表的，会导致索引覆盖用不了。</p><h1 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h1><p>前文说过 InnoDB 页之间是有序的，为了维护这个有序性，在插入新值和删除旧值的时候就需要做一些必要的维护。</p><blockquote><p>有个概念可能会混淆，得先说清楚，索引是肯定有序的，这里的有序无序指的是插入的顺序。</p></blockquote><p>如果都是有序插入的话，每次都直接在页内插入一条新的数据或者申请一个新的页再插入数据即可，这样子可以保证除了最后一页所有页都是满的，空间利用率最高。有序插入的方案是最优的，自增主键就是一种 InnoDB 提供的有序插入的方案。</p><div class="note primary flat"><p><strong>页分类与页合并</strong></p></div><ul><li><p><strong>页分裂：</strong></p><blockquote><p>如果无序插入到一个页内空间已经满了的话，就需要再开新的一页来存储这个数据。根据 B+ 树的算法，会挪动部分数据过去新的页，这个过程称为<strong>页分裂</strong>。在这种情况下，性能自然会受影响。除了性能外，页分裂操作还影响数据页的利用率。因为新开的数据页不一定会被填满。</p></blockquote></li><li><p><strong>页合并：</strong></p><blockquote><p>当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。</p></blockquote></li></ul><div class="note info flat"><p><strong>两个建议：</strong></p></div><ol><li>使用自增主键。这样可以保证每次插入都是有序插入的，可以防止页分裂。</li><li>删除先做逻辑上的删除，不要做物理删除，这样可以防止页合并。等到有时间了再去真正的删除。</li></ol><p>新增或者删除的时候多了分裂或者合并的操作，性能自然会受到影响。除了考虑性能外，从存储空间的角度来看，也应该用自增主键，因为普通索引的叶子节点上存储的是主键，显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</p><h1 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h1><p>由于二级索引并没有存放真实的数据，所以需要到主键索引上进行一次回表的操作，这自然会影响性能。</p><p>那如果我只要查 ID 呢？二级索引的叶子节点上就是记录了 ID，那么自然不需要回表，自然提高了性能。于是很自然的一个想法就出现了，那就是把一些经常会查询到的字段一起记录在二级索引上，这就是<strong>覆盖索引</strong>。</p><p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p><blockquote><p>比如有这样的一个需求：<strong>根据身份证号码查询姓名</strong></p></blockquote><p>身份证号码作为每个人的唯一标识，肯定会有很多根据身份证号码查询身份信息的请求，应该要在身份证号码这个字段上建一个索引。但查询姓名这个需求是一个很高频的需求，这个时候就可以把身份证号码跟姓名一起建立一个联合索引。这样它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。</p><p>当然，索引字段的维护总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。</p><h1 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h1><p>假设现在有一个（姓名，年龄）的联合索引：</p><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95.jpg" alt="最左前缀索引"></p><p>可以看到，索引项是按照索引定义里面出现的字段顺序排序的。</p><p>当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。</p><p>如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是”where name like ‘张 %’”。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。</p><p>可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个<strong>最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符</strong>。</p><p>很显然，这里的（姓名，年龄）索引中的（年龄）是可以复用的，于是此处相当于拥有了两个索引，分别是：（姓名，年龄）、（姓名）</p><p>那么，<strong>在建立联合索引的时候，如何安排索引内的字段顺序呢？</strong></p><ol><li>如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。<ul><li>比如上面（姓名，年龄）的例子，通过建立（姓名，年龄），相当于拥有了（姓名，年龄）和（姓名）两个索引，不需要为（姓名）单独再创建一个索引。</li></ul></li><li>考虑字段大小，将字段大一点的排到前面去。<ul><li>比如上面（姓名，年龄）的例子，如果还需要姓名跟年龄都建立索引，那么就应该建立（姓名，年龄）这样的联合索引，然后再建立一个（年龄）的索引。因为单独的（年龄）索引占用的空间比起单独的（姓名）的空间要来的小。</li></ul></li></ol><h1 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/69236&quot;&gt;《极客时间-MySQL实战45讲》04 | 深入浅出索引（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https:/</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.wrp.cool/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="笔记" scheme="https://www.wrp.cool/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL实战】全局锁、表锁、行锁</title>
    <link href="https://www.wrp.cool/posts/27299/"/>
    <id>https://www.wrp.cool/posts/27299/</id>
    <published>2022-06-05T07:32:24.000Z</published>
    <updated>2022-06-07T15:43:28.681Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li><a href="https://time.geekbang.org/column/article/69862">《极客时间-MySQL实战45讲》06 | 全局锁和表锁 ：给表加个字段怎么有这么多阻碍？</a></li><li><a href="https://time.geekbang.org/column/article/70215">《极客时间-MySQL实战45讲》07 | 行锁功过：怎么减少行锁对性能的影响？</a></li><li>笔记整理</li></ul></blockquote><span id="more"></span><p>根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类。</p><p>在正式开篇之前还是得先搞清楚两个概念：共享锁和排他锁</p><ul><li><strong>共享锁：</strong>所有线程都可以拥有共享锁，故名为共享。一般是读锁。</li><li><strong>排他锁：</strong>仅一个线程可以拥有锁，其他线程必须等待该线程释放锁后才可以拿到锁，故名为排他。一般是写锁。</li></ul><hr><h1 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h1><blockquote><p>顾名思义，全局锁的锁定对象是整个数据库实例。</p></blockquote><ul><li><strong>加锁语法：</strong><code>flush tables with read lock; (FTWRL)</code></li><li><strong>释放锁语法：</strong><code>unlock tables;</code></li></ul><p>这是一把读锁，使用之后所有的线程只能读取数据而不能修改数据，方式是阻塞其他线程的以下一些语句：</p><ul><li>数据更新语句（数据的增删改）</li><li>数据定义语句（包括建表、修改表结构等）</li><li>更新类事务的提交语句。</li></ul><p>比较多的使用场景是全局逻辑备份，<strong>用于保证备份时的数据一致性</strong>。其底层支持是 <a href="https://www.wrp.cool/posts/574/">MVCC 多版本并发控制</a></p><blockquote><p>在备份的场景里，FTWRL 相较于 <code>set global read_only=true;</code> 的优势：</p></blockquote><ol><li>readonly 的值可能会被用来做其他逻辑，比如用来判断一个库是主库还是备库。影响面比较大，不建议使用。</li><li>异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</li></ol><blockquote><p><strong>MySQL 全局备份方式：</strong><br>官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数 <code>–single-transaction</code> 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。</p><p><strong>注意：</strong><br>MySQL 并非所有的引擎都支持 <code>–single-transaction</code> 参数，底层需要 MVCC 的支持，而目前仅 InnoDB 提供了 MVCC 支持。如果有的表使用了不支持事务的引擎，那么备份就只能通过 FTWRL 方法。这往往是 DBA 要求业务开发人员使用 InnoDB 替代 MyISAM 的原因之一。</p></blockquote><h1 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h1><p>MySQL5.5 开始引入了元数据锁，自此MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p><h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><blockquote><p>用于锁定整个表对象，分为读锁和写锁。</p></blockquote><p>读锁（ <code>lock tables … read</code>）：该锁是一种<strong>共享锁</strong>，MySQL 中的表一旦被加上了读锁，其他线程的修改语句就会被阻塞。所有线程均仅可读。<br>写锁（ <code>lock tables … write</code>）：该锁是一种<strong>排他锁</strong>，MySQL 中的表一旦被加上了写锁，除了拥有锁的线程之外，其他的线程对该表的读写操作都会被阻塞。</p><div class="note danger flat"><p>对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面太大了。</p></div><h2 id="元数据锁（meta-data-lock，MDL）"><a href="#元数据锁（meta-data-lock，MDL）" class="headerlink" title="元数据锁（meta data lock，MDL）"></a>元数据锁（meta data lock，MDL）</h2><blockquote><p>这是一种列锁，锁住的是表的表结构。也就是说上锁期间会对 DDL 的操作做限制。同样分为了 MDL 读锁和 MDL 写锁。</p></blockquote><p>MDL 是 server 层的锁，表级锁，主要用于隔离 DML 和 DDL 操作之间的干扰。每执行一条 DML、DDL 语句时都会申请 MDL锁，DML 操作需要 MDL 读锁（共享），DDL 操作需要 MDL 写锁（排他）。MDL 加锁过程是系统自动控制，无法直接干预。</p><div class="note danger flat"><p>MDL 可能导致线程爆满，打爆数据库系统。</p></div><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/MDL%E9%98%BB%E5%A1%9E%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA%E5%9B%BE.jpg" alt="MDL阻塞过程演示图"></p><p>在上面的这个图中，sessionA 正常启动，正常获取 MDL 读锁，之后 sessionB 启动，也获取到 MDL 读锁。</p><p>之后 sessionC 启动需要获取 MDL 写锁，此时由于 MDL 读锁还没释放，于是 sessionC 进入阻塞状态等待获取 MDL 写锁。</p><p>但是如果碰巧 sessionA 或者 sessionB 中有一个是长事务，那么 sessionC 被阻塞的时间就会久一些，sessionC 之后的所有线程都拿不到 MDL 锁，MDL 读写锁都拿不到。</p><p>如果此时恰巧有很多的请求进来，全部都被阻塞在一起，很快就会导致线程爆满，数据库被打爆。</p><h1 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h1><blockquote><p>顾名思义，行锁就是针对数据表中行记录的锁。这很好理解，比如事务 A 更新了一行，而这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。</p></blockquote><h2 id="行锁的两阶段协议"><a href="#行锁的两阶段协议" class="headerlink" title="行锁的两阶段协议"></a>行锁的两阶段协议</h2><div class="note default flat"><p>举例说明：</p></div><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E8%A1%8C%E9%94%81-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%8D%8F%E8%AE%AE.jpg" alt="行锁-两阶段协议"></p><p>在这个例子中，事务B会被事务A阻塞，直到事务A commit 才会执行事务B。</p><p>显然事务A持有 id&#x3D;1、id&#x3D;2 这两行的锁。</p><p>由这个例子可以得出：</p><blockquote><p>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。<br><strong>这个就是两阶段锁协议。</strong></p></blockquote><p>由两阶段协议可得：</p><div class="note warning flat"><p><strong>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</strong></p></div><blockquote><p><strong>像这样：</strong></p><p>假设你负责实现一个电影票在线交易业务，顾客 A 要在影院 B 购买电影票。我们简化一点，这个业务需要涉及到以下操作：</p><ol><li>从顾客 A 账户余额中扣除电影票价；</li><li>给影院 B 的账户余额增加这张电影票价；</li><li>记录一条交易日志。</li></ol><p>由于两阶段协议，所以应该尽量把最可能造成锁冲突、影响并发度的锁往后放。<br>所以以上三条语句在编码时的执行顺序应该是：<code>1 3 2</code> 或者是 <code>3 1 2</code></p></blockquote><h2 id="死锁和死锁检测"><a href="#死锁和死锁检测" class="headerlink" title="死锁和死锁检测"></a>死锁和死锁检测</h2><blockquote><p><strong>什么是死锁：</strong></p><p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。</p></blockquote><div class="note default flat"><p><strong>举例：</strong></p></div><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E6%8B%BF%E8%A1%8C%E9%94%81%E4%B8%BE%E4%B8%AA%E6%AD%BB%E9%94%81%E4%BE%8B%E5%AD%90.jpg" alt="拿行锁举个死锁例子"></p><p>此时，事务A在等待事务B中 id&#x3D;2 的行锁，事务B又在等待事务A id&#x3D;1 的锁，陷入了一种事务A等事务B，事务B等事务A的状态，这就是死锁现象。</p><div class="note primary flat"><p><strong>死锁的应对策略：</strong></p></div><ol><li><p>直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。<br> 在 InnoDB 中，innodb_lock_wait_timeout 的默认值是 50s，对于在线服务来说，这个等待时间往往是无法接受的。但是如果把这个超时时间设置的很短呢？那又可能误伤到很多只是锁等待的线程，这也不好。所以这个方案需要把握好一个比较精准的度。</p></li><li><p>发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</p></li></ol><blockquote><p>正常情况下我们还是要采用第二种策略，即：<strong>主动死锁检测</strong>，而且 innodb_deadlock_detect 的默认值本身就是 on。主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的。</p><p>你可以想象一下这个过程：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。</p><p>但是如果很大量的请求都要同时更新同一行的数据呢？</p><p>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。</p></blockquote><div class="note primary flat"><p><strong>怎么解决由这种热点性更新导致的性能问题呢？</strong></p></div><ol><li>在业务上保证不出现死锁的情况，将死锁检测关掉。<ul><li><strong>缺点：</strong>业务上的实现很困难</li></ul></li><li>控制并发度。<ul><li><strong>怎么做？</strong>借助中间件，或者是直接修改 MySQL 源码。</li></ul></li><li>从数据库设计上优化。<ul><li><strong>怎么做？</strong>将一条数据扩展成多条数据，每次随机选择其中一条记录来做修改，人为的将并发度降低。</li></ul></li></ol><hr><blockquote><p>网友热心总结的一些问题，复习的时候可以试着回答一下。</p></blockquote><ol><li>MySQL从加锁范围上分为哪三类?</li><li>全局锁加锁方法的执行命令是什么?主要的应用场景是什么?</li><li>做整库备份时为什么要加全局锁?</li><li>MySQL的自带备份工具, 使用什么参数可以确保一致性视图, 在什么场景下不适用?</li><li>不建议使用set global readonly &#x3D; true的方法加全局锁有哪两点原因?</li><li>表级锁有哪两种类型?  各自的使用场景是什么?</li><li>MDL中读写锁之间的互斥关系怎样的?</li><li>如何安全的给小表增加字段?</li><li>两阶段锁的概念是什么? 对事务使用有什么帮助?</li><li>死锁的概念是什么? 举例说明出现死锁的情况.</li><li>死锁的处理策略有哪两种? </li><li>等待超时处理死锁的机制什么?有什么局限?</li><li>死锁检测处理死锁的机制是什么? 有什么局限?</li><li>有哪些思路可以解决热点更新导致的并发问题?</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/69862&quot;&gt;《极客时间-MySQL实战45讲》06 | 全局锁和表锁 ：给表加个字段怎么有这么多阻碍？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/70215&quot;&gt;《极客时间-MySQL实战45讲》07 | 行锁功过：怎么减少行锁对性能的影响？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;笔记整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.wrp.cool/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="锁" scheme="https://www.wrp.cool/tags/%E9%94%81/"/>
    
    <category term="笔记" scheme="https://www.wrp.cool/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL实战】事务隔离</title>
    <link href="https://www.wrp.cool/posts/574/"/>
    <id>https://www.wrp.cool/posts/574/</id>
    <published>2022-06-03T06:27:10.000Z</published>
    <updated>2022-06-08T15:48:41.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li><a href="https://time.geekbang.org/column/article/68963">《极客时间-MySQL实战45讲》03 | 事务隔离：为什么你改了我还看不见？</a></li><li><a href="https://time.geekbang.org/column/article/70562">《极客时间-MySQL实战45讲》08 | 事务到底是隔离还是不隔离的？</a></li><li>笔记整理</li></ul></blockquote><span id="more"></span><h1 id="事务的基本特性（ACID）"><a href="#事务的基本特性（ACID）" class="headerlink" title="事务的基本特性（ACID）"></a>事务的基本特性（ACID）</h1><ul><li><strong>原子性（Atomicity）：</strong>事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。</li><li><strong>一致性（Consistency）：</strong>事务开始前和结束后，数据库的完整性约束没有被破坏。</li><li><strong>隔离性（Isolation）：</strong>同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。</li><li><strong>持久性（Durability）：</strong>事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</li></ul><h1 id="不考虑隔离性可能产生的问题"><a href="#不考虑隔离性可能产生的问题" class="headerlink" title="不考虑隔离性可能产生的问题"></a>不考虑隔离性可能产生的问题</h1><ul><li><strong>脏读：</strong>指在一个事务处理过程中读取了另一个未提交的事务中的数据。<ul><li>比如事务A将x的值从0修改为1，但未回滚或提交，此时事务B读取了x的值为1，随后事务A回滚，将x的值重新设置为0。那么事务B读取的x的值为1的哪个过程就称为脏读。</li></ul></li><li><strong>不可重复读：</strong>一个事务内多次查询<u>同一个数据</u>却返回了不同的数据值。<ul><li>比如事务A查询x值为0，此时事务B将x的值修改为0并提交，事务A再次查询x的值为1。事务A并未对x的值做操作，但是两次查询x的值发生了变化，这个现象就被称为不可重复读。</li></ul></li><li><strong>幻读：</strong>一个事务内多次查询<u>同一批数据</u>却返回了不同批的数据。<ul><li>比如事务A查询用户表有100个用户，此时事务B新增或者删除了一些用户，之后事务A再次查询用户表返回的不是100个用户。这个现象就被称为幻读。</li></ul></li></ul><blockquote><p>幻读和不可重复读看起来好像很相似，都是读取了另外一个事务所提交的修改，但区别是<u>不可重复读针对的是数据项，而幻读针对的是数据量</u>。</p></blockquote><h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><ul><li><strong>读未提交（READ UNCOMMITTED）：</strong>一个事务还没提交时，它做的变更就能被别的事务看到。</li><li><strong>读已提交（READ COMMITTED）：</strong>一个事务提交之后，它做的变更才会被其他事务看到。</li><li><strong>可重复读（REPEATABLE READ）：</strong>一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。</li><li><strong>串行化（SERIALIZABLE ）：</strong>顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%BE%E4%BE%8B.jpg" alt="事务隔离级别举例"></p><ul><li><strong>读未提交：</strong> V1 的值是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2。</li><li><strong>读已提交：</strong> V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以，V3 的值也是 2。</li><li><strong>可重复读：</strong> V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。</li><li><strong>串行化：</strong>在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。</li></ul><h1 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h1><p>事务隔离级别中的 READ UNCOMMITIED 总是读取最新的数据行，而不是符合当前事务版本的数据行。而 SERIALIZABLE 则会对所有读取的行都加锁。这两种隔离级别都能够独立实现，而 READ COMMITTED 和 REPEATABLE READ 这两种隔离级别则需要依赖于 MVVC 多版本并发控制来实现。</p><h2 id="MVCC-多版本并发控制"><a href="#MVCC-多版本并发控制" class="headerlink" title="MVCC 多版本并发控制"></a>MVCC 多版本并发控制</h2><p><strong>什么是 MVCC？</strong></p><blockquote><p>MVCC，全称 Multi-Version Concurrency Control，即多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p></blockquote><p><strong>MVCC 能做什么？</strong></p><blockquote><p>借助 MVCC 实现了 READ COMMITTED，REPEATABLE READ 等隔离级别。</p></blockquote><h3 id="InnoDB-中的-MVCC"><a href="#InnoDB-中的-MVCC" class="headerlink" title="InnoDB 中的 MVCC"></a>InnoDB 中的 MVCC</h3><p>InnDB 中每个事务都有一个唯一的事务 ID，记为 transaction_id。它在事务开始时向 InnDB 申请，按照时间先后严格递增。</p><p>而每行数据其实都有多个版本，这就依赖 undo log 来实现了。每次事务更新数据就会生成一个新的数据版本，并把  transaction_id 记为 row trx_id。同时旧的数据版本会保留在 undo log 中，而且新的版本会记录旧版本的回滚指针，通过它直接拿到上一个版本。</p><p>为了保证每个事务中拿到的数据都是不被其他事务污染的，InnoDB 还需要一个 read-view 来保存每次事务查询的时候不被污染的那一份数据。</p><p>所以，InnDB 中的 MVCC 其实是通过在每行记录后面保存两个隐藏的列来实现的。一列是事务 ID：trx_id；另一列是回滚指针：roll_pt。</p><h3 id="undo-log（回滚日志）"><a href="#undo-log（回滚日志）" class="headerlink" title="undo log（回滚日志）"></a>undo log（回滚日志）</h3><p>回滚日志保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读。</p><p>根据操作和删除日志时机的不同，undo log 分为两种： insert undo log 和 update undo log。</p><h4 id="insert-undo-log"><a href="#insert-undo-log" class="headerlink" title="insert undo log"></a>insert undo log</h4><p>由于 INSERT 操作记录没有历史版本只对当前事务本身可见，对于其他事务此记录不可见，所以 insert undo log 可以在事务提交后直接删除而不需要进行 purge 操作。</p><blockquote><p>purge（清除）：的主要任务是将数据库中已经 mark del 的数据删除，另外也会批量回收 undo pages</p></blockquote><p>插入数据时，它的在 undo log 的初始状态是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id, name, age, trx_id, roll_pt) <span class="keyword">values</span> (<span class="number">1</span>, &quot;张三&quot;, <span class="number">18</span>, <span class="number">1</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>在事务提交时，这个事务所做的 INSERT 的操作所记录的 undo log 的日志会被直接删除。</p><h4 id="update-undo-log"><a href="#update-undo-log" class="headerlink" title="update undo log"></a>update undo log</h4><p>由于 UPDATE 操作的历史版本可能其他的事务需要用到，所以 UPDATE 操作的 undo log 保存的时间会长一些，只有在系统中没有比这个回滚日志更早的版本时，purge 线程将进行最后的删除操作。</p><p>假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E5%9B%9E%E6%BB%9A%E6%97%A5%E5%BF%97%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="回滚日志流程图"></p><p>如果发生了回滚，4就会变成3再变成2再变成1，一步一步的恢复到初始状态。</p><blockquote><p>当不需要这些回滚日志的时候，这些日志就会被删除。<br>什么时候不需要这些回滚日志呢？<strong>当系统里没有比这个回滚日志更早的 read-view 的时候。</strong></p></blockquote><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/1654328337012.png" alt="1654328337012"></p><h3 id="read-view（一致性读视图）"><a href="#read-view（一致性读视图）" class="headerlink" title="read-view（一致性读视图）"></a>read-view（一致性读视图）</h3><p>read view 是 InnDB 在实现 MVCC 时用到的一致性读视图，用于支持 RC（读提交）以及 RR（可重复读）隔离级别的实现。</p><p>read view 不是真实存在的，<strong>只是一个概念</strong>，undo log 才是它的体现。它<strong>主要是通过版本和 undolog 计算出来的</strong>。作用是决定事务能看到哪些数据。</p><p><strong>每个事务或者语句有自己的一致性视图。普通查询语句是一致性读，一致性读会根据 row trx_id 和一致性视图确定数据版本的可见性。</strong></p><hr><p>未完待续。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/68963&quot;&gt;《极客时间-MySQL实战45讲》03 | 事务隔离：为什么你改了我还看不见？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/70562&quot;&gt;《极客时间-MySQL实战45讲》08 | 事务到底是隔离还是不隔离的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;笔记整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.wrp.cool/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="笔记" scheme="https://www.wrp.cool/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL实战】日志系统：一条SQL更新语句是如何执行的？</title>
    <link href="https://www.wrp.cool/posts/39005/"/>
    <id>https://www.wrp.cool/posts/39005/</id>
    <published>2022-06-02T07:00:35.000Z</published>
    <updated>2022-06-07T15:42:43.196Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li><a href="https://time.geekbang.org/column/article/68633">《极客时间-MySQL实战45讲》02 | 日志系统：一条SQL更新语句是如何执行的？</a></li><li>笔记整理</li></ul></blockquote><span id="more"></span><p>与上一篇笔记中的查询流程相同，一条更新语句也是要经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。</p><p>例如这样的一个表，然后有这样的一条更新的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> T(ID <span class="type">int</span> <span class="keyword">primary</span> key, c <span class="type">int</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> T <span class="keyword">set</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>在上一篇笔记中说过在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。</p><p>但与查询流程所不相同的是，更新流程涉及到两个重要的日志模块：redo log（重做日志）和binlog（归档日志）。</p><h1 id="重要日志模块：redo-log"><a href="#重要日志模块：redo-log" class="headerlink" title="重要日志模块：redo log"></a>重要日志模块：redo log</h1><p>其实就是 MySQL 里经常说到的 WAL 技术，WAL 的全称是 Write-Ahead Logging（预写日志记录），它的关键点就是先写日志，再写磁盘。</p><blockquote><p>需要注意的是：redo log 也是在磁盘里的，并不是保存在内存里。</p></blockquote><p><strong>redo log工作流程：</strong></p><ol><li>当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log 里面。</li><li>更新内存，将这条记录的最新值放到内存里。</li><li>之后 InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</li></ol><p><strong>干嘛要搞的这么复杂，直接写磁盘不好吗？</strong></p><ul><li><strong>直接写磁盘？？</strong>那不是每次都要去找要写在哪里，数据那么多，等找出来不是人都麻了。</li><li><strong>那redo log不也是写磁盘？？</strong>redo log是在磁盘中单独开辟出来的一块空间写滴，每次要写就在后面追加写上去就完了，不用每次都去找要写在哪里，等有空了再去找写在哪里然后写进去，省去了一个寻址的操作。<strong>顺序写可比随机写快的多的多</strong></li></ul><p><strong>还有个事儿，redo log的大小是固定的哇！！！</strong></p><blockquote><p>换句话说就是长江后浪推前浪，前浪被拍死在沙滩上哇！！前浪都被后浪卷死了哇！！！</p></blockquote><p>看图吧您！！</p><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/redo_log%E5%BE%AA%E7%8E%AF%E5%86%99%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="redo_log循环写示意图"></p><p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。就像是循环数组一样。</p><p><strong>讲这么多，redo log干嘛的哇？？</strong>用来搞哪个crash-safe的哇！！</p><blockquote><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 crash-safe。</p><p>redo log是将未提交的数据写入磁盘，不是写入内存，因此如果数据库异常重启了，那么InnoDB也可以通过读取redo log来重新恢复那些未提交的事务。这样的能力称之为crash-safe</p></blockquote><h1 id="重要的日志模块：binlog"><a href="#重要的日志模块：binlog" class="headerlink" title="重要的日志模块：binlog"></a>重要的日志模块：binlog</h1><blockquote><p><strong>为什么有了redo log还需要binlog？</strong></p><p>上一篇笔记中说过 MySQL 整体来看，其实就有两块：一块是 Server 层，负责 MySQL 功能层面的事情，另外一块是引擎层，负责存储相关的具体事宜。redo log 只是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</p><p>因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。</p></blockquote><h2 id="两种日志的不同点："><a href="#两种日志的不同点：" class="headerlink" title="两种日志的不同点："></a>两种日志的不同点：</h2><ol><li><p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</p></li><li><p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”。</p></li><li><p>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p></li></ol><p><strong>binlog的工作流程：</strong></p><ol><li><p>执行器先找引擎取 ID&#x3D;2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID&#x3D;2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</p></li><li><p>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</p></li><li><p>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，<strong>此时 redo log 处于 prepare 状态。</strong></p></li><li><p>然后告知执行器执行完成了，随时可以提交事务。执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</p></li><li><p>执行器调用引擎的提交事务接口，<strong>引擎把刚刚写入的 redo log 改成提交（commit）状态</strong>，更新完成。</p></li></ol><p>整个执行流程示意图（图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。）<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/binlog%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="binlog执行流程示意图"></p><p>最后的三步将redo log的写入分成了两个部分，prepare和commit 这就是“两阶段提交”</p><h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><p>两阶段提交是为了保证两个日志的一致性设计的。</p><p><strong>假设没有两阶段提交，会怎样？</strong></p><ul><li><p><strong>先提交redo log：</strong>（提交完MySQL挂掉）</p><ul><li>重启恢复：redo log 比 binlog 多出一条数据，<ul><li>如果后续拿 binlog 做备份恢复，则丢失该条数据</li><li>如果此时拿 binlog 做一个从库复制，则从库比主库少了该条数据</li></ul></li></ul></li><li><p><strong>先提交binlog：</strong>（提交完MySQL挂掉）</p><ul><li>重启恢复：使用redo log恢复，此时 binlog 比库中多了一条数据记录<ul><li>如果后续拿 binlog 做备份恢复，会莫名多出来一条数据（该记录未曾提交）</li><li>如果此时拿 binlog 做一个从库复制，则从库比主库多了该条数据</li></ul></li></ul></li></ul><p><strong>有了两阶段提交之后呢？</strong></p><p>两阶段提交流程：1. prepare 阶段、2.写 binlog、3. commit<br>    - 在2之前崩溃：发现没有 commit 且两份日志不统一，自动回滚。两份日志一致<br>    - 在3之前崩溃：虽然没有 commit 但是两份日志统一，自动提交。两份日志一致<br>    - 备份：全靠 binlog</p><hr><blockquote><p>网友热心总结的一些问题，复习的时候可以试着回答一下。</p></blockquote><ol><li>redo log的概念是什么? 为什么会存在.</li><li>什么是WAL(write-ahead log)机制, 好处是什么.</li><li>redo log 为什么可以保证crash safe机制.</li><li>binlog的概念是什么, 起到什么作用, 可以做crash safe吗? </li><li>binlog和redolog的不同点有哪些? </li><li>物理一致性和逻辑一直性各应该怎么理解? </li><li>执行器和innoDB在执行update语句时候的流程是什么样的?</li><li>如果数据库误操作, 如何执行数据恢复?</li><li>什么是两阶段提交, 为什么需要两阶段提交, 两阶段提交怎么保证数据库中两份日志间的逻辑一致性(什么叫逻辑一致性)?</li><li>如果不是两阶段提交, 先写redo log和先写bin log两种情况各会遇到什么问题?</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/68633&quot;&gt;《极客时间-MySQL实战45讲》02 | 日志系统：一条SQL更新语句是如何执行的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;笔记整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.wrp.cool/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="笔记" scheme="https://www.wrp.cool/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL实战】基础架构：一条SQL查询语句是如何执行的？</title>
    <link href="https://www.wrp.cool/posts/7327/"/>
    <id>https://www.wrp.cool/posts/7327/</id>
    <published>2022-06-01T03:06:13.000Z</published>
    <updated>2022-06-07T15:43:46.247Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://time.geekbang.org/column/intro/100020801">《极客时间-MySQL实战45讲》01 | 基础架构：一条SQL查询语句是如何执行的？</a></p><ul><li>笔记整理</li></ul></blockquote><span id="more"></span><h1 id="MySQL-架构示意图"><a href="#MySQL-架构示意图" class="headerlink" title="MySQL 架构示意图"></a>MySQL 架构示意图</h1><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="MySQL逻辑架构图"></p><p>MySQL架构上从大体来说可以分为Server层和存储引擎层两个部分。</p><p><strong>Server层：</strong>包括连接器、查询缓存、分析器、优化器、执行器等，其中涵盖了MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有的跨存储引擎的功能也都在这一层实现，比如存储过程、触发器、视图等。</p><p><strong>存储引擎层：</strong>负责数据的存储和读取。其架构模式是插件式的，支持InnoDB、MyISAM、Menory等多个存储引擎。现在最常用的存储引擎是InnoDB，InnoDB从MySQL 5.5.5版本开始成为默认存储引擎。</p><h1 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h1><blockquote><p>连接器负责跟客户端建立连接、获取权限、维持和管理连接。</p></blockquote><p>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。<strong>之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</strong>但是这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。<u>修改完成后，只有再新建的连接才会使用新的权限设置。</u></p><p>由于 <u>MySQL 在执行过程中临时使用的内存是管理在连接对象里面的</u>。所以一旦一个连接使用时间过长，执行的操作越多，其所占用的内存也越大，而这些内存资源只有在连接被断开的时候才会被释放。一旦内存占用过大，就有可能会被系统强行杀掉，从现象上来看就是MySQL的异常重启。解决这个问题的方法一般有以下两种：</p><ol><li><strong>定期断开长连接。</strong>使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li><li>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，<strong>通过执行mysql_reset_connection来重新初始化连接资源。</strong>这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li></ol><h1 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h1><p>执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。</p><p>大多数情况下建议不要使用查询缓存，为什么呢？因为<strong>查询缓存往往弊大于利！</strong></p><p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。这对于经常更新的表来说，查询缓存的命中率会非常低。除非是一些静态表，例如系统配置表之类的。</p><p>MySQL 也提供了显示指定是否使用缓存的方式：将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> SQL_CACHE <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">10</span>；</span><br></pre></td></tr></table></figure><h1 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h1><p>对于SQL语句做词法分析、语法分析。</p><ul><li><strong>词法分析：</strong>分析SQL语句中的每个单词代表什么意思</li><li><strong>语法分析：</strong>分析SQL语句是否满足MySQL的语法要求</li></ul><h1 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h1><ul><li>决定使用索引的方式</li><li>如果是多表连接查询还需要决定表连接的先后顺序</li></ul><h1 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h1><p><strong>执行流程（没索引）：</strong></p><ol><li>调用 InnoDB 引擎接口取这个满足条件的第一行。</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><p>在数据库的慢查询日志中有一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。</p><p>但是在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。</p><hr><p>实际上在连接器、分析器、执行器阶段都是会做权限的校验的，因此把权限校验的这一块内容放在最后一起说明：</p><p><strong>连接器的权限校验：</strong>应该是库的校验，因为连接是可以指定连接到哪个库中去的，不指定库的话连接成功之后也是要返回可以操作的库给用户的。</p><p><strong>分析器的权限校验：</strong>在分析器应该是做的表权限验证，因为分析器已经分析出要执行的SQL了需要调用那一张表了，在此处进行表的权限验证就是最合适的。</p><p><strong>执行器的权限校验：</strong>在执行器这一块我认为是做的一个存储过程、触发器、函数之类的验证，因为在这些模块中是可能会调用到其他的表的，而在分析器的时候并不知道这些模块都调用到什么表，因此MySQL需要判断当前用户是否有对这些模块所调用到的表的权限。</p><hr><blockquote><p>网友热心总结的一些问题，复习的时候可以试着回答一下。</p></blockquote><ol><li>Server 有多少组件，各自都是什么作用？</li><li>Server 层和存储引擎层各是什么作用？</li><li><code>you have an error in your SQL syntax</code> 这个错误是在词法分析还是语法分析的报错？</li><li>对于表的操作权限验证在哪里进行？</li><li>执行器执行查询语句的流程是怎么样的？</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/100020801&quot;&gt;《极客时间-MySQL实战45讲》01 | 基础架构：一条SQL查询语句是如何执行的？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;笔记整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.wrp.cool/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="笔记" scheme="https://www.wrp.cool/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 远征篇</title>
    <link href="https://www.wrp.cool/posts/28560/"/>
    <id>https://www.wrp.cool/posts/28560/</id>
    <published>2021-09-28T05:29:17.000Z</published>
    <updated>2022-06-07T15:48:24.643Z</updated>
    
    <content type="html"><![CDATA[<p><font size=5><strong>初始 RabbitMQ</strong></font></p><p>RabbitMQ 是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ 是使用 Erlang 语言来编写的，并且 RabbitMQ 是基于 AMQP 协议的。</p><span id="more"></span><div class="note primary flat"><p><strong>Q&amp;A Time</strong></p></div><blockquote><p>RabbitMQ 高性能的原因？</p></blockquote><ol><li>Erlang语言最初在于交换机领域的架构模式，这样使得 RabbitMQ 在 Broker 之间进行数据交互的性能是非常优秀的</li><li>Erlang语言的优点：有着和原生 Socket 一样的延迟</li></ol><blockquote><p>什么是 AMQP？</p></blockquote><p>AMQP全称：Advanced Messgae Queuing Protocol（高级消息队列协议）</p><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210928135718.png" alt="20210928135718"></p><div class="note default flat"><p><strong>AMQP 核心概念：</strong></p></div><ol><li><strong>Server：</strong>又称 Broker，接受客户端的连接，实现 AMQP 实体服务</li><li><strong>Connection：</strong>连接，应用程序与 Broker 的网络连接</li><li><strong>Channel：</strong>网络信道，几乎所有的操作都在 Channel 中进行，Channel 是进行消息读写的通道。客户端可建立多个 Channel，每个 Channel 代表一个会话任务。</li><li><strong>Message：</strong>消息，服务器和应用程序之间传送的数据，由 Properties 和 Body 组成。Properties 可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body 则就是消息体内容。</li><li><strong>Virtual Host：</strong>虚拟地址，用于进行逻辑隔离，最上层的消息路由。一个 Virtual Host里面可以有若干个 Exchange 和 Queue，同一个 Virtual Host 里面不能用相同名称的 Exchange 或 Queue。</li><li><strong>Exchange：</strong>交换机，接收消息，根据路由键转发消息到绑定的队列。</li><li><strong>Binding：</strong>Exchange 和 Queue 之间的虚拟连接，binding 中可以包含 Routing Key。</li><li><strong>Routing Key：</strong>一个路由规则，虚拟机可用它来确定如何路由一个特定消息。</li><li><strong>Queue：</strong>也成为 Message Queue，消息队列，保存消息并将他们转发给消费者。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font size=5&gt;&lt;strong&gt;初始 RabbitMQ&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;RabbitMQ 是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ 是使用 Erlang 语言来编写的，并且 RabbitMQ 是基于 AMQP 协议的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="中间件" scheme="https://www.wrp.cool/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="RabbitMQ" scheme="https://www.wrp.cool/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 启航篇</title>
    <link href="https://www.wrp.cool/posts/38923/"/>
    <id>https://www.wrp.cool/posts/38923/</id>
    <published>2021-09-20T05:41:52.000Z</published>
    <updated>2021-09-28T05:49:20.703Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ 启航篇，本文将记录一下 RabbitMQ 在 CentOS 7 中安装的详细过程，以及简单的使用。以本文正式开始 RabbitMQ 的学习。</p><span id="more"></span><blockquote><p>RabbitMQ 的运行是基于 Erlang 的。所以在安装 RabbitMQ 之前需要先安装好 Erlang 的环境。RabbitMQ 对于运行环境 Erlang 也是有要求的，在安装 Erlang 之前应该先确定好要安装的 RabbitMQ 版本和 Erlang 版本是否兼容。</p><p>在 RabbitMQ 官网中可以查看各个版本的 RabbitMQ 对于 Erlang 环境的版本要求。<a href="https://www.rabbitmq.com/which-erlang.html">RabbitMQ 安装对应 Erlang 版本查询</a></p></blockquote><h1 id="Erlang-环境安装"><a href="#Erlang-环境安装" class="headerlink" title="Erlang 环境安装"></a>Erlang 环境安装</h1><p>在正式安装开始之前需要先安装好 Erlang 所需要的一些依赖，这里通过 yum 源进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install unixODBC unixODBC-devel wxBase wxGTK SDL wxGTK-gl epel-release</span><br></pre></td></tr></table></figure><ol><li><p><strong>下载：</strong><a href="https://www.erlang-solutions.com/downloads/">https://www.erlang-solutions.com/downloads/</a><br> 根据需要的版本以及操作系统选择对应的版本下载即可。在这里下载的是23.2版本的Erlang</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://packages.erlang-solutions.com/erlang/rpm/centos/7/x86_64/esl-erlang_23.2-1~centos~7_amd64.rpm</span><br></pre></td></tr></table></figure></li><li><p><strong>按照官网的要求先添加一个密钥</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://packages.erlang-solutions.com/rpm/erlang_solutions.asc</span><br></pre></td></tr></table></figure></li><li><p><strong>解压刚下载好的安装包</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh esl-erlang_23.2-1~centos~7_amd64.rpm</span><br></pre></td></tr></table></figure></li><li><p><strong>通过 yum 源安装 Erlang</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install erlang</span><br></pre></td></tr></table></figure></li><li><p><strong>验证安装是否成功</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl -version</span><br></pre></td></tr></table></figure><p> 如果可以看到 Erlang 的版本信息则说明安装成功。</p></li></ol><h1 id="RabbitMQ-安装"><a href="#RabbitMQ-安装" class="headerlink" title="RabbitMQ 安装"></a>RabbitMQ 安装</h1><p>前文 RabbitMQ 所需要的环境 Erlang 已经安装成功，现在可以安装 RabbitMQ 了。</p><ol><li><p><strong>下载：</strong><a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a> ，打开下载页面找到以下部分，根据系统选择下载即可。<br> 需要选择版本去 GitHub 中寻找合适的版本。<br> <img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210920144340.png" alt="20210920144340"></p></li><li><p><strong>解压下载的安装包</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh rabbitmq-server-3.9.5-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure></li></ol><p>至此，RabbitMQ 就安装成功了，运行 <code>systemctl start rabbitmq-server</code> 即可启动 RabbitMQ。</p><hr><p><font size=5><strong>常用命令</strong></font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加用户</span></span><br><span class="line">rabbitmqctl add_user 用户 密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置用户角色（根绝角色分配权限）</span></span><br><span class="line">rabbitmqctl set_user_tags 用户 角色</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改用户密码</span></span><br><span class="line">rabbitmqctl change_password 用户 新密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除用户</span></span><br><span class="line">rabbitmqctl delete_user 用户</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为用户设置权限</span></span><br><span class="line">rabbitmqctl set_permissions -p / 用户 &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 RabbitMQ WEB 界面管理，访问地址：http://虚拟机IP:15672，需要创建一个用户进行访问</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><blockquote><p>参考文章：<br><a href="https://juejin.cn/post/6844903926408413197#heading-0">RabbitMQ的六种工作模式</a><br><a href="https://segmentfault.com/a/1190000023107822">连RabbitMQ的5种核心消息模式都不懂，也敢说自己会用消息队列！</a></p></blockquote><hr><p><strong>一个代码仓库介绍一下 RabbitMQ 中五种常用模式，也在此正式启航 RabbitMQ</strong></p><ul><li><a href="https://github.com/wangruipeng-wrp/rabbitmq">GitHub</a></li><li><a href="https://gitee.com/wangruipeng-wrp/rabbtmq">Gitee</a></li></ul><p>大家加油：）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RabbitMQ 启航篇，本文将记录一下 RabbitMQ 在 CentOS 7 中安装的详细过程，以及简单的使用。以本文正式开始 RabbitMQ 的学习。&lt;/p&gt;</summary>
    
    
    
    
    <category term="中间件" scheme="https://www.wrp.cool/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="RabbitMQ" scheme="https://www.wrp.cool/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Redis 高可用集群搭建</title>
    <link href="https://www.wrp.cool/posts/61883/"/>
    <id>https://www.wrp.cool/posts/61883/</id>
    <published>2021-09-12T16:22:34.000Z</published>
    <updated>2021-09-19T03:08:19.055Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先占个坑，回头来把这篇博客补全。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;先占个坑，回头来把这篇博客补全。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis 持久化机制（RDB 和 AOF）</title>
    <link href="https://www.wrp.cool/posts/59553/"/>
    <id>https://www.wrp.cool/posts/59553/</id>
    <published>2021-09-12T16:21:49.000Z</published>
    <updated>2022-02-21T08:27:46.729Z</updated>
    
    <content type="html"><![CDATA[<p>RDB和AOF分别是Redis所提供的两种持久化方式，其中RDB是全量备份，也就是一个快照的方式，对应的AOF就是一个增量备份的方式，是一个日志备份的方式。</p><span id="more"></span><blockquote><p>本文非原著，出自：<a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-rdb-aof.html">Redis进阶 - 持久化：RDB和AOF机制详解</a></p></blockquote><hr><h1 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h1><p>触发Redis进行RDB备份的方式有两种，手动备份和自动备份。自动备份需要在配置文件种设置一些配置项，手动备份只需要手动向Redis控制台输入<code>save</code>命令或者是<code>bgsave</code>命令。</p><ul><li><code>save</code>：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存比较大的实例会造成长时间<strong>阻塞</strong>，线上环境不建议使用</li><li><code>bgsave</code>：Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短</li></ul><p>bgsave流程图如下所示<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20220221142546.png" alt="20220221142546"></p><h2 id="会自动触发RDB备份的四种情况"><a href="#会自动触发RDB备份的四种情况" class="headerlink" title="会自动触发RDB备份的四种情况"></a>会自动触发RDB备份的四种情况</h2><ul><li>redis.conf中配置<code>save m n</code>，即在<code>m</code>秒内有<code>n</code>次修改时，自动触发bgsave生成rdb文件</li><li>主从复制时，从节点要从主节点进行全量复制时也会触发bgsave操作，生成当时的快照发送到从节点；执行debug</li><li>reload命令重新加载redis时也会触发bgsave操作</li><li>默认情况下执行shutdown命令时，如果没有开启aof持久化，那么也会触发bgsave操作</li></ul><h2 id="redis-conf-中配置RDB备份"><a href="#redis-conf-中配置RDB备份" class="headerlink" title="redis.conf 中配置RDB备份"></a>redis.conf 中配置RDB备份</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 周期性执行条件的设置格式为</span><br><span class="line">save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"></span><br><span class="line"># 默认的设置为：</span><br><span class="line">save 900 1      # 如果900秒内有1条Key信息发生变化，则进行快照</span><br><span class="line">save 300 10     # 如果300秒内有10条Key信息发生变化，则进行快照</span><br><span class="line">save 60 10000   # 如果60秒内有10000条Key信息发生变化，则进行快照</span><br><span class="line"></span><br><span class="line"># 以下设置方式为关闭RDB快照功能</span><br><span class="line">save &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 文件名称</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># 文件保存路径</span><br><span class="line">dir /home/work/app/redis/data/</span><br><span class="line"></span><br><span class="line"># 如果持久化出错，主进程是否停止写入</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"># 是否压缩 </span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># 导入时是否检查</span><br><span class="line">rdbchecksum yes</span><br></pre></td></tr></table></figure><p><code>rdbcompression</code>：该属性将在字符串类型的数据被快照到磁盘文件时，启用LZF压缩算法。Redis官方的建议是请保持该选项设置为yes，因为“it’s almost always a win”。<br><code>rdbchecksum</code>：从RDB快照功能的version 5 版本开始，一个64位的CRC冗余校验编码会被放置在RDB文件的末尾，以便对整个RDB文件的完整性进行验证。这个功能大概会多损失10%左右的性能，但获得了更高的数据可靠性。所以如果您的Redis服务需要追求极致的性能，就可以将这个选项设置为no。</p><h2 id="拍摄快照的过程中如何保证数据一致性？"><a href="#拍摄快照的过程中如何保证数据一致性？" class="headerlink" title="拍摄快照的过程中如何保证数据一致性？"></a>拍摄快照的过程中如何保证数据一致性？</h2><p><em>由于生产环境中我们为Redis开辟的内存区域都比较大（例如6GB），那么将内存中的数据同步到硬盘的过程可能就会持续比较长的时间，而实际情况是这段时间Redis服务一般都会收到数据写操作请求。那么如何保证数据一致性呢？</em></p><p>RDB中的核心思路是Copy-on-Write，来保证在进行快照操作的这段时间，需要压缩写入磁盘上的数据在内存中不会发生变化。在正常的快照操作中，一方面Redis主进程会fork一个新的快照进程专门来做这个事情，这样保证了Redis服务不会停止对客户端包括写请求在内的任何响应。另一方面这段时间发生的数据变化会以副本的方式存放在另一个新的内存区域，待快照操作结束后才会同步到原来的内存区域。 </p><p>举个例子：如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。</p><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20220221144234.png" alt="20220221144234"></p><h2 id="RDB优缺点"><a href="#RDB优缺点" class="headerlink" title="RDB优缺点"></a>RDB优缺点</h2><ul><li><strong>优点</strong><ul><li>RDB文件是某个时间节点的快照，默认使用LZF算法进行压缩，压缩后的文件体积远远小于内存大小，适用于备份、全量复制等场景；</li><li>Redis加载RDB文件恢复数据要远远快于AOF方式；</li></ul></li><li><strong>缺点</strong><ul><li>RDB方式实时性不够，无法做到秒级的持久化；</li><li>每次调用bgsave都需要fork子进程，fork子进程属于重量级操作，频繁执行成本较高；</li><li>每次调用bgsave都需要fork子进程，fork子进程属于重量级操作，频繁执行成本较高；</li><li>版本兼容RDB文件问题；</li></ul></li></ul><h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><p>Redis是“写后”日志，Redis先执行命令，把数据写入内存，然后才记录日志。日志里记录的是Redis收到的每一条命令，这些命令是以文本形式保存。即先写内存，后写日志。</p><h2 id="为什么采用写后日志？"><a href="#为什么采用写后日志？" class="headerlink" title="为什么采用写后日志？"></a>为什么采用写后日志？</h2><p>Redis要求高性能，采用写后日志有两方面好处：</p><ul><li><strong>避免额外的检查开销</strong>：Redis 在向 AOF 里面记录日志的时候，并不会先去对这些命令进行语法检查。所以，如果先记日志再执行命令的话，日志中就有可能记录了错误的命令，Redis 在使用日志恢复数据时，就可能会出错。 </li><li>不会阻塞当前的写操作。</li></ul><p>但这种方式存在潜在风险：</p><ul><li>如果命令执行完成，写日志之前宕机了，会丢失数据。</li><li>主线程写磁盘压力大，导致写盘慢，阻塞后续操作。</li></ul><h2 id="三种写回策略："><a href="#三种写回策略：" class="headerlink" title="三种写回策略："></a>三种写回策略：</h2><ul><li>always，同步写回：每个写命令执行完，立马同步地将日志写回磁盘</li><li>everysec，每秒写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘</li><li>no，操作系统控制的写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</li></ul><p>为了提高文件写入效率，在现代操作系统中，当用户调用write函数，将一些数据写入文件时，操作系统通常会将数据暂存到一个内存缓冲区里，当缓冲区的空间被填满或超过了指定时限后，才真正将缓冲区的数据写入到磁盘里。</p><p>这样的操作虽然提高了效率，但也为数据写入带来了安全问题：如果计算机停机，内存缓冲区中的数据会丢失。为此，系统提供了fsync、fdatasync同步函数，可以强制操作系统立刻将缓冲区中的数据写入到硬盘里，从而确保写入数据的安全性。</p><h2 id="redis-conf中配置AOF"><a href="#redis-conf中配置AOF" class="headerlink" title="redis.conf中配置AOF"></a>redis.conf中配置AOF</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># appendonly参数开启AOF持久化</span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># AOF持久化的文件名，默认是appendonly.aof</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"># 同步策略</span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"># aof重写期间是否同步</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># 重写触发配置</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"># 加载aof出错如何处理</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"># 文件重写策略</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure><ul><li><code>appendfsync</code>：这个参数项是AOF功能最重要的设置项之一，主要用于设置“真正执行”操作命令向AOF文件中同步的策略。与上节对应，appendfsync参数项可以设置三个值，分别是：always、everysec、no，默认的值为everysec。</li><li><code>auto-aof-rewrite-percentage</code>：上文说到在生产环境下，技术人员不可能随时随地使用“BGREWRITEAOF”命令去重写AOF文件。所以更多时候我们需要依靠Redis中对AOF文件的自动重写策略。Redis中对触发自动重写AOF文件的操作提供了两个设置：auto-aof-rewrite-percentage表示如果当前AOF文件的大小超过了上次重写后AOF文件的百分之多少后，就再次开始重写AOF文件。例如该参数值的默认设置值为100，意思就是如果AOF文件的大小超过上次AOF文件重写后的1倍，就启动重写操作。 </li><li><code>auto-aof-rewrite-min-size</code>：参考auto-aof-rewrite-percentage选项的介绍，auto-aof-rewrite-min-size设置项表示启动AOF文件重写操作的AOF文件最小大小。如果AOF文件大小低于这个值，则不会触发重写操作。注意，auto-aof-rewrite-percentage和auto-aof-rewrite-min-size只是用来控制Redis中自动对AOF文件进行重写的情况，如果是技术人员手动调用“BGREWRITEAOF”命令，则不受这两个限制条件左右。</li></ul><h2 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h2><p>AOF会记录每个写命令到AOF文件，随着时间越来越长，AOF文件会变得越来越大。如果不加以控制，会对Redis服务器，甚至对操作系统造成影响，而且AOF文件越大，数据恢复也越慢。为了解决AOF文件体积膨胀的问题，Redis提供AOF文件重写机制来对AOF文件进行“瘦身”。Redis通过创建一个新的AOF文件来替换现有的AOF，新旧两个AOF文件保存的数据相同，但新AOF文件没有了冗余命令。</p><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20220221161556.png" alt="20220221161556"></p><ul><li><p><strong>AOF重写会阻塞吗？</strong><br>  AOF重写过程是由后台进程bgrewriteaof来完成的。主线程fork出后台的bgrewriteaof子进程，fork会把主线程的内存拷贝一份给bgrewriteaof子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。 </p><p>  所以aof在重写时，在fork进程时是会阻塞住主线程的。</p></li><li><p><strong>AOF日志何时会重写？</strong><br>  有两个配置项控制AOF重写的触发：</p><ul><li><code>auto-aof-rewrite-min-size</code>：表示运行AOF重写时文件的最小大小，默认为64MB。</li><li><code>auto-aof-rewrite-percentage</code>：这个值的计算方式是，当前aof文件大小和上一次重写后aof文件大小的差值，再除以上一次重写后aof文件大小。也就是当前aof文件比上一次重写后aof文件的增量大小，和上一次重写后aof文件大小的比值。</li></ul></li><li><p><strong>小结：</strong></p><ul><li>主线程fork出子进程重写aof日志</li><li>子进程重写日志完成后，主线程追加aof日志缓冲</li><li>替换日志文件</li></ul></li></ul><h1 id="RDB和AOF混合方式"><a href="#RDB和AOF混合方式" class="headerlink" title="RDB和AOF混合方式"></a>RDB和AOF混合方式</h1><blockquote><p>Redis 4.0 中提出了一个混合使用 AOF 日志和内存快照的方法。简单来说，内存快照以一定的频率执行，在两次快照之间，使用 AOF 日志记录这期间的所有命令操作。</p></blockquote><p>这样一来，快照不用很频繁地执行，这就避免了频繁 fork 对主线程的影响。而且，AOF 日志也只用记录两次快照间的操作，也就是说，不需要记录所有操作了，因此，就不会出现文件过大的情况了，也可以避免重写开销。</p><p>如下图所示，T1 和 T2 时刻的修改，用 AOF 日志记录，等到第二次做全量快照时，就可以清空 AOF 日志，因为此时的修改都已经记录到快照中了，恢复时就不再用日志了。</p><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20220221162108.png" alt="20220221162108"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RDB和AOF分别是Redis所提供的两种持久化方式，其中RDB是全量备份，也就是一个快照的方式，对应的AOF就是一个增量备份的方式，是一个日志备份的方式。&lt;/p&gt;</summary>
    
    
    
    <category term="Redis" scheme="https://www.wrp.cool/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://www.wrp.cool/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 集成 Redis</title>
    <link href="https://www.wrp.cool/posts/44305/"/>
    <id>https://www.wrp.cool/posts/44305/</id>
    <published>2021-09-12T16:21:09.000Z</published>
    <updated>2022-02-21T08:24:42.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用 Spring Boot 操作 Redis 其实非常简单，本文主要记录一下整合的步骤，方便后续查看。</p></blockquote><span id="more"></span><ol><li><p>添加 Redis 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 yml 文件中配置 Redis 服务器信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">&quot;指定所使用的是 Redis 中的哪个数据库&quot;</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">&quot;Redis 服务器 IP 地址&quot;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">&quot;Redis 端口号&quot;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&quot;指定登录客户端的密码，如果没有可以不指定&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>在 Spring Boot 中使用 StringRedisTemplate 操作 Redis 缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis 工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisOperator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以 key 为键获取 Redis 中的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 Redis 键值对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        set(key, value, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 Redid 键值对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间，单位：秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 Redis 中的键值对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... keys)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys)</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>以上是我在日常开发中真实使用到的一些对 Redis 的操作，在此封装成一个简单的工具类，以后随着使用的越多会封装更多简便的方法。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用 Spring Boot 操作 Redis 其实非常简单，本文主要记录一下整合的步骤，方便后续查看。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Spring" scheme="https://www.wrp.cool/categories/Spring/"/>
    
    <category term="Spring Boot" scheme="https://www.wrp.cool/categories/Spring/Spring-Boot/"/>
    
    
    <category term="Spring Boot" scheme="https://www.wrp.cool/tags/Spring-Boot/"/>
    
    <category term="Redis" scheme="https://www.wrp.cool/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Keepalived 实现 Nginx 的主备和互备</title>
    <link href="https://www.wrp.cool/posts/42807/"/>
    <id>https://www.wrp.cool/posts/42807/</id>
    <published>2021-08-22T07:05:46.000Z</published>
    <updated>2021-09-01T15:58:24.277Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文侧重点是讲解 Keepalived 的原理以及使用方式。</p></blockquote><p><strong>简单讲解一下 Keepalived 的工作原理：</strong></p><ol><li>通过 VRRP 协议将虚拟IP绑定至本机的一张网卡上</li><li>将 Nginx 服务器的IP隐藏起来不对用户暴露，用户直接访问虚拟IP</li><li>通过虚拟IP对同一个集群内的不同节点网卡的绑定来实现控制用户访问不同的节点</li></ol><span id="more"></span><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ol><li>CentOS 7 虚拟机1，IP地址：<code>192.168.160.136</code>，为了方便区分取主机名为 <code>keep_136</code></li><li>CentOS 7 虚拟机2，IP地址：<code>192.168.160.137</code>，为了方便区分取主机名为 <code>keep_137</code></li><li>分别安装：<code>nginx-1.20.1</code>、<code>keepalived-2.2.4</code></li><li>绑定虚拟IP为 <code>192.168.160.161</code></li></ol><h3 id="实验准备工作"><a href="#实验准备工作" class="headerlink" title="实验准备工作"></a>实验准备工作</h3><ol><li><p><strong>安装 Nginx</strong></p><ul><li>详细步骤记录于：<a href="https://www.wrp.cool/posts/62048/">Nginx 安装</a></li></ul></li><li><p><strong>安装 Keepalived</strong></p><ul><li><strong>下载：</strong><a href="https://www.keepalived.org/download.html">https://www.keepalived.org/download.html</a></li><li><strong>依赖：</strong><code>yum -y install libnl libnl-level</code></li><li><strong>配置：</strong><code>./configure --prefix=/usr/local/keepalived --sysconf=/etc</code></li><li><strong>安装：</strong><code>make &amp;&amp; make install</code></li><li><strong>配置文件：</strong><code>/etc/keepalived/keelalived.conf</code></li></ul></li><li><p><strong>注册 Keepalived 为系统服务</strong></p><ul><li>进入 Keepalived 的安装目录下的<code>/keepalived/etc/</code>，以本实验为例： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/software/keepalived-2.2.4/keepalived/etc</span><br></pre></td></tr></table></figure></li><li>复制安装目录下的<code>init.d</code>目录下的<code>keepalived</code>文件拷贝到<code>/etc/init.d</code>目录中 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -a init.d/keepalived /etc/init.d/</span><br></pre></td></tr></table></figure></li><li>复制<code>sysconfig</code>目录中的<code>keepalive</code>文件至<code>/etc/sysconfig</code>目录中 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -a sysconfig/keepalived /etc/sysconfig/</span><br></pre></td></tr></table></figure></li><li>重新加载 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li>启动、关闭、重启 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived</span><br><span class="line">systemctl stop keepalived</span><br><span class="line">systemctl restart keepalived</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="主备实验步骤"><a href="#主备实验步骤" class="headerlink" title="主备实验步骤"></a>主备实验步骤</h3><ol><li><p>配置 Keepalived 主机（keep_136）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line"># 全局配置</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id keep_136          # 路由ID：当前安装 keepalived 节点主机的标识符，全局唯一</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 计算机节点</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER                # 标识当前节点为主节点或者是备节点。MASTER/BACKUP</span><br><span class="line">    interface ens33             # 指定虚拟IP所绑定的本机网卡</span><br><span class="line">    virtual_router_id 51        # 虚拟路由ID，保持主备节点一致即可</span><br><span class="line">    priority 100                # 标识计算节点权重，当主节点宕机后权重高的节点优先成为主节点</span><br><span class="line">    advert_int 1                # 心跳检测间隔时间，单位：秒</span><br><span class="line"></span><br><span class="line">    # 认证授权的密码，防止非法节点接入</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 虚拟IP</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.160.161</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置 Keepalived 备用机（keep_137）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id keep_137</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 80</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.160.161</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="互备实验步骤"><a href="#互备实验步骤" class="headerlink" title="互备实验步骤"></a>互备实验步骤</h3><blockquote><p>做完了主备之后，互备其实很简单，就是在备用机中添加一份主机的配置，在主机中添加一份备用机的配置。</p></blockquote><ol><li><p>配置 Keepalived 主机（keep_136）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 添加一个备用机节点的配置</span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 80</span><br><span class="line">    advert_int 1</span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.160.162</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置 Keepalived 备用机（keep_137）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 添加一个主机节点的配置</span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.160.162</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h3><ol><li>分别启动两台虚拟机中的 Keepalived 服务</li><li>观察此时的虚拟IP绑定在哪台虚拟机中，可使用 <code>ip addr</code> 命令查看</li><li>打开浏览器访问虚拟IP，此时由主机提供服务</li><li>停止提供服务的 Keepalived</li><li>浏览器中再次访问该虚拟IP，此时可见由备用机开始提供服务</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文侧重点是讲解 Keepalived 的原理以及使用方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;简单讲解一下 Keepalived 的工作原理：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 VRRP 协议将虚拟IP绑定至本机的一张网卡上&lt;/li&gt;
&lt;li&gt;将 Nginx 服务器的IP隐藏起来不对用户暴露，用户直接访问虚拟IP&lt;/li&gt;
&lt;li&gt;通过虚拟IP对同一个集群内的不同节点网卡的绑定来实现控制用户访问不同的节点&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="负载均衡" scheme="https://www.wrp.cool/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
    <category term="Keepalived" scheme="https://www.wrp.cool/tags/Keepalived/"/>
    
    <category term="主备" scheme="https://www.wrp.cool/tags/%E4%B8%BB%E5%A4%87/"/>
    
    <category term="互备" scheme="https://www.wrp.cool/tags/%E4%BA%92%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>Git 钩子自动化部署 Spring Boot 项目</title>
    <link href="https://www.wrp.cool/posts/19410/"/>
    <id>https://www.wrp.cool/posts/19410/</id>
    <published>2021-08-17T09:20:20.000Z</published>
    <updated>2021-09-05T07:37:46.614Z</updated>
    
    <content type="html"><![CDATA[<p>开发过程中，接口开发完毕给测试人员做测试的时候会很经常的需要将一些测试提交的修改更新到测试服务器上去，但是如果每次提交都手动的去测试服务器打包代码，重启服务的话，那太麻烦了。</p><p>之前在 Linux 服务器上部署这个博客的时候有了解到 git 里面有一个钩子的东西可以做这种自动化的部署，于是最近研究了一下针对上面的问题可以使用 git 的钩子来做一个项目的自动部署，这样就不用每次都去手动的部署了，要更新的时候只需要把代码提交到 git 上就可以完成自动化部署。</p><p>接下来详细说一下部署的过程，也算是做一个记录，方便以后查看。</p><span id="more"></span><hr><p><font size=4><strong>在测试环境上搭建git仓库</strong></font></p><ol><li><p><strong>安装git</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure></li><li><p><strong>创建一个 git 用户并且设置密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd git</span><br><span class="line">passwd git</span><br></pre></td></tr></table></figure></li><li><p><strong>选定一个目录作为git仓库，并初始化这个git仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个 project.git 的目录，并初始化为 git 仓库</span></span><br><span class="line">git init --bare projuce.git</span><br></pre></td></tr></table></figure></li><li><p><strong>将本地的 ssh 公钥部署到服务器上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1) 创建 ssh 公钥</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2) 创建 authorized_keys 文件</span></span><br><span class="line">touch /home/git/.ssh/authorized_keys</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3) 将本地创建的公钥复制到 authorized_keys 中，一行一个</span></span><br></pre></td></tr></table></figure></li><li><p><strong>本地项目添加测试服务器的 git 远程仓库地址</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@&#x27;测试服务器IP&#x27;:&#x27;仓库路径&#x27;</span><br></pre></td></tr></table></figure><p>接下来就是在本地正常的提交代码到测试服务器的 git 仓库了，就像是平时开发一样提交即可。</p></li></ol><hr><p><font size=4><strong>将代码部署到测试服务器</strong></font></p><ol><li><p><strong>检出代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --work-tree=&#x27;要发布的目录&#x27; --git-dir=&#x27;远程仓库地址&#x27; checkout -f</span><br></pre></td></tr></table></figure></li><li><p><strong>打包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure></li><li><p><strong>启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure></li></ol><p><font size=4><strong>自动化部署到测试服务器</strong></font></p><p>自动化部署的流程跟以上是一样的，只是利用了 git 的钩子来自动的执行一个部署的脚本，以此免去了人工手动部署的工作。</p><ol><li><p><strong>在测试服务器上的 git 远程仓库中有一个 <code>hooks</code> 文件夹，在这个文件夹中创建 <code>post-receive</code> 文件</strong></p><blockquote><p>这个文件就是钩子，当我们的代码提交到这个远程仓库中就会触发这个文件的执行，于是我们就可以把代码部署的脚本写在这个文件中，利用这个来实现自动部署。</p></blockquote></li><li><p><strong>赋予 <code>post-receive</code> 可执行权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure></li><li><p><strong>自动部署代码脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo &quot;删除项目目录&quot;</span><br><span class="line">rm -rf &quot;项目目录&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;创建项目目录&quot;</span><br><span class="line">mkdir &quot;项目目录&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;拉取代码&quot;</span><br><span class="line">git --work-tree=&#x27;项目根目录&#x27; --git-dir=&#x27;远程仓库地址&#x27; checkout -f</span><br><span class="line"></span><br><span class="line">echo &quot;进入项目根目录&quot;</span><br><span class="line">cd ~/foodie-prod/foodie/</span><br><span class="line"></span><br><span class="line">echo &quot;maven 打包&quot;</span><br><span class="line">/usr/local/apache-maven-3.8.1/bin/mvn package # 此处 maven 打包需要使用全路径</span><br><span class="line"></span><br><span class="line">echo &quot;停止正在运行的 Spring Boot&quot;</span><br><span class="line">appid=`ps -ef |grep java|grep foodie|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">kill $appid</span><br><span class="line"></span><br><span class="line">echo &quot;进入 jar 包所在路径&quot;</span><br><span class="line">cd &quot;jar 包所在路径&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;后台启动 Spring Boot&quot;</span><br><span class="line">nohup java -jar -Dspring.profiles.active=&quot;配置文件&quot; foodie-api-0.0.1-SNAPSHOT.jar &gt; ~/temp.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">echo &quot;休眠 10s 等待 Spring Boot 启动&quot;</span><br><span class="line">sleep 10</span><br><span class="line"></span><br><span class="line">echo &quot;自动化发布脚本执行结束！&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>以上脚本在编写时应该对每一步都进行校验以保证最终成功运行。<br>钩子的运行日志可以提交代码时查看。</p></blockquote></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;开发过程中，接口开发完毕给测试人员做测试的时候会很经常的需要将一些测试提交的修改更新到测试服务器上去，但是如果每次提交都手动的去测试服务器打包代码，重启服务的话，那太麻烦了。&lt;/p&gt;
&lt;p&gt;之前在 Linux 服务器上部署这个博客的时候有了解到 git 里面有一个钩子的东西可以做这种自动化的部署，于是最近研究了一下针对上面的问题可以使用 git 的钩子来做一个项目的自动部署，这样就不用每次都去手动的部署了，要更新的时候只需要把代码提交到 git 上就可以完成自动化部署。&lt;/p&gt;
&lt;p&gt;接下来详细说一下部署的过程，也算是做一个记录，方便以后查看。&lt;/p&gt;</summary>
    
    
    
    <category term="Spring" scheme="https://www.wrp.cool/categories/Spring/"/>
    
    <category term="Spring Boot" scheme="https://www.wrp.cool/categories/Spring/Spring-Boot/"/>
    
    
    <category term="git" scheme="https://www.wrp.cool/tags/git/"/>
    
    <category term="Spring Boot" scheme="https://www.wrp.cool/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 安装</title>
    <link href="https://www.wrp.cool/posts/7587/"/>
    <id>https://www.wrp.cool/posts/7587/</id>
    <published>2021-08-17T09:19:35.000Z</published>
    <updated>2022-06-03T06:04:56.134Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下 Linux 中安装 MySQL 的步骤。</p><span id="more"></span><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>MySQL 下载地址：<a href="https://www.mysql.com/downloads/">https://www.mysql.com/downloads/</a></p><ol><li><p><strong>进入下载地址点击这个链接</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210818114657.png" alt="20210818114657"></p></li><li><p><strong>选择 MySQL Yum Repository</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210818115056.png" alt="20210818115056"></p></li><li><p><strong>进入这个页面之后选择合适的的版本点击 <code>Download</code></strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210818120024.png" alt="20210818120024"></p></li><li><p><strong>右键这个链接选择“复制链接地址”到 Linux 系统中使用 <code>wget</code> 下载即可</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210818120520.png" alt="20210818120520"></p></li></ol><hr><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p><strong>检查是否安装了 MySQL 或者 Mariadb，如果安装了需要先卸载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否安装了 MySQL</span></span><br><span class="line">rpm -qa |grep mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载 MySQL</span></span><br><span class="line">rpm -e --nodeps &quot;上面查询出来的全部内容&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>开始安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下载的 MySQL 文件加载进本地 yum 源中</span></span><br><span class="line">yum -y localinstall mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 yum 源进行安装</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure></li><li><p><strong>启动 MySQL</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">service mysqld start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 MySQL 服务是否启动成功</span></span><br><span class="line">ps -ef |grep mysql</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><ol><li><p><strong>查询 MySQL 临时密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p><strong>登录 MySQL</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p&#x27;临时密码&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改 root 用户密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整密码复杂度和长度</span></span><br><span class="line">set global validate_password.policy=0;</span><br><span class="line">set global validate_password.length=4;</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &quot;新密码&quot;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="SQL的四种语言：DDL、DML、DCL、TCL"><a href="#SQL的四种语言：DDL、DML、DCL、TCL" class="headerlink" title="SQL的四种语言：DDL、DML、DCL、TCL"></a>SQL的四种语言：DDL、DML、DCL、TCL</h4><ul><li><p><strong>DDL（Data Definition Language）</strong></p><ul><li>数据定义语言，定义表结构跟约束</li><li>关键字：CREATE、ALTER、DROP、TRUNCATE（清空表）</li></ul></li><li><p><strong>DML（Data Manipulation Language）</strong></p><ul><li>数据操纵语言，可操控具体数据</li><li>关键字：SELECT、INSERT、UPDATE、DELETE</li></ul></li><li><p><strong>DCL（Data Control Language）</strong></p><ul><li>数据库控制语言，授权，角色控制等</li><li>关键字：GRANT、REVOKE</li></ul></li><li><p><strong>TCL（Transaction Control Language）</strong></p><ul><li>事务控制语言</li><li>关键字：BEGIN、COMMIT、ROLLBACK</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下 Linux 中安装 MySQL 的步骤。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.wrp.cool/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://www.wrp.cool/tags/MySQL/"/>
    
    <category term="Linux" scheme="https://www.wrp.cool/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置</title>
    <link href="https://www.wrp.cool/posts/48812/"/>
    <id>https://www.wrp.cool/posts/48812/</id>
    <published>2021-08-17T09:19:13.000Z</published>
    <updated>2021-08-28T13:12:23.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录一些 nginx 中的配置，以便后续查看。</p></blockquote><span id="more"></span><p>Nginx 的配置文件都放在 conf 目录下，其中最重要的就是 <code>nginx.conf</code> 配置文件，本文也主要记录该配置文件中的配置</p><p>为了使配置文件能够更方便管理，把一些站点配置写到外面来，不要直接写入 <code>nginx.conf</code> 文件</p><p>在 conf 文件夹下创建一个 hosts 文件夹，之后将每个虚拟主机的配置都以 <code>域名.conf</code> 的命名格式保存在 hosts 文件夹中</p><p>之后在 nginx.conf 文件的 http 的大括号内引入自己写的配置文件 <code>include hosts/*.conf;</code></p><h4 id="运行配置"><a href="#运行配置" class="headerlink" title="运行配置"></a>运行配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定运行 worker 进程的用户</span></span><br><span class="line">user root;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">worker 进程的数量</span></span><br><span class="line">worker_processes  3;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志文件输出配置 可根据日志级别输出到不同的日志文件中</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 pid</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作模式</span></span><br><span class="line">events &#123;</span><br><span class="line">    # 默认使用 epoll，采用异步非阻塞的处理方式</span><br><span class="line">    use epoll;</span><br><span class="line">    # 每个 worker 进程的客户端最大连接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="传输配置"><a href="#传输配置" class="headerlink" title="传输配置"></a>传输配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    # 导入请求类型</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # 日志格式，main 为格式的名称，可以通过 main 来指定输出此日志格式。</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                        &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                        &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    # 定义日志输出格式</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    # sendfile 高效传输文件，开启可提升传输性能，开启后才可以使用 tcp_nopush，当数据累积到一定大小后才发送，提高了效率</span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    # 设置客户端与服务端请求的超时时间，保证客户端多次请求的时候不会重复建立新的连接，节约资源资源损耗</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    # 启用 gzip 压缩，静态资源文件压缩后传输会更快一些</span><br><span class="line">    gzip  on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>日志格式：</strong></p><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>$remote_addr</td><td>客户端IP</td></tr><tr><td>$remote_user</td><td>远程客户端用户名，一般为：’-‘</td></tr><tr><td>$time_local</td><td>时间和时区</td></tr><tr><td>$request</td><td>请求的 url 和 method</td></tr><tr><td>$status</td><td>响应状态码</td></tr><tr><td>$body_bytes_send</td><td>响应客户端内容字节数</td></tr><tr><td>$http_referer</td><td>记录用户从哪个链接跳转过来的</td></tr><tr><td>$http_user_agent</td><td>用户所使用的代理，一般情况下为浏览器</td></tr><tr><td>$http_x_forwarded_for</td><td>通过代理服务器来记录客户端的IP</td></tr></tbody></table><h4 id="虚拟主机配置"><a href="#虚拟主机配置" class="headerlink" title="虚拟主机配置"></a>虚拟主机配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    # 虚拟主机配置块</span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80;         # 监听端口</span><br><span class="line">        server_name localhost;  # 请求域名</span><br><span class="line"></span><br><span class="line">        # 设置请求头，一般用于解决跨域问题</span><br><span class="line">        add_header &#x27;Access-Control_Allow_Origin&#x27; *;             # 允许跨域请求的域</span><br><span class="line">        add_header &#x27;Access-Control_Allow_Credentials&#x27; &#x27;true&#x27;;   # 允许带上 cookie 请求</span><br><span class="line">        add_header &#x27;Access-Control_Allow_Methods&#x27; *;            # 允许请求的方法（GET/POST/PUT/DELETE）</span><br><span class="line">        add_header &#x27;Access-Control_Allow_Headers&#x27; *;            # 允许请求的 header</span><br><span class="line"></span><br><span class="line">        # 对源站点进行验证（防盗链）</span><br><span class="line">        valid_referers *.wrp.cool;</span><br><span class="line">        if ($valid_referers) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 请求路由映射，匹配拦截</span><br><span class="line">        location / &#123;</span><br><span class="line">            root        html;           # 网站根路径（配置负载均衡之后不需要配置根路径）</span><br><span class="line">            index       index.html;     # 默认首页</span><br><span class="line">            expires     10s;            # 设置缓存</span><br><span class="line">            # alias 可以为请求路径配置一个别名</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # ssl 证书配置</span><br><span class="line">        ssl on                              # 开启ssl</span><br><span class="line">        ssl_certificate &quot;ssl证书路径&quot;;       # 配置 ssl 证书</span><br><span class="line">        ssl_certificate_key &quot;ssl证书路径&quot;;   # 配置 ssl 证书密钥</span><br><span class="line">        ssl_session_cache shared:SSL:10m;   # ssl 会话 cache</span><br><span class="line">        ssl_session_timeout 10m;            # ssl 会话超时时间</span><br><span class="line">        # 配置加密套件</span><br><span class="line">        ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>location 的匹配规则：</strong></p><ul><li><code>空格</code>：普通匹配</li><li><code>=</code>：精确匹配</li><li><code>~*</code>：匹配正则表达式，不区分大小写</li><li><code>~</code>：匹配正则表达式，区分大小写</li><li><code>^~</code>：以某个字符路径开头</li></ul><p><strong>expires 指令</strong></p><ul><li><code>expires 10s</code>：10s之后过期</li><li><code>expires @22h30m</code>：22h30m这个时间点之后过期</li><li><code>expires -1h</code>：一个小时之前就过期了</li><li><code>expires epoch</code>：关闭缓存</li><li><code>expires off</code>：使用浏览器默认缓存</li></ul><h4 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    # 负载均衡配置快</span><br><span class="line">    upstream load_balance &#123;</span><br><span class="line">        </span><br><span class="line">        # 使用 ip hash 作为负载均衡算法，使用 ip hash 算法之后不能把服务器直接移除，只能标记为 down</span><br><span class="line">        ip_hash;</span><br><span class="line"></span><br><span class="line">        # 使用 url hash 作为负载均衡算法</span><br><span class="line">        hash $request_uri;</span><br><span class="line"></span><br><span class="line">        # 使用 least_conn 作为负载均衡算法，哪台服务器连接数少就去请求哪台服务器</span><br><span class="line">        least_conn;</span><br><span class="line"></span><br><span class="line">        # 配置上游服务器</span><br><span class="line">        server localhost:81;</span><br><span class="line">        server localhost:82;</span><br><span class="line">        server localhost:83;</span><br><span class="line"></span><br><span class="line">        # 常链接数量，用于提高网络吞吐量，相当于连接池</span><br><span class="line">        keepalive   32;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 将一些负载均衡节点中的静态资源文件缓存在nginx服务器当中</span><br><span class="line">    # prody_cache_path 指令设置缓存保存的目录</span><br><span class="line">    # keys_zone 指令设置共享缓存空间的名称和索引信息大小</span><br><span class="line">    # max_size 指令指定缓存大小</span><br><span class="line">    # inactive 指令指定超过这个时间则清理此缓存</span><br><span class="line">    # use_temp_path 指令指定临时目录，使用后会影响 nginx 性能</span><br><span class="line">    proxy_cache_path /usr/local/cache keys_zone=mycache:5m max_size=1g inactive=1h use_temp_path=off;</span><br><span class="line"></span><br><span class="line">    # 虚拟主机配置块</span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80;         # 监听端口</span><br><span class="line">        server_name localhost;  # 请求域名</span><br><span class="line"></span><br><span class="line">        # 开启并且使用缓存</span><br><span class="line">        proxy_cache mycache;</span><br><span class="line"></span><br><span class="line">        # 指定命中缓存返回码</span><br><span class="line">        proxy_cache_valid 200 304 8h;</span><br><span class="line"></span><br><span class="line">        # 请求路由映射，匹配拦截</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://load_balance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>upstream 模块参数：</strong></p><ul><li><p><code>weight</code>：配置每台服务器的权重</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 weight=1;</span><br><span class="line">    server localhost:82 weight=2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>max_conns</code>：配置服务器最大链接数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 max_conns=200;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>注意：</strong>在多 <code>worker</code> 线程的环境下，可能会超过指定的最大连接数。</p></li><li><p><code>slow_start</code>：设置服务器权重从零开始至设置值的时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 slow_start=60s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>注意：</strong><br>  ① 该参数不能在 <code>hash</code> 和 <code>random load balancing</code> 中使用。<br>  ② 如果在 <code>upstream</code> 中只有一台 server，则该参数无效。<br>  ③ 该参数为商业版 nginx 才有的，使用需要付费。 </p></li><li><p><code>down</code>：标识该服务器已经宕机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>backup</code>：标识该服务器为备用机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>注意：</strong>当所有服务器都无法访问才会访问备用机。</p></li><li><p><code>max_fails</code>：最大失败次数，超过这个次数时，默认该服务器已经宕机。与<code>fail_timeout</code>搭配使用。</p></li><li><p><code>fail_timeout</code>：当超过最大失败次数时，经过多少时间去重新访问这台服务器，默认值为10s。与<code>max_fails</code>搭配使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡配置快</span></span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">    server localhost:81 max_fails=50 file_timeout=10s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文记录一些 nginx 中的配置，以便后续查看。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Nginx" scheme="https://www.wrp.cool/categories/Nginx/"/>
    
    
    <category term="Linux" scheme="https://www.wrp.cool/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://www.wrp.cool/tags/Nginx/"/>
    
    <category term="配置" scheme="https://www.wrp.cool/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】全局异常处理器</title>
    <link href="https://www.wrp.cool/posts/19537/"/>
    <id>https://www.wrp.cool/posts/19537/</id>
    <published>2021-08-11T08:13:13.000Z</published>
    <updated>2021-08-17T09:35:03.549Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下最近在开发中遇到的一个问题有以及一个不错的解决方案。</p><p>通常情况下一个请求从前端发起到后端的 Controller 接收这个请求，再去调用对应的 Service 方法去处理对应的逻辑，再由 Controller 将处理的结果封装成一个 JSON 对象返回给前端。这是我们的一个正常的请求处理的过程，但是这其中也有一些例外的地方，如果在 Service 处理的时候出现了一些业务上的逻辑问题流程已经无法再继续往下面去走了，这个时候需要在 Service 直接返回到前端需要怎么做？</p><span id="more"></span><p>其实可以通过约定不同的返回值给到 Controller 去判断需要怎么处理再怎么返回给前端。但是这样会带来两个问题：</p><ol><li>一旦项目中的返回类型多了起来就会造成 Controller 层代码的冗余。</li><li>Service 一旦返回事务就会提交，这样子就没办法灵活的来控制我们的事务了。当然这也可以通过 Service 层代码编写的逻辑来解决，但这么处理就不是那么的优雅了。</li></ol><p>一个优雅的处理方式应该是定义好一个业务异常类 BizException，这个类需要继承 RuntimeException 类，一旦在 Service 中需要返回的时候就抛出 BizException 异常，这样事务就可以回滚，然后再由 Spring Boot 的全局异常处理器来捕获这个异常直接将我们自定义的异常信息返回给前端。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义业务异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BizException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处的异常信息仅仅为了演示而定义的只有一个 errMsg 字段</span></span><br><span class="line">    <span class="comment">// 实际使用中可以根据需要将这个异常信息定义的丰富一些，比如使用一个 Enum 来维护这些异常信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String errMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BizException</span><span class="params">(String errMsg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApiResponse 类为接口全局响应类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BizException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title function_">businessExceptionHandler</span><span class="params">(BizException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.fail(e.getErrMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下最近在开发中遇到的一个问题有以及一个不错的解决方案。&lt;/p&gt;
&lt;p&gt;通常情况下一个请求从前端发起到后端的 Controller 接收这个请求，再去调用对应的 Service 方法去处理对应的逻辑，再由 Controller 将处理的结果封装成一个 JSON 对象返回给前端。这是我们的一个正常的请求处理的过程，但是这其中也有一些例外的地方，如果在 Service 处理的时候出现了一些业务上的逻辑问题流程已经无法再继续往下面去走了，这个时候需要在 Service 直接返回到前端需要怎么做？&lt;/p&gt;</summary>
    
    
    
    <category term="Spring" scheme="https://www.wrp.cool/categories/Spring/"/>
    
    <category term="Spring Boot" scheme="https://www.wrp.cool/categories/Spring/Spring-Boot/"/>
    
    
    <category term="Spring Boot" scheme="https://www.wrp.cool/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://www.wrp.cool/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>通过2-3树来理解红黑树</title>
    <link href="https://www.wrp.cool/posts/18972/"/>
    <id>https://www.wrp.cool/posts/18972/</id>
    <published>2021-07-18T06:15:42.000Z</published>
    <updated>2021-08-04T12:42:02.929Z</updated>
    
    <content type="html"><![CDATA[<p>好了，终于来到了这块最难啃的骨头了——<strong>红黑树</strong>。</p><p>首先，当然是直接摆出红黑树大名鼎鼎的五条基本性质了</p><ol><li><font color=blue>节点是红色或者黑色。</font></li><li><font color=blue>根节点是黑色。</font></li><li><font color=blue>所有叶子节点都是黑色。（叶子节点是空节点）</font></li><li><font color=blue>不存在能够和两条红链接相连的节点。（每个红色的节点的两个子节点都是黑色）</font></li><li><font color=blue>从任意一个节点到叶子节点，经过的黑色节点数量是一样的。（黑平衡）</font></li></ol><p>只要满足以上五个性质的二叉搜索树就可以称之为红黑树。</p><span id="more"></span><blockquote><p>温馨提示：本文比较长，开始之前还请你耐下心来，一步一步仔细看完，我相信这篇文章会带给你一些收获。继续加油！：）</p></blockquote><p>红黑树其实也是一种二叉搜索树，只不过这是一种性能更好的二叉搜索树。二叉搜索树的结构决定了增删改查这些操作对于二叉搜索树而言都是对数级别的时间复杂度，所以这是一种高效的数据结构，但它有一个致命的缺陷，就是有序插入元素的情况下，它会严重的向一边倾斜退化成一个链表，也就是所谓的失衡。所以，我们希望我们的二叉搜索树在任何情况下都能保持左图的样子，或者说是尽量保持成左图的样子，而永远不要退化成右图的样子。于是我们为二叉搜索树加入了平衡机制，其中红黑树就是这么一种机制。<strong>对于二叉搜索树的有序性而言，红黑树在这基础上又添加了平衡性。</strong>以上红黑树的五条基本性质就是维持平衡的手段。</p><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210720231008.png" alt="20210720231008"></p><p>像左图这样的树我们称之为平衡的，而红黑树仅仅只是维持平衡的手段而已，<font color=blue>红黑树在本质上依然是一棵二叉搜索树。</font></p><p>像红黑树这样的数据结构，肯定也不是一朝一夕能够发明出来的，而是有一个演化的过程，从二叉搜索树到红黑树之间就有一个不可缺少的过渡——<strong>2-3查找树</strong>。</p><h1 id="2-3查找树"><a href="#2-3查找树" class="headerlink" title="2-3查找树"></a>2-3查找树</h1><br><p><strong>定义：</strong></p><ul><li>一棵2-3查找树要么是一棵空树，要么由<code>2-节点</code>和<code>3-节点</code>组成。</li><li><code>2-节点</code>：含有一个节点本身的值和两条链接，左连接指向的2-3树值都小于该节点，右链接指向的2-3树值都大于该节点。</li><li><code>3-节点</code>：含有两个节点本身的值和三条链接，左连接指向的2-3树值都小于该节点，中链接指向的2-3树值都位于节点的两个值之间，右链接指向的2-3树值都大于该节点。</li></ul><p><strong>注意：</strong></p><ul><li>2-3查找树是一种完美平衡的树结构，也就是说一棵2-3树中的任意节点的左子树、中子树、右子树高度相等。</li></ul><p><strong>由完美平衡可知：</strong></p><ul><li><code>2-节点</code>要么没有两条链接都指向空，要么两条链接都不为空。</li><li><code>3-节点</code>要么没有三条链接都指向空，要么三条链接都不为空。</li></ul><p><strong>如图：</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627184547.PNG" alt="album_temp_1627184547"></p><blockquote><p><strong>接下来将分析2-3树中的各种插入情况</strong></p></blockquote><h2 id="向2-节点添加元素"><a href="#向2-节点添加元素" class="headerlink" title="向2-节点添加元素"></a>向2-节点添加元素</h2><p>首先，需要在2-3树中搜索到一个可以添加节点的位置，如果搜索结束于一个<code>2-节点</code>，那么很好办，只需要将这个<code>2-节点</code>替换成一个<code>3-节点</code>。像这样：<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/IMG_0045.PNG" alt="IMG_0045"></p><hr><p>其实向一个<code>2-节点</code>插入元素是非常简单的，只需要将一<code>2-节点</code>变换成一个<code>3-节点</code>即可。但是这很简单的一步却是保持2-3树完美平衡<strong>最关键的一步</strong>。</p><p>试想一个问题：一棵完美的平衡二叉树，也就是满二叉树，它的节点个数是奇数还是偶数？答案非常简单，是奇数，根节点的左子树和右子树的节点数是相同的，于是整棵树的节点数就是<code>2 * 左子树的节点数 + 1</code>。采用递归的思想，整棵树无论对于哪个节点求节点个数得出的答案都是奇数。</p><p>于是，如果一棵二叉树的节点个数是偶数，那么这棵二叉树绝对不是完美平衡，想要得到一棵完美平衡的二叉树必备的一个条件就是树的节点个数为奇数。实际上一棵完美平衡的二叉树的节点数是等于<code>2 ^ h - 1</code>的。（其中h为树的高度，根节点的高度为1）</p><p>一棵二叉树在生成的过程当中，依次将元素插入其中，这不可能保证整棵树的节点个数在任何情况下都是奇数。事实上，在节点只能存放一个元素的情况下，不可能实现完美平衡的树结构。2-3树中的<code>3-节点</code>正是为了解决这一情况而存在的。</p><p>正常情况下，向二叉树中的一个左右子树都为空的节点插入元素无论插入在左子树还是右子树中肯定会造成这个节点的不完美平衡，但是现在引入了<code>3-节点</code>这样的一个过渡的节点，说白了，这其实是在暂存一下这种不平衡的情况，一旦在这个<code>3-节点</code>中再次插入一个元素之后立马会分裂成为一棵左右子树都不为空的二叉树。</p><h2 id="向3-节点添加元素"><a href="#向3-节点添加元素" class="headerlink" title="向3-节点添加元素"></a>向3-节点添加元素</h2><p>单纯的向一棵仅有一个三节点的2-3树添加元素是比较简单的，这里简单讲一下思路即可。</p><ol><li>将新节点插入<code>3-节点</code>中，组成一个临时的<code>4-节点</code>。此时这个<code>4-节点</code>中包含三个值和四条链接。</li><li>将这个<code>4-节点</code>的三个值都抽取出来成为三个<code>2-节点</code>，中值抽取出来的<code>2-节点</code>作为根，根的左链接指向三个节点中的最小者，右链接指向三个节点中的最大者。</li></ol><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627305570.PNG" alt="album_temp_1627305570"></p><blockquote><p>也许有些同学也注意到了，这一步操作使得树的高度增加了，在将<code>4-节点</code>分裂为三个<code>2-节点</code>的过程当中，树高由1变成了2。这也是2-3树的生长方式，当根节点已经是一个<code>3-节点</code>的时候插入一个新的节点，此时根节点分裂为三个<code>2-节点</code>，树高度加1。与普通的二叉查找树不同的是2-3树的生长方向是由下至上生长的，而二叉查找树的生长方向是由上至下生长的。</p></blockquote><h3 id="向一个父节点为2-节点的3-节点添加元素"><a href="#向一个父节点为2-节点的3-节点添加元素" class="headerlink" title="向一个父节点为2-节点的3-节点添加元素"></a>向一个父节点为2-节点的3-节点添加元素</h3><ol><li>插入到<code>3-节点</code>中，组成一个临时的<code>4-节点</code>。</li><li>将<code>4-节点</code>的中值所抽取出来的根节点插入至父节点，使父节点从原来的<code>2-节点</code>变成<code>3-节点</code><br> 此处插入过程与“向<code>2-节点</code>添加元素”相同。</li><li>将<code>4-节点</code>分裂出来的两个<code>2-节点</code>移动至父节点中，成为<code>3-节点</code>的两个子树。</li></ol><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627307311.PNG" alt="album_temp_1627307311"></p><h3 id="向一个父节点为3-节点的3-节点添加元素"><a href="#向一个父节点为3-节点的3-节点添加元素" class="headerlink" title="向一个父节点为3-节点的3-节点添加元素"></a>向一个父节点为3-节点的3-节点添加元素</h3><ol><li>插入到<code>3-节点</code>中，组成一个临时的<code>4-节点</code>。</li><li>将<code>4-节点</code>的中值抽取出来的根节点插入至父节点，使父节点从原来的<code>3-节点</code>变成一个临时的<code>4-节点</code>。</li><li>将<code>4-节点</code>分裂出来的两个<code>2-节点</code>移动至父节点也就是新的临时的<code>4-节点</code>中，成为新的临时<code>4-节点</code>的两个子树。</li><li>将新的临时的<code>4-节点</code>分裂出来的根继续往上插入<br> 此处插入的过程与“向一个父节点为<code>2-节点</code>的<code>3-节点</code>添加元素”相同。</li></ol><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627307543.PNG" alt="album_temp_1627307543"></p><h3 id="向“从插入节点出发直到根节点全部都是3-节点”的节点添加元素"><a href="#向“从插入节点出发直到根节点全部都是3-节点”的节点添加元素" class="headerlink" title="向“从插入节点出发直到根节点全部都是3-节点”的节点添加元素"></a>向“从插入节点出发直到根节点全部都是3-节点”的节点添加元素</h3><ol><li>一直按照“向一个父节点为<code>3-节点</code>的<code>3-节点</code>添加元素”的方式插入元素，那么直到最后根节点也会变成一个临时的<code>4-节点</code>。</li><li>将根节点转换成的临时<code>4-节点</code>分裂开来，按照“向<code>3-节点</code>添加元素”的方式，中值成为整颗2-3树新的根，此时树高加一。</li></ol><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627310222.PNG" alt="album_temp_1627310222"></p><hr><p><strong>以上就是2-3树中插入元素的全部情况，做个小结：</strong></p><ol><li>向<code>2-节点</code>插入元素：直接插入至<code>2-节点中</code>生成一个三节点。</li><li>向<code>3-节点</code>插入元素：<ol><li>父节点为<code>2-节点</code>：组成临时<code>4-节点</code>，分裂后的根插入父节点组成<code>3-节点</code>。</li><li>父节点为<code>3-节点</code>：组成临时<code>4-节点</code>，分裂后的根插入父节点，再次组成临时<code>4-节点</code>。<br> 不断重复此过程，直到找到一个<code>2-节点</code>为止。如果直到根节点还找不到，则将根节点分裂成三个<code>2-节点</code>，此时树高加一。</li></ol></li></ol><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p>其实我更愿意这么来理解红黑树：<font color=blue>使用二叉树来表现2-3树</font>。换句话说，其实2-3树和红黑树是等价的。</p><blockquote><p>其实一般的红黑树是等价于2-3-4树的，也就是我们前面说的2-3树中再加了一个<code>4-节点</code>。但是本文讲述的红黑树是左倾红黑树，具体的左倾红黑树与一般红黑树的区别，在这就留个坑吧。在这里只需要记住一点：<strong>左倾红黑树中红链接全部都是左连接</strong>。</p></blockquote><p>一棵2-3树中的<code>2-节点</code>跟二叉查找树中的节点是完全相同的，也就是说普通的节点就可以表示2-3树中的<code>2-节点</code>。于是我们只要能够使用二叉树的形式来表现一个<code>3-节点</code>我们就可以成功的将一棵2-3树转化成为红黑树。</p><p>将<code>3-节点</code>中的两个值分别当作是两个<code>2-节点</code>分裂开，中间使用一条连接将这两个<code>2-节点</code>相连接起来，表示了这两个<code>2-节点</code>代表了一个<code>3-节点</code>。这样的链接被称为红链接。</p><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627903082.PNG" alt="album_temp_1627903082"></p><p>为了方便表示红链接我们注意到每个红色链接都会指向唯一的一个节点，所以我们将节点标记为红色来表示指向此节点的链接是红链接，相反的没有被红链接指向的节点全部就被标记为黑色。</p><p>本文一开始就提出的红黑树的五条基本性质中的第1点、第2点、第3点也就是这么来的，性质4和性质5稍微有一些抽象：</p><ol><li><font color=blue>节点是红色或者黑色</font>：每个节点都会被标记为红色或者黑色。</li><li><font color=blue>根节点是黑色</font>：二叉树中没有链接指向根节点，所以根节点被标记为黑色。</li><li><font color=blue>所有叶子节点都是黑色</font>：叶子节点都是空节点，没有被红链接所指向，所以标记为黑色。</li><li><font color=blue>不存在能够和两条红链接相连的节点</font>：如果将红黑树中由红链接相连的节点合并起来，得到的就是一棵2-3树。相反，如果将一棵2-3树中的<code>3-节点</code>画作由红色左连接相连的两个<code>2-节点</code>，那么肯定不会存在能够和两条红链接相连的节点。</li><li><font color=blue>从任意一个节点到叶子节点，经过的黑色节点数量是一样的。</font>：如果将红链接画平，那么第5点将很容易理解。</li></ol><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1627905396.PNG" alt="album_temp_1627905396"></p><blockquote><p>上图中粗链接表示为红链接</p></blockquote><h2 id="着色和旋转"><a href="#着色和旋转" class="headerlink" title="着色和旋转"></a>着色和旋转</h2><p>保持红黑树五大性质的两大法宝就是着色和旋转，其中旋转又分为左旋转和右旋转。</p><h3 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h3><p>着色操作比较简单，只需要改变对节点颜色的标记即可。</p><h3 id="左旋转和右旋转"><a href="#左旋转和右旋转" class="headerlink" title="左旋转和右旋转"></a>左旋转和右旋转</h3><p>下图中粗链接表示为红链接<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210803095327.png" alt="20210803095327"></p><p>具体的旋转过程在<a href="https://www.wrp.cool/posts/54793/">AVL 树</a>这篇文章中已经有具体的说明。这里不再过多的赘述。</p><blockquote><p>需要注意的是：旋转过后应该保持根节点颜色相同，以及这里的旋转过程是在插入节点时调用的，在2-3树中插入操作总是和树中的节点相互融合的，所以要将旋转后的节点标记为红色。</p></blockquote><!-- TODO 聊清楚左右旋转的着色原理 --><hr><p>在正式开始插入操作之前，有一点需要先注意：新插入的节点默认是红色的节点，因为在插入的时候除非是插入在根节点的位置之外，所有的插入首先都是与原有的节点做融合操作，而融合进其他节点的节点在红黑树中被标记为红色。</p><h2 id="向红黑树中的“2-节点”插入元素"><a href="#向红黑树中的“2-节点”插入元素" class="headerlink" title="向红黑树中的“2-节点”插入元素"></a>向红黑树中的“2-节点”插入元素</h2><p>向一个<code>2-节点</code>中插入元素之后，会与原来的<code>2-节点</code>一起形成一个<code>3-节点</code>。这就引申出了两种情况：</p><ol><li>插入节点小于<code>2-节点</code>，插入在<code>2-节点</code>的左边，成为<code>2-节点</code>的左孩子。<br> 符合左倾红黑树的定义，即红链接在左边，此时无需修改。</li><li>插入节点大于<code>2-节点</code>，插入在<code>2-节点</code>的右边，成为<code>2-节点</code>的右孩子。<br> 不符合左倾红黑树的定义，即红链接在右边，此时需要对被插入节点做一次左旋转的操作，以将右红链接纠正为左红链接。</li></ol><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1628078520.PNG" alt="album_temp_1628078520"></p><h2 id="向红黑树中的“3-节点”插入元素"><a href="#向红黑树中的“3-节点”插入元素" class="headerlink" title="向红黑树中的“3-节点”插入元素"></a>向红黑树中的“3-节点”插入元素</h2><p>向一个<code>3-节点</code>中插入元素之后，与原来的<code>3-节点</code>之间会产生三种情况：</p><ol><li>插入的元素小于<code>3-节点</code>的两个元素。</li><li>插入的元素位于<code>3-节点</code>的两个元素之间。</li><li>插入的元素大于<code>3-节点</code>的两个元素。</li></ol><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/album_temp_1628079653.PNG" alt="album_temp_1628079653"></p><blockquote><p>注意：以上的三种情况中最后的一个步骤都是需要将根节点也就是b节点转换成黑色的，这样才能保持红黑树的第五条性质，黑平衡。</p></blockquote><h2 id="插入代码实现"><a href="#插入代码实现" class="headerlink" title="插入代码实现"></a>插入代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RBTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> e;</span><br><span class="line">        Node left, right;</span><br><span class="line">        <span class="type">boolean</span> color;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.e = e;</span><br><span class="line">            <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.color = RED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左旋转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">leftRotate</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="comment">// 暂存</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> node.right;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 旋转</span></span><br><span class="line">        node.right = x.left;</span><br><span class="line">        x.left = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 着色</span></span><br><span class="line">        x.color = node.color;</span><br><span class="line">        node.color = RED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右旋转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">rightRotate</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="comment">// 暂存</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> node.left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 旋转</span></span><br><span class="line">        node.left = x.right;</span><br><span class="line">        x.right = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 着色</span></span><br><span class="line">        x.color = node.color;</span><br><span class="line">        node.color = RED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isRed</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">node</span> <span class="operator">=</span>= <span class="literal">null</span> ? BLACK : node.color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">flipColors</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.color = RED;</span><br><span class="line">        node.left.color = BLACK;</span><br><span class="line">        node.right.color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">        add(root, e);</span><br><span class="line">        root.color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">add</span><span class="params">(Node node, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.e &gt; e) &#123;</span><br><span class="line">            node.left = add(node.left, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.e &lt; e) &#123;</span><br><span class="line">            node.right = add(node.right, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isRed(node.right) &amp;&amp; !isRed(node.left))</span><br><span class="line">            node = leftRotate(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isRed(node.left) &amp;&amp; isRed(node.left.left))</span><br><span class="line">            node = rightRotate(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isRed(node.left) &amp;&amp; isRed(node.right))</span><br><span class="line">            flipColors(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本文中的参考图片出自《算法：第4版》这本书中的红黑树章节。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;好了，终于来到了这块最难啃的骨头了——&lt;strong&gt;红黑树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首先，当然是直接摆出红黑树大名鼎鼎的五条基本性质了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=blue&gt;节点是红色或者黑色。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=blue&gt;根节点是黑色。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=blue&gt;所有叶子节点都是黑色。（叶子节点是空节点）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=blue&gt;不存在能够和两条红链接相连的节点。（每个红色的节点的两个子节点都是黑色）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=blue&gt;从任意一个节点到叶子节点，经过的黑色节点数量是一样的。（黑平衡）&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只要满足以上五个性质的二叉搜索树就可以称之为红黑树。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.wrp.cool/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="平衡二叉树" scheme="https://www.wrp.cool/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="2-3树" scheme="https://www.wrp.cool/tags/2-3%E6%A0%91/"/>
    
    <category term="红黑树" scheme="https://www.wrp.cool/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>AVL 树</title>
    <link href="https://www.wrp.cool/posts/54793/"/>
    <id>https://www.wrp.cool/posts/54793/</id>
    <published>2021-07-04T02:50:29.000Z</published>
    <updated>2021-07-18T06:16:53.241Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章所讲述的【<a href="https://www.wrp.cool/posts/46128/">二叉搜索树</a>】其实有一个非常严重的漏洞：如果插入的元素都是有序的怎么办？</p><blockquote><p>如果按照有序的方式或者近乎有序的方式将元素插入到二叉搜索树当中去，那么此时的二叉搜索树将退化成一个链表的数据结构。于是引入平衡这种机制来防止这种情况的发生，引入平衡的二叉树被成为平衡二叉树。</p></blockquote><p><strong>平衡：</strong><font color=blue>一棵树中对于任意节点都有左子树的高度减去右子树的高度的绝对值小于等于1，则称这棵二叉树是平衡的。</font></p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先还是先看看百度百科中对于AVL树的定义（<a href="https://baike.baidu.com/item/AVL%E6%A0%91">AVL树-百度百科</a>）。</p><p><strong>AVL树的特点：</strong></p><ul><li>本身首先是一棵二叉搜索树</li><li>带有平衡性：每个节点的左右子树的高度之差的绝对值（<strong>平衡因子</strong>）最多为1。<br>也就是说，AVL树，本质上是带了平衡功能的二叉搜索树。</li></ul><p><strong>平衡因子：</strong>左子树的高度减去右子树的高度。（注意：平衡因子的值可能为负，不过这是正常的，平衡因子的正负性能够帮助我们区分二叉树是向左倾斜的还是向右倾斜的）</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><blockquote><p>本质上AVL树还是一种二叉搜索树，但是引入了“平衡因子”的概念来维护树的平衡，所以在树的节点类中要新增加一个<code>height</code>变量来维护树的高度。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> e, height;</span><br><span class="line">    <span class="keyword">public</span> Node left, right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> e, Node left, Node right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = <span class="number">1</span>; <span class="comment">// 新节点默认高度为 1</span></span><br><span class="line">        <span class="built_in">this</span>.e = e;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设计两个辅助函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取节点高度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">node</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="number">0</span> : node.height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取平衡因子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBalanceFactor</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">node</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="number">0</span> : getHeight(node.left) - getHeight(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="树的平衡与失衡"><a href="#树的平衡与失衡" class="headerlink" title="树的平衡与失衡"></a>树的平衡与失衡</h1><p>一个节点的平衡因子是有这个节点左子树的高度减去右子树的高度得到的。如果平衡因子的绝对值小于等于一，则这个节点是平衡的，反之则称之为失衡。</p><p><font color=blue>那么什么情况会导致树的失衡呢？</font><br>当左右子树的高度本来就相差1的情况下，其中较高的子树再次加1的情况下，此时就会产生失衡。</p><p><font color=blue>那么失衡总共有多少种情况呢？</font><br>四种，分别是LL型、RR型、LR型、RL型，L和R分别是Left和Right的缩写。<br>其中第一个字母代表的是较高的子树是左子树还是右子树，第二个字母代表的是新增的节点是增加在较高子树的左子树还是右子树。<br>除了这四种失衡的情况，其余的情况就都是平衡的了。</p><p>下面为这四种情况分别举个例子：<br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/20210714225927.png" alt="20210714225927"></p><blockquote><p>以上的四种情况失衡的节点都是根节点。</p></blockquote><h1 id="左旋转与右旋转-平衡-LL和RR"><a href="#左旋转与右旋转-平衡-LL和RR" class="headerlink" title="左旋转与右旋转 平衡 LL和RR"></a>左旋转与右旋转 平衡 LL和RR</h1><p>左旋转与右旋转就是对不平衡节点的平衡操作，就拿上面比较简单的LL和RR的例子来演示左旋转与右旋转。</p><p><strong>具体的旋转过程用这两张图来表示：</strong><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-AVL-3.jpg" alt="数据结构-AVL-3"><br><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-AVL-2.jpg" alt="数据结构-AVL-2"></p><blockquote><p>这里的<code>D、E、F、G</code>分别是挂在在<code>A、B、C</code>节点下的二叉树，这里假设<code>D、E、F、G</code>高度相同。为了方便理解，你可以直接把<code>D、E、F、G</code>就当成是单个节点。</p></blockquote><p><font color=blue>这里最重要的一点是旋转前后整个树依然保持着二叉搜索树的性质，也就是图中的结论在旋转前和旋转后都是成立的。</font></p><p><font size=5><strong>编码实现：</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 左旋转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">leftRotate</span><span class="params">(Node a)</span> &#123;</span><br><span class="line">    <span class="comment">// 暂存</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">b</span> <span class="operator">=</span> a.right;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">e</span> <span class="operator">=</span> b.left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转</span></span><br><span class="line">    b.left = a;</span><br><span class="line">    a.right = e;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新Height</span></span><br><span class="line">    a.height = Math.max(getHeight(a.left), getHeight(a.right)) + <span class="number">1</span>;</span><br><span class="line">    b.height = Math.max(getHeight(b.left), getHeight(b.right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 右旋转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">rightRotate</span><span class="params">(Node a)</span> &#123;</span><br><span class="line">    <span class="comment">// 暂存</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">b</span> <span class="operator">=</span> a.left;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">f</span> <span class="operator">=</span> b.right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转</span></span><br><span class="line">    b.right = a;</span><br><span class="line">    a.left = f;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新Height</span></span><br><span class="line">    a.height = Math.max(getHeight(a.left), getHeight(a.right)) + <span class="number">1</span>;</span><br><span class="line">    b.height = Math.max(getHeight(b.left), getHeight(b.right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="左旋转与右旋转-平衡-LR和RL"><a href="#左旋转与右旋转-平衡-LR和RL" class="headerlink" title="左旋转与右旋转 平衡 LR和RL"></a>左旋转与右旋转 平衡 LR和RL</h1><p><img src="https://wrp-blog-image.oss-cn-beijing.aliyuncs.com/blog-images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-AVL-4.jpg" alt="数据结构-AVL-4"></p><p>大概的处理过程就是这个样子，先旋转其中一个节点，将LR和RL变成LL或者是RR的形式，最后再旋转一次即可完成对LR和RL的平衡。</p><h1 id="在二叉搜索树中引入AVL"><a href="#在二叉搜索树中引入AVL" class="headerlink" title="在二叉搜索树中引入AVL"></a>在二叉搜索树中引入AVL</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保持平衡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">keepBalance</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平衡维护</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> getBalanceFactor(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LL</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt;= <span class="number">2</span> &amp;&amp; getBalanceFactor(root.left) &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> rightRotate(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RR</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt;= -<span class="number">2</span> &amp;&amp; getBalanceFactor(root.right) &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> leftRotate(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LR</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt;= <span class="number">2</span> &amp;&amp; getBalanceFactor(root.left) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        root.left = leftRotate(root.left);</span><br><span class="line">        <span class="keyword">return</span> rightRotate(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RL</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt;= -<span class="number">2</span> &amp;&amp; getBalanceFactor(root.right) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        root.right = rightRotate(root.right);</span><br><span class="line">        <span class="keyword">return</span> leftRotate(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">    root = add(root, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">add</span><span class="params">(Node root, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e &lt; root.e) root.left = add(root.left, e);</span><br><span class="line">    <span class="keyword">if</span> (e &gt; root.e) root.right = add(root.right, e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新Height</span></span><br><span class="line">    root.height = Math.max(getHeight(root.left), getHeight(root.right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平衡维护</span></span><br><span class="line">    <span class="keyword">return</span> keepBalance(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">    delNode(root, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">delNode</span><span class="params">(Node root, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e &gt; root.e) &#123;</span><br><span class="line">        root.right = delNode(root.right, e);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e &lt; root.e) &#123;</span><br><span class="line">        root.left = delNode(root.left, e);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size --;</span><br><span class="line">    Node retNode;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span>) retNode =  root.right;</span><br><span class="line">    <span class="keyword">if</span> (root.right == <span class="literal">null</span>) retNode = root.left;</span><br><span class="line">    retNode = delMax(root.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新Height</span></span><br><span class="line">    root.height = Math.max(getHeight(root.left), getHeight(root.right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平衡维护</span></span><br><span class="line">    <span class="keyword">return</span> keepBalance(retNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇文章所讲述的【&lt;a href=&quot;https://www.wrp.cool/posts/46128/&quot;&gt;二叉搜索树&lt;/a&gt;】其实有一个非常严重的漏洞：如果插入的元素都是有序的怎么办？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果按照有序的方式或者近乎有序的方式将元素插入到二叉搜索树当中去，那么此时的二叉搜索树将退化成一个链表的数据结构。于是引入平衡这种机制来防止这种情况的发生，引入平衡的二叉树被成为平衡二叉树。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;平衡：&lt;/strong&gt;&lt;font color=blue&gt;一棵树中对于任意节点都有左子树的高度减去右子树的高度的绝对值小于等于1，则称这棵二叉树是平衡的。&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.wrp.cool/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://www.wrp.cool/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="二叉树" scheme="https://www.wrp.cool/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="平衡二叉树" scheme="https://www.wrp.cool/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="递归" scheme="https://www.wrp.cool/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="https://www.wrp.cool/posts/46128/"/>
    <id>https://www.wrp.cool/posts/46128/</id>
    <published>2021-06-29T13:12:03.000Z</published>
    <updated>2021-07-05T14:55:47.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： <font color=blue>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。</font>二叉搜索树作为一种经典的数据结构，它既有链表的快速插入与删除操作的特点，又有数组快速查找的优势；所以应用十分广泛，例如在文件系统和数据库系统一般会采用这种数据结构进行高效率的排序与检索操作。</p><p>以上资料来自：<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">二叉搜索树-百度百科</a></p></blockquote><span id="more"></span><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BST</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> e;</span><br><span class="line">        <span class="keyword">public</span> Node left, right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> e, Node left, Node right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.e = e;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BST</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">    add(root, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">add</span><span class="params">(Node root, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        size ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (e &lt; root.e) &#123;</span><br><span class="line">        root.left = add(root.left, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e &gt; root.e) &#123;</span><br><span class="line">        root.right = add(root.right, e);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> find(root, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(Node root, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e &lt; root.e) </span><br><span class="line">        <span class="keyword">return</span> find(root.left, e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e &gt; root.e)</span><br><span class="line">        <span class="keyword">return</span> find(root.right, e);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除最大元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">delMax</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        root.right = delMax(root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        size --;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除任意元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> delNode(root, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">delNode</span><span class="params">(Node root, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e &gt; root.e) &#123;</span><br><span class="line">        root.right = delNode(root.right, e);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e &lt; root.e) &#123;</span><br><span class="line">        root.left = delNode(root.left, e);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size --;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line">    <span class="keyword">if</span> (root.right == <span class="literal">null</span>) <span class="keyword">return</span> root.left;</span><br><span class="line">    <span class="keyword">return</span> delMax(root.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序遍历（递归版本）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    System.out.println(root);</span><br><span class="line">    preOrder(root.left);</span><br><span class="line">    preOrder(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序遍历（循环版本）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用栈来模拟递归</span></span><br><span class="line">    IStack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        System.out.print(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>)</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>)</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序遍历（递归版本）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    inOrder(root.left);</span><br><span class="line">    System.out.println(root);</span><br><span class="line">    inOrder(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序遍历（循环版本）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用栈来模拟递归</span></span><br><span class="line">    IStack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        System.out.print(node);</span><br><span class="line"></span><br><span class="line">        root = node.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序遍历（递归版本）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    postOrder(root.left);</span><br><span class="line">    postOrder(root.right);</span><br><span class="line">    System.out.println(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用栈来模拟递归</span></span><br><span class="line">    IStack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span> &amp;&amp; root.right != prev) &#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(root);</span><br><span class="line">            prev = root;</span><br><span class="line">            root = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="层序遍历二叉树"><a href="#层序遍历二叉树" class="headerlink" title="层序遍历二叉树"></a>层序遍历二叉树</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">levelOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    IQueue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    queue.enque(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> queue.deque();</span><br><span class="line">        System.out.println(node);</span><br><span class="line"></span><br><span class="line">        queue.enque(node.left);</span><br><span class="line">        queue.enque(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于二叉搜索树是一种比较简单的数据结构，所以本文更多的是一些代码的记录，并不对其中的逻辑做深入的阐述。<br>如果你发现了什么错误或者是有什么疑问都欢迎在评论区指出。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： &lt;font color=blue&gt;若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。&lt;/font&gt;二叉搜索树作为一种经典的数据结构，它既有链表的快速插入与删除操作的特点，又有数组快速查找的优势；所以应用十分广泛，例如在文件系统和数据库系统一般会采用这种数据结构进行高效率的排序与检索操作。&lt;/p&gt;
&lt;p&gt;以上资料来自：&lt;a href=&quot;https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91&quot;&gt;二叉搜索树-百度百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.wrp.cool/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://www.wrp.cool/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="二叉树" scheme="https://www.wrp.cool/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="递归" scheme="https://www.wrp.cool/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="遍历" scheme="https://www.wrp.cool/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://www.wrp.cool/posts/11306/"/>
    <id>https://www.wrp.cool/posts/11306/</id>
    <published>2021-06-16T14:32:13.000Z</published>
    <updated>2021-06-29T13:08:40.045Z</updated>
    
    <content type="html"><![CDATA[<p>本来像是这样的排序算法在网上搜个快速排序能找到很多的博客在详细的说明快速排序的实现、特点、性能、时间复杂度等等，但还是决定要自己写一篇博客来讲讲这个算法，实际上是想要分享一些在学习这个算法的过程中一些让我感到惊讶的地方。</p><p>也正是因为这样的一些比较独特的，比较不可思议却又是合乎情理的存在才让算法变得更神秘，更吸引人了。</p><span id="more"></span><hr><p>先简单的讲一下快速排序的核心思想：</p><blockquote><p>每次在数组中随机的找到一个元素，以这个元素为基准将整个数组分成大于基准元素的部分和小于基准元素的部分，之后再按照小于基准元素、基准元素、大于基准元素这样的顺序排好，之后再递归的对小于基准元素部分和大于基准元素部分分别进行相同的操作。有一些书中也会将这个基准元素称为标兵。</p></blockquote><p>根据这样的一个思想我们可以很快速的设计出第一版的快速排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[l]))</span><br><span class="line">            swap(arr, i, ++j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, l, j);</span><br><span class="line"></span><br><span class="line">    sort(arr, l, j - <span class="number">1</span>);</span><br><span class="line">    sort(arr, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处swap函数用于交换数组中两个下标处的值。</span></span><br></pre></td></tr></table></figure><p>有些书上的快速排序实现的过程可能跟上面代码并不一致，这里也想说一点关于自己的想法，对于算法的实现我们更应该关注的是这个算法的思想，以及我们所实现的算法的时间复杂度分析上，而不是去纠结具体实现的方式。</p><p>上面的代码看着好起来并不复杂，但是想要彻底的理解的话其实并不容易，关键是要能够理解<code>j</code>代表什么，也就是<code>j</code>的语义。</p><p><font color=blue>此处的<code>j</code>代表了小于标兵元素部分的最右边的元素。</font></p><blockquote><p>上面的代码对于初学者可能并不是特别友好，如果你有任何的疑问欢迎在评论区提问。</p></blockquote><hr><p><strong>有意思的地方现在开始了：</strong></p><p>如果你觉得上面的代码没问题的话，在这里强烈建议你设计一个数据规模是百万这个级别并且已经排好序的数组来跑一下上面的这个快速排序算法，你会发现这一点也不快速。</p><p>由于我们每次所选择的标兵元素都是数组中的第一个元素，所以如果是一个已经排好序的数组，这个快速排序算法会直接退化成一个<code>O(n^2)</code>级别的算法。</p><p>改进的方式是使用随机标兵，于是上面的代码迎来了第一次改进。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机标兵（针对有序数组的优化）</span></span><br><span class="line">    swap(arr, l, l + random.nextInt(r - l + <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[l]))</span><br><span class="line">            swap(arr, i, ++j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, l, j);</span><br><span class="line"></span><br><span class="line">    sort(arr, l, j - <span class="number">1</span>);</span><br><span class="line">    sort(arr, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的逻辑还是没有改变，还是选取数组中的第一个元素为标兵元素，但是在每次选取之前将数组中的第一个元素和数组中的随机任何一个元素交换一下位置，以达到随机标兵的效果。</p><hr><p>但就算是这样这个算法依旧不完美，设想一下：<strong>如果是一个所有元素都相同的数组呢？</strong><br>比如一个容量为一百万的数组里面存放的元素全部都是0。</p><p>如果是这样的情况，那么随机标兵也就没有作用了，快速排序也就再次退化成了一个<code>O(n^2)</code>级别的算法。</p><p>于是第二次改进：<strong>双路快速排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机标兵（针对完全有序数组所进行的优化）</span></span><br><span class="line">    swap(arr, l, l + random.nextInt(r - l + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l + <span class="number">1</span>, j = r;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[i] &lt; arr[l]) i++;</span><br><span class="line">        <span class="keyword">while</span> (arr[j] &gt; arr[l]) j--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">        swap(arr, i++, j--);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, l, j);</span><br><span class="line"></span><br><span class="line">    sort(arr, l, j - <span class="number">1</span>);</span><br><span class="line">    sort(arr, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>双路快速排序算法已经是一个可以满足所有场景的快速排序算法了。</p><p>但是这还不够完美，还是刚刚的例子，如果数组中全部元素都相同的话，虽然可以满足O(nlogn)这个级别的速度实现排序，但是如果全部元素都相同的话快速排序还可以做到O(n)级别的时间复杂度。</p><p>于是最终版本：<strong>三路快速排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机标兵（针对完全有序数组所进行的优化）</span></span><br><span class="line">    SortingHelper.swap(arr, l, l + random.nextInt(r - l + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">lt</span> <span class="operator">=</span> l, i = l + <span class="number">1</span>, gt = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; gt) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[i].compareTo(arr[l]) &lt; <span class="number">0</span>) </span><br><span class="line">            SortingHelper.swap(arr, ++lt, i++);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[i].compareTo(arr[l]) &gt; <span class="number">0</span>) </span><br><span class="line">            SortingHelper.swap(arr, i, --gt);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">    SortingHelper.swap(arr, l, lt);</span><br><span class="line"></span><br><span class="line">    sort(arr, l, lt - <span class="number">1</span>);</span><br><span class="line">    sort(arr, gt, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来像是这样的排序算法在网上搜个快速排序能找到很多的博客在详细的说明快速排序的实现、特点、性能、时间复杂度等等，但还是决定要自己写一篇博客来讲讲这个算法，实际上是想要分享一些在学习这个算法的过程中一些让我感到惊讶的地方。&lt;/p&gt;
&lt;p&gt;也正是因为这样的一些比较独特的，比较不可思议却又是合乎情理的存在才让算法变得更神秘，更吸引人了。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://www.wrp.cool/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="https://www.wrp.cool/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="https://www.wrp.cool/posts/38362/"/>
    <id>https://www.wrp.cool/posts/38362/</id>
    <published>2021-05-30T06:39:51.000Z</published>
    <updated>2021-07-09T12:46:50.284Z</updated>
    
    <content type="html"><![CDATA[<p>大家应该都听过这么一个故事：</p><blockquote><p>从前有座山，山上有座庙，庙里有个老和尚和一个小和尚，老和尚在给小和尚讲一个故事，故事是什么呢？故事就是：从前有座山，山上有座庙，庙里有个老和尚和一个小和尚，老和尚在给小和尚讲一个故事，故事是什么呢？故事就是：从前有座山，山上有座庙，庙里有个老和尚和一个小和尚，老和尚在给小和尚讲一个故事，故事是什么呢？故事就是：…..</p></blockquote><p>也都应该经历过这么一个场景：</p><blockquote><p>有一些理发店里面呢，会有两个镜子相对的情况，镜子A里面可以看到镜子B，镜子B里面又可以看到镜子A，镜子A跟镜子B之间互相反射的循环反反复复的无穷无尽。</p></blockquote><p>我认为这可以算是现实世界中的递归现象。当然了，现实世界中类似于这样的现象并不少见。我觉得发明了递归算法的人一定也是在这其中的某一个场景或者是某一个故事下获得的灵感。</p><p><font color=blue>毕竟，计算机科学就是一种对于现实世界的抽象。</font></p><span id="more"></span><hr><p>学习计算机的同学所接触到的第一个递归算法应该都是递归求阶乘或者是数组求和这样的算法。虽然求阶乘或者是求和这只是很简单的递归代码，但是递归算法该有的，它也一样都没有落下。其实这样的功能只需要一层简单的循环就可以搞定，递归算法在这里反而是降低了代码的可读性，并没有为我们带来实际上的好处。<br><font color=#aaa>这里并不是不鼓励同学们使用递归来编写逻辑代码，而是希望不要过度设计自己的代码，还是那句话，刚刚好的才是最美：）</font></p><p><font size=5 ><strong>递归</strong></font> <a href="https://baike.baidu.com/item/%E9%80%92%E5%BD%92">百度百科</a></p><blockquote><p>程序调用自身的编程技巧称为递归（ recursion）。递归做为一种算法在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。<strong>一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。</strong></p></blockquote><p>结合一下递归求阶乘的代码理解一下上面百度百科的这段话，特别是最后一句话。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归求阶乘</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单的递归代码，但是麻雀虽小，却也五脏俱全。在这个例子中，<strong>边界条件、递归前进段和递归返回段</strong>都是很明确的。</p><ul><li><strong>边界条件：</strong>n &#x3D;&#x3D; 1</li><li><strong>递归前进段：</strong>每次调用 <code>factorial(n - 1)</code> 时递归算法就前进一个函数单位</li><li><strong>递归返回段：</strong>当<code>n-1</code>减到<code>n==1</code>的时候，也就是if条件成立返回1的时候，<code>factorial(n - 1)</code>开始返回，每次返回，递归就结束一次<code>factorial(n - 1)</code>函数的调用，也就是返回一个函数单位。</li></ul><blockquote><p>简单一些来理解的话：递归无非就是一个满足了<strong>直接或者是间接的调用自身、以及在某个时候会结束对自身调用</strong>这两个条件的函数，仅此而已。</p></blockquote><p> 如果要我一句话来描述递归算法的话，我会说：<font color=blue>比起循环，这是一种更能够提高代码可读性的循环。</font></p><p> 我认为递归所能完成的逻辑，换成循环来做这样的事情甚至效率上还要更高一些，因为循环并不需要额外的方法调用的成本。但是在某些复杂的场景下，使用递归会让我们的代码变得非常简洁易于理解，比如：二叉树的前、中、后序的遍历；求一个二叉树的节点个数等等。</p><p> 但是递归也有一个非常明显的缺点，那就是几乎所有的编程语言的函数调用栈都有一个明确的大小，这就导致了递归函数的调用层数不能超出这个大小，否则会产生一个栈内存的溢出，在Java中这是一个叫做<code>StackOverflowError</code>的异常。</p><hr><p><font size=5 ><strong>递归函数的宏观语义</strong></font></p><p>递归的本质实际上就是将一个问题不断的拆解成一个一个的小的问题，直到最后的一个问题小到不能再小了，这个时候我们可以很容易的解决这个问题，将这个问题的解决结果返回给上一个问题，解决掉上一个问题之后再解决上上个问题以此类推，最终解决我们的问题。<strong>拆解问题的过程也就是递归前进段，解决掉最基本问题开始返回的阶段也就是递归返回段。</strong></p><p>更多的时候我喜欢把递归函数理解成一个单元，也就是递归单元。因为递归函数调用自身后还是走一遍自身的逻辑，每次递归调用在逻辑上并没有产生任何的变化，相应的我们只是改变了每次调用的参数而已。<strong>将递归函数拆解成的一个一个的小问题的这个步骤，就体现在每次调用递归函数的参数列表都要比上一次的参数列表要更简单一点点。</strong></p><p>很多时候编写递归逻辑的时候都是因为递归调用自身的这个动作会令我们感到很迷惑，没有办法理解到这一步操作是怎么执行的。我第一次接触二叉树前序遍历的代码的时候就是倒在了这一步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树前序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prevOrder</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    System.out.print(node);</span><br><span class="line">    prevOrder(node.left);</span><br><span class="line">    prevOrder(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我刚刚开始看这代码的时候我完全无法理解为什么上面这段代码为什么会以中、左、右的方式输出一个二叉树，甚至我完全不能够明白这段代码的逻辑。原因是我自己的思维跟着递归函数一起被递归进去了，一直试图去理解每次递归进去之后发生了什么事情，而递归函数的逻辑一直没变。就像是开头的哪个老和尚讲故事一样，我完全没办法跳出递归逻辑。</p><p><font color=blue>但是，如果能从宏观的角度来看这段代码，就舒服多了。</font></p><ul><li><strong>首先，明白我们写的递归函数是要完成一个什么样的功能。</strong></li><li><strong>然后，不要去研究递归进去的逻辑是什么样的，仅仅只看第一层逻辑。</strong></li><li>因为递归进去的逻辑跟第一层的逻辑是完全一样的。</li></ul><p>如果要把 <code>prevOrder</code> 这个递归函数所做的事情理解成一个递归单元的话，我们只需要整理出这个函数所要实现的功能就可以理解这个递归函数的逻辑。</p><p><font size=4><strong>Q&amp;A Time</strong></font></p><ul><li><strong>Q：prevOrder这个函数的功能是什么？</strong></li><li>A：按照中、左、右的顺序输出一棵二叉树。</li><li><strong>Q：第7行的逻辑是什么？</strong></li><li>A：输出当前节点。</li><li><strong>Q：第8行的逻辑是什么？</strong></li><li>A：按照中、左、右的顺序输出当前节点的左子树。</li><li><strong>Q：第9行的逻辑是什么？</strong></li><li>A：按照中、左、右的顺序输出当前节点的右子树。</li></ul><blockquote><p>看到这里如果还不能够明白这个递归逻辑的话，我建议在纸上画一棵高度为3，7个节点的满二叉树然后按照上面 Q&amp;A 再结合代码依次访问一下这棵二叉树上的各个节点，你也许能更加直观的感受什么是递归的宏观语义。</p></blockquote><p>我所理解的递归函数的宏观语义是：</font></p><ul><li><p>将一个大的问题一点一点的拆分成许多个小的问题，或者说是抽象成多个小问题，<strong>每一个问题就是一个递归单元，每一个递归单元在逻辑上都是相同的，唯一不同的只是参数列表。</strong></p></li><li><p>在这个例子中，前序遍历当前节点、前序遍历当前节点的左子树、前序遍历当前节点的右子树，这是<strong>完完全全相同的逻辑。</strong></p></li><li><p>当我们能够按照这种思维来解读递归代码的话，我们可以完全不关心递归调用里面的逻辑是怎样的，递归调用也就可以理解成为一种普通的函数调用。</p></li></ul><hr><p><font size=5 ><strong>如何编写一个递归程序？</strong></font></p><p>借助力扣第206号问题（<a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a>）来讲述如何梳理出递归函数的宏观语义以及怎么编写递归函数。</p><blockquote><p>给你<strong>单链表</strong>的头节点 <code>head</code> 请你反转链表，并返回反转后的链表<br><strong>示例一：</strong><br>输入：head &#x3D; (1) -&gt; (2) -&gt; (3) -&gt; (4) -&gt; (5) -&gt; NULL<br>输出：head &#x3D; (5) -&gt; (4) -&gt; (3) -&gt; (2) -&gt; (1) -&gt; NULL<br><strong>示例二：</strong><br>输入：head &#x3D; (1) -&gt; (2) -&gt; NULL<br>输出：head &#x3D; (2) -&gt; (1) -&gt; NULL<br><strong>示例三：</strong><br>输入：head &#x3D; (1) -&gt; NULL<br>输出：head &#x3D; (1) -&gt; NULL<br><strong>示例四：</strong><br>输入：head &#x3D; NULL<br>输出：head &#x3D; NULL</p></blockquote><p>如果一个问题已经明确了要使用递归来求解的话，我们第一步要做的就是找出这个拆解后最基本的那个问题，对于反转链表的这个问题来说，显而易见最基本的问题就是当链表为空或者是链表只有一个节点的情况。一个空链表反转过后还是一个空链表，一个只有一个节点的链表反转过后还是只有一个节点。找出最基本的问题只是递归函数中最基础的部分，如果连最基本的问题都找不出来的话，那么几乎可以断定这个问题无法使用递归求解。</p><p>完成了最基本的部分接下来才是一个如何编写一个递归函数的重头戏，<font color=blue>将递归函数单元化，也就是找出这个递归函数的宏观语义，清楚这个递归函数要表达什么。</font>将递归函数看作是一个单元之后其实就不需要再考虑我们要求解的这个问题具体是什么了，解决问题的重点就放在了怎么解决一个一个拆解出来的小问题了。</p><ul><li>这里我再啰嗦一下解释一下示例一这个例子：</li><li>反转前：<code>head</code> 的值为1，指向了值为2的节点，值为2的节点指向了值为3的节点…最终指向NULL</li><li>反转后：<code>head</code> 的值为5，指向了值为4的节点，值为4的节点指向了值为3的节点…最终指向NULL</li></ul><p>假如我们现在处于 <code>(3)</code> 这个节点，结合递归函数的宏观语义来看一下此时链表的状态。前面的 <code>(1)</code> 和 <code>(2)</code> 节点是没有变化的，因为我们现在处于 <code>(3)</code> 这个节点，还没有反转到 <code>(1)</code> 和 <code>(2)</code> 。<font color=blue>但是对于已经反转过的 <code>(4)</code> 和 <code>(5)</code> 来说，应该是 <code>NULL &lt;- (4) &lt;- (5)</code> 这个样子的。</font>而此时的 <code>(3)</code> 这个节点仍然是指向了 <code>(4)</code> 这个节点的。</p><p>好了，分析到此为止，答案已经是显而易见的了。当我们处于 <code>(3)</code> 这个节点的时候，我们只需要将 <code>(3)</code> 这个节点当作是已经反转完成的链表的下一个待反转节点再将 <code>(3)</code> 这个节点反转过来就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)  <span class="comment">// 最基本的问题</span></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rev</span> <span class="operator">=</span> reverseList(head.next);  <span class="comment">// 得到已经反转完成的链表</span></span><br><span class="line">        head.next.next = head;                  <span class="comment">// 将当前节点挂接在已经反转完成的链表的下一个节点，注意：head.next此时指向的是已经反转完成的链表的尾节点。</span></span><br><span class="line">        head.next = <span class="literal">null</span>;                       <span class="comment">// 执行到这一步的时候，head已经挂载到反转完成链表的尾节点的位置了，但是链表尾节点必须指向null，所以令 head.next = null</span></span><br><span class="line">        <span class="keyword">return</span> rev;                             <span class="comment">// 返回已经反转完成的链表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的这段代码也就是力扣上第206号问题的答案，有兴趣的同学可以将代码复制到力扣上第206号问题的解答区中去验证结果。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大家应该都听过这么一个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从前有座山，山上有座庙，庙里有个老和尚和一个小和尚，老和尚在给小和尚讲一个故事，故事是什么呢？故事就是：从前有座山，山上有座庙，庙里有个老和尚和一个小和尚，老和尚在给小和尚讲一个故事，故事是什么呢？故事就是：从前有座山，山上有座庙，庙里有个老和尚和一个小和尚，老和尚在给小和尚讲一个故事，故事是什么呢？故事就是：…..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也都应该经历过这么一个场景：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一些理发店里面呢，会有两个镜子相对的情况，镜子A里面可以看到镜子B，镜子B里面又可以看到镜子A，镜子A跟镜子B之间互相反射的循环反反复复的无穷无尽。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我认为这可以算是现实世界中的递归现象。当然了，现实世界中类似于这样的现象并不少见。我觉得发明了递归算法的人一定也是在这其中的某一个场景或者是某一个故事下获得的灵感。&lt;/p&gt;
&lt;p&gt;&lt;font color=blue&gt;毕竟，计算机科学就是一种对于现实世界的抽象。&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://www.wrp.cool/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="递归" scheme="https://www.wrp.cool/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="算法" scheme="https://www.wrp.cool/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
